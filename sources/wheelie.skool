@rom
@start

; Loading Screen
;
; #UDGTABLE
; { =h Wheelie Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$55 ; {Pixels.
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$01,$10,$7C,$80,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55 ;
 $40A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$C8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$40,$7E,$3C,$42,$7E,$00,$FE,$3C,$7C,$7E,$00,$7C,$42,$42,$42,$3E,$42,$3C,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$30,$7E,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4200 DEFB $10,$55,$55,$55,$50,$55,$55,$40,$40,$42,$42,$40,$00,$10,$42,$42,$40,$00,$42,$42,$62,$62,$08,$62,$42,$50,$15,$50,$50,$55,$55,$55 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $42,$1C,$38,$3C,$1C,$38,$68,$00,$00,$44,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $04,$51,$15,$55,$54,$51,$15,$55,$54,$45,$55,$41,$55,$05,$54,$01,$08,$40,$40,$55,$54,$45,$55,$41,$55,$55,$55,$55,$05,$05,$54,$05 ;
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$01,$FF,$FF,$FF,$FF,$FF,$80,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$40,$7C,$42,$42,$7C,$00,$10,$42,$42,$7C,$00,$42,$42,$52,$52,$08,$52,$40,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $42,$20,$44,$44,$20,$04,$54,$10,$00,$54,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$24,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8C,$27,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4400 DEFB $00,$54,$55,$05,$10,$54,$55,$40,$40,$7E,$42,$40,$00,$10,$7E,$7C,$40,$00,$7C,$42,$4A,$4A,$08,$4A,$4E,$40,$05,$40,$00,$54,$55,$05 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $7C,$20,$44,$44,$20,$3C,$54,$00,$00,$54,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$A4,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $04,$00,$15,$45,$44,$00,$15,$45,$40,$00,$50,$00,$10,$01,$50,$00,$73,$15,$7C,$45,$40,$00,$50,$00,$14,$50,$55,$15,$00,$01,$50,$01 ;
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$50,$01,$81,$81,$81,$81,$83,$80,$05,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$40,$40,$42,$24,$40,$00,$10,$42,$40,$40,$00,$44,$42,$46,$46,$08,$46,$42,$00,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $40,$20,$44,$3C,$20,$44,$54,$00,$00,$54,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$94,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8A,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$50,$11,$04,$00,$50,$11,$7E,$7E,$42,$18,$7E,$00,$10,$42,$40,$7E,$00,$42,$3C,$42,$42,$3E,$42,$3C,$00,$01,$40,$00,$50,$11,$04 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $40,$20,$38,$04,$20,$3C,$54,$10,$00,$28,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$52,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $00,$00,$01,$45,$40,$00,$01,$45,$40,$00,$00,$00,$00,$01,$40,$00,$00,$4B,$10,$45,$40,$00,$00,$00,$00,$10,$44,$05,$00,$01,$40,$00 ;
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$15,$50,$01,$81,$81,$81,$81,$83,$80,$05,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$65,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$88,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$FF,$FF,$FF,$FF,$FF,$80,$05,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55 ;
 $4820 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$0F,$FF,$FF,$FF,$B8,$80,$05,$55,$55,$55,$55,$55,$55,$55,$55,$50,$00,$00 ;
 $4840 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$FF,$FF,$FF,$FF,$E4,$80,$05,$55,$55,$55,$55,$55,$55,$55,$50,$00,$00,$00 ;
 $4860 DEFB $00,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$55,$55,$55,$06,$60,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$15 ;
 $4880 DEFB $10,$55,$55,$55,$55,$55,$55,$55,$55,$02,$00,$50,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$15,$55 ;
 $48A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$00 ;
 $48C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$20,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$0A,$00 ;
 $48E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$00 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4960 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$90,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4980 DEFB $30,$00,$00,$00,$00,$00,$00,$00,$00,$02,$4A,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$00,$00,$00,$00,$00,$0E,$00,$00,$00,$00,$00,$00 ;
 $49C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$52 ;
 $49E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A00 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$C8,$68,$CB,$68,$DA,$80,$05,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$00 ;
 $4A20 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$0C,$0C,$0C,$0F,$B4,$80,$05,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00 ;
 $4A40 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$FB,$6F,$FF,$EB,$BF,$80,$05,$55,$55,$55,$55,$55,$55,$55,$40,$00,$00,$00 ;
 $4A60 DEFB $00,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$55,$55,$55,$13,$10,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$55 ;
 $4A80 DEFB $D1,$55,$55,$55,$55,$50,$15,$50,$55,$05,$00,$90,$15,$55,$55,$51,$55,$55,$55,$51,$55,$50,$15,$50,$55,$54,$00,$00,$00,$00,$55,$55 ;
 $4AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B0,$00,$00,$00,$00,$00,$11,$00,$00,$00,$40,$00,$00 ;
 $4AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$09,$00 ;
 $4AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00 ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B60 DEFB $80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B80 DEFB $CE,$00,$00,$00,$00,$00,$00,$00,$00,$04,$22,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$40,$00,$00,$00,$00,$00,$20,$80,$00,$00,$00,$00,$00 ;
 $4BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$73,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$44 ;
 $4BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C00 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$FF,$FF,$FF,$FF,$B6,$80,$05,$55,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00 ;
 $4C20 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$0C,$0C,$0C,$0F,$B4,$80,$05,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00 ;
 $4C40 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$00,$01,$C0,$00,$07,$00,$00,$05,$55,$55,$55,$55,$55,$55,$51,$40,$00,$00,$01 ;
 $4C60 DEFB $40,$55,$55,$55,$55,$55,$55,$55,$55,$00,$1E,$00,$55,$55,$55,$78,$30,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$01,$55 ;
 $4C80 DEFB $00,$54,$55,$05,$15,$40,$05,$40,$01,$08,$08,$54,$14,$50,$55,$10,$14,$50,$55,$10,$15,$40,$05,$40,$01,$54,$00,$00,$00,$01,$15,$55 ;
 $4CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$80,$00,$00,$00,$00,$00,$24,$80,$00,$01,$00,$00,$78 ;
 $4CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$2A,$10 ;
 $4CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00 ;
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D60 DEFB $20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$61,$80,$00,$00,$00,$E0,$D0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$41,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$60,$00,$00,$00,$00,$00,$20,$80,$00,$00,$00,$01,$86 ;
 $4DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$82 ;
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E00 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$FF,$FF,$FF,$FF,$FF,$80,$05,$55,$55,$55,$55,$55,$55,$55,$55,$54,$00,$00 ;
 $4E20 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$01,$FF,$FF,$FF,$FF,$B4,$80,$05,$55,$55,$55,$55,$55,$55,$55,$54,$00,$00,$00 ;
 $4E40 DEFB $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$55,$55,$55,$40,$00,$00,$00,$05 ;
 $4E60 DEFB $20,$55,$55,$55,$55,$55,$55,$55,$55,$00,$88,$40,$55,$55,$55,$F7,$50,$55,$55,$55,$55,$55,$55,$55,$55,$55,$54,$00,$00,$00,$05,$55 ;
 $4E80 DEFB $00,$50,$11,$04,$01,$00,$01,$40,$01,$08,$00,$41,$00,$10,$44,$00,$00,$10,$44,$00,$01,$00,$01,$40,$00,$40,$00,$00,$00,$04,$01,$14 ;
 $4EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$80,$00,$00,$00,$00,$00,$11,$00,$00,$04,$00,$02,$11 ;
 $4EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$82,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$00,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F60 DEFB $90,$00,$00,$00,$00,$00,$00,$00,$00,$01,$21,$20,$00,$00,$00,$4F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$C0,$00,$00,$00,$00,$00,$0E,$00,$00,$00,$00,$04,$84 ;
 $4FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FE,$FF ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5020 DEFB $00,$00,$00,$0F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$00,$00 ;
 $5040 DEFB $00,$00,$04,$08,$84,$80,$00,$0C,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FC,$30,$00,$01,$21,$10,$20,$00,$00 ;
 $5060 DEFB $00,$00,$E4,$02,$30,$00,$00,$00,$1F,$00,$07,$00,$07,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$F8,$00,$00,$00,$0C,$40,$27,$00,$00 ;
 $5080 DEFB $00,$90,$84,$48,$85,$00,$00,$00,$07,$FF,$01,$8D,$8C,$3F,$F9,$FF,$1F,$F1,$C0,$1C,$FF,$80,$FF,$E0,$00,$00,$00,$A1,$12,$21,$09,$00 ;
 $50A0 DEFB $00,$08,$88,$71,$4A,$48,$00,$00,$00,$1F,$00,$70,$70,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$F8,$00,$00,$00,$12,$52,$8E,$11,$10,$00 ;
 $50C0 DEFB $00,$0B,$D3,$80,$02,$85,$00,$00,$00,$00,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$00,$00,$00,$00,$A1,$40,$01,$CB,$D0,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$12,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$48,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5120 DEFB $00,$00,$00,$10,$40,$00,$00,$1F,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$F8,$00,$00,$02,$08,$00,$00,$00 ;
 $5140 DEFB $00,$00,$08,$07,$34,$80,$00,$0F,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F0,$F0,$00,$01,$2C,$E0,$10,$00,$00 ;
 $5160 DEFB $00,$00,$88,$0D,$C8,$00,$00,$00,$0F,$00,$07,$00,$07,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$F0,$00,$00,$00,$13,$B0,$11,$00,$00 ;
 $5180 DEFB $00,$88,$F8,$08,$C3,$80,$00,$00,$03,$FF,$01,$DD,$DC,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FF,$C0,$00,$00,$01,$C3,$10,$1F,$11,$00 ;
 $51A0 DEFB $00,$13,$C8,$71,$46,$28,$00,$00,$00,$0F,$00,$70,$70,$38,$39,$FF,$9F,$F9,$FF,$9C,$FF,$C0,$F0,$00,$00,$00,$14,$62,$8E,$13,$C8,$00 ;
 $51C0 DEFB $00,$0B,$12,$00,$02,$85,$00,$00,$00,$00,$3F,$FF,$FF,$E0,$00,$00,$00,$00,$07,$FF,$FF,$FC,$00,$00,$00,$00,$A1,$40,$00,$48,$D0,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$42,$42,$10,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5220 DEFB $00,$00,$00,$20,$40,$00,$00,$7F,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FE,$00,$00,$02,$04,$00,$00,$00 ;
 $5240 DEFB $00,$07,$10,$00,$CB,$80,$00,$07,$E7,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E7,$E0,$00,$01,$D3,$00,$08,$E0,$00 ;
 $5260 DEFB $00,$00,$80,$74,$08,$00,$00,$00,$03,$00,$03,$00,$06,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$C0,$00,$00,$00,$10,$2E,$01,$00,$00 ;
 $5280 DEFB $00,$6F,$88,$F0,$44,$80,$00,$00,$01,$FF,$01,$DD,$DC,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FF,$80,$00,$00,$01,$22,$0F,$11,$F6,$00 ;
 $52A0 DEFB $00,$14,$CC,$21,$CE,$24,$00,$00,$00,$0F,$00,$70,$70,$38,$39,$FF,$9F,$F9,$FF,$9C,$FF,$C0,$F0,$00,$00,$00,$24,$73,$84,$33,$28,$00 ;
 $52C0 DEFB $00,$09,$14,$00,$01,$45,$00,$00,$00,$00,$1F,$FF,$FF,$80,$00,$00,$00,$00,$01,$FF,$FF,$F8,$00,$00,$00,$00,$A2,$80,$00,$28,$90,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$99,$66,$00,$1C,$1C,$38,$38,$78,$40,$38,$1C,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5320 DEFB $00,$00,$00,$20,$40,$00,$00,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$00,$00,$02,$04,$00,$00,$00 ;
 $5340 DEFB $00,$04,$7F,$FF,$10,$00,$00,$03,$F3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$CF,$C0,$00,$00,$08,$FF,$FE,$20,$00 ;
 $5360 DEFB $00,$00,$A4,$82,$3E,$00,$00,$00,$00,$00,$03,$80,$0E,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$00,$00,$00,$00,$7C,$41,$25,$00,$00 ;
 $5380 DEFB $00,$10,$88,$FE,$A8,$40,$00,$00,$00,$FF,$01,$DD,$DC,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FF,$00,$00,$00,$02,$15,$7F,$11,$08,$00 ;
 $53A0 DEFB $00,$14,$44,$0E,$87,$14,$00,$00,$00,$07,$00,$70,$70,$38,$39,$FF,$9F,$F9,$FF,$9C,$FF,$C0,$E0,$00,$00,$00,$28,$E1,$70,$22,$28,$00 ;
 $53C0 DEFB $00,$05,$24,$00,$01,$45,$00,$00,$00,$00,$0F,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$00,$00,$00,$00,$A2,$80,$00,$24,$A0,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A1,$5A,$30,$20,$20,$44,$40,$44,$78,$44,$20,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5420 DEFB $00,$00,$00,$2E,$80,$00,$00,$7F,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FF,$FE,$00,$00,$01,$74,$00,$00,$00 ;
 $5440 DEFB $00,$04,$F0,$41,$E0,$00,$00,$01,$FF,$00,$07,$00,$07,$38,$39,$FF,$9F,$F9,$C0,$1C,$FF,$C0,$00,$FF,$80,$00,$00,$07,$82,$0F,$20,$00 ;
 $5460 DEFB $00,$01,$C5,$07,$C0,$80,$00,$00,$3C,$00,$03,$80,$0E,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$3C,$00,$00,$01,$03,$E0,$A3,$80,$00 ;
 $5480 DEFB $00,$20,$84,$FE,$A8,$20,$00,$00,$00,$7F,$00,$D8,$D8,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FE,$00,$00,$00,$04,$15,$7F,$21,$04,$00 ;
 $54A0 DEFB $00,$14,$44,$7E,$87,$12,$00,$00,$00,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$00,$00,$00,$48,$E1,$7E,$22,$28,$00 ;
 $54C0 DEFB $00,$04,$C4,$00,$00,$A5,$00,$00,$00,$00,$03,$FF,$F0,$00,$00,$00,$00,$00,$00,$0F,$FF,$C0,$00,$00,$00,$00,$A5,$00,$00,$23,$20,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A1,$42,$10,$20,$20,$44,$38,$44,$44,$78,$20,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5520 DEFB $00,$00,$00,$28,$40,$00,$00,$0F,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$02,$14,$00,$00,$00 ;
 $5540 DEFB $00,$03,$9F,$C2,$10,$00,$00,$00,$FF,$00,$07,$00,$07,$38,$39,$FF,$9F,$F9,$C0,$1C,$FF,$C0,$00,$FF,$00,$00,$00,$08,$43,$F9,$C0,$00 ;
 $5560 DEFB $00,$1E,$42,$0C,$81,$00,$00,$00,$3F,$00,$03,$80,$0E,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$FC,$00,$00,$00,$81,$30,$42,$78,$00 ;
 $5580 DEFB $00,$2F,$84,$7D,$1B,$A0,$00,$00,$00,$3F,$00,$D8,$D8,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FC,$00,$00,$00,$05,$D8,$BE,$21,$F4,$00 ;
 $55A0 DEFB $00,$14,$79,$80,$87,$CA,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$00,$00,$53,$E1,$01,$9E,$28,$00 ;
 $55C0 DEFB $00,$02,$08,$00,$00,$95,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A9,$00,$00,$10,$40,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$99,$42,$10,$20,$20,$44,$04,$78,$44,$40,$20,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5620 DEFB $00,$00,$00,$D3,$A0,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$05,$CB,$00,$00,$00 ;
 $5640 DEFB $00,$00,$91,$02,$10,$00,$00,$00,$7F,$00,$07,$00,$07,$38,$39,$FF,$9F,$F9,$C0,$1C,$FF,$C0,$00,$FE,$00,$00,$00,$08,$40,$89,$00,$00 ;
 $5660 DEFB $00,$10,$82,$39,$76,$00,$00,$00,$1F,$00,$03,$87,$0E,$3F,$F9,$FF,$1F,$F1,$C0,$1C,$FF,$80,$00,$F8,$00,$00,$00,$6E,$9C,$41,$08,$00 ;
 $5680 DEFB $00,$30,$84,$79,$1A,$90,$00,$00,$00,$3F,$00,$D8,$D8,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FC,$00,$00,$00,$09,$58,$9E,$21,$0C,$00 ;
 $56A0 DEFB $00,$14,$32,$01,$85,$0A,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$00,$00,$50,$A1,$80,$4C,$28,$00 ;
 $56C0 DEFB $00,$01,$10,$00,$00,$49,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$92,$00,$00,$08,$80,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$42,$38,$1C,$20,$38,$78,$40,$44,$3C,$20,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5720 DEFB $00,$00,$03,$08,$5B,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$DA,$10,$C0,$00,$00 ;
 $5740 DEFB $00,$00,$92,$02,$10,$00,$00,$00,$3F,$00,$07,$00,$07,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$FC,$00,$00,$00,$08,$40,$49,$00,$00 ;
 $5760 DEFB $00,$70,$84,$65,$09,$00,$00,$00,$0F,$00,$01,$87,$0C,$3F,$F9,$FF,$1F,$F1,$C0,$1C,$FF,$80,$00,$F0,$00,$00,$00,$90,$A6,$21,$0E,$00 ;
 $5780 DEFB $00,$07,$84,$79,$DA,$50,$00,$00,$00,$1F,$00,$F8,$F8,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$F8,$00,$00,$00,$0A,$5B,$9E,$21,$E0,$00 ;
 $57A0 DEFB $00,$16,$F2,$7E,$02,$89,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$91,$40,$7E,$4F,$68,$00 ;
 $57C0 DEFB $00,$00,$E0,$00,$00,$11,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$00,$07,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $04,$04,$04,$04,$04,$04,$04,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$04,$04,$04,$04,$04,$04,$04 ; {Attributes.
 $5820 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$46,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5860 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$07,$07,$07,$07,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5880 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$07,$07,$07,$07,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $58A0 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$07,$07,$07,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $58C0 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $58E0 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5900 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5920 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5940 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5960 DEFB $43,$04,$04,$04,$04,$04,$04,$04,$04,$42,$42,$42,$04,$04,$04,$46,$46,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5980 DEFB $43,$04,$04,$04,$04,$04,$04,$04,$04,$42,$42,$42,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $59A0 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$43,$43,$04,$04,$04,$04,$04,$45,$45,$04,$04,$04,$42,$42 ;
 $59C0 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$43,$43,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$42,$42 ;
 $59E0 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ;
 $5A00 DEFB $18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18 ;
 $5A20 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $5A40 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $5A60 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$38,$38,$10,$10,$10,$10,$10,$10,$10,$10,$10,$38,$38,$38,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $5A80 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$38,$28,$28,$28,$28,$28,$28,$28,$28,$28,$38,$38,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $5AA0 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $5AC0 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $5AE0 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ; }

; Data block at 5B00
b$5B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C00 DEFB $FF,$00,$00,$00,$FF,$00,$23,$0D
 $5C08 DEFB $0D,$23,$05,$00,$00,$00,$16,$00
 $5C10 DEFB $01,$00,$06,$00,$0B,$00,$01,$00
 $5C18 DEFB $01,$00,$06,$00,$10,$00,$00,$00
 $5C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C30 DEFB $00,$00,$00,$00,$00,$00,$00,$3C
 $5C38 DEFB $40,$00,$FF,$CD,$00,$54,$FF,$00
 $5C40 DEFB $00,$00,$01,$00,$FF,$01,$00,$01
 $5C48 DEFB $07,$00,$00,$48,$F5,$00,$00,$B6
 $5C50 DEFB $5C,$BB,$5C,$CB,$5C,$16,$73,$CA
 $5C58 DEFB $5C,$49,$F5,$4C,$F5,$03,$5D,$5F
 $5C60 DEFB $F5,$4E,$F5,$4E,$F5,$4E,$F5,$2D
 $5C68 DEFB $92,$5C,$00,$02,$00,$00,$00,$00
 $5C70 DEFB $00,$00,$00,$00,$B6,$1A,$06,$00
 $5C78 DEFB $14,$00,$00,$58,$FF,$00,$00,$21
 $5C80 DEFB $00,$5B,$21,$17,$60,$40,$E0,$50
 $5C88 DEFB $21,$15,$21,$17,$03,$00,$00,$00
 $5C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CB0 DEFB $00,$00,$57,$FF,$FF,$FF,$F4,$09
 $5CB8 DEFB $A8,$10,$4B,$F4,$09,$C4,$15,$53
 $5CC0 DEFB $81,$0F,$C4,$15,$52,$F4,$09,$C4
 $5CC8 DEFB $15,$50,$80,$00,$01,$47,$16,$F9
 $5CD0 DEFB $C0,$28,$BE,$32,$33,$36,$33,$35
 $5CD8 DEFB $0E,$00,$00,$53,$5C,$00,$2B,$28
 $5CE0 DEFB $32,$35,$36,$0E,$00,$00,$00,$01
 $5CE8 DEFB $00,$2A,$28,$BE,$32,$33,$36,$33
 $5CF0 DEFB $36,$0E,$00,$00,$54,$5C,$00,$29
 $5CF8 DEFB $29,$2B,$37,$30,$0E,$00,$00,$46
 $5D00 DEFB $00,$00,$29,$3A,$EA,$78,$78,$78
 $5D08 DEFB $78,$0D,$00,$02,$FC,$63,$EA,$78
 $5D10 DEFB $78

; Game Entry Point
@label=GameEntryPoint
c$5D11 LD HL,$FFFF   ; {#REGsp=#N$FFFF.
 $5D14 LD SP,HL      ; }
 $5D15 LD HL,($5C53) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C53.html">PROG</a>.)
 $5D18 LD BC,$9B94   ; #REGbc=#N$9B94.
 $5D1B LD DE,$FE00   ; #REGde=#N$FE00.
 $5D1E ADD HL,BC     ; #REGhl+=#REGbc.
 $5D1F LD BC,$9A01   ; #REGbc=#N$9A01.
 $5D22 LDDR          ; Move the code into place.
 $5D24 JP $6D1E      ; Jump to #R$6D1E.

; Data block at 5D27
b$5D27 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D2F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D37 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D3F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D47 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D4F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D57 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D5F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D67 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D6F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D77 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D7F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D87 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D8F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D97 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5D9F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DA7 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DAF DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DB7 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DBF DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DC7 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DCF DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DD7 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DDF DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DE7 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DEF DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DF7 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5DFF DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E07 DEFB $78,$78,$0D,$00,$02,$FC,$00,$EA
 $5E0F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E17 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E1F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E27 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E2F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E37 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E3F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E47 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E4F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E57 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $5E5F DEFB $E5,$2A,$1E,$78,$7E,$2C,$20,$07
 $5E67 DEFB $24,$CB,$54,$28,$02,$26,$79,$22
 $5E6F DEFB $1E,$78,$E1,$C9,$2A,$78,$5C,$7C
 $5E77 DEFB $E6,$03,$20,$01,$3C,$C6,$78,$67
 $5E7F DEFB $22,$1E,$78,$C9,$0E,$05,$06,$20
 $5E87 DEFB $7E,$23,$12,$1C,$10,$FA,$1D,$7B
 $5E8F DEFB $E6,$E0,$5F,$14,$0D,$20,$EF,$C6
 $5E97 DEFB $20,$5F,$C8,$7A,$D6,$05,$57,$C9
 $5E9F DEFB $3E,$0A,$00,$4F,$04,$0C,$21,$1E
 $5EA7 DEFB $A0,$E5,$11,$00,$B4,$35,$28,$08
 $5EAF DEFB $1E,$24,$24,$35,$28,$02,$1E,$48
 $5EB7 DEFB $E1,$E5,$2C,$2C,$20,$04,$7C,$C6
 $5EBF DEFB $05,$67,$2C,$7E,$3D,$28,$09,$24
 $5EC7 DEFB $7E,$3D,$3E,$0C,$28,$02,$3E,$18
 $5ECF DEFB $83,$5F,$E1,$25,$06,$04,$1A,$77
 $5ED7 DEFB $24,$1C,$10,$FA,$25,$25,$25,$25
 $5EDF DEFB $2C,$06,$04,$1A,$77,$24,$1C,$10
 $5EE7 DEFB $FA,$24,$2C,$28,$04,$7C,$D6,$05
 $5EEF DEFB $67,$06,$04,$1A,$77,$24,$1C,$10
 $5EF7 DEFB $FA,$25,$25,$25,$7D,$C6,$1E,$6F
 $5EFF DEFB $0D,$20,$A6,$C9,$00,$00,$00,$00
 $5F07 DEFB $00,$00,$21,$00,$9E,$01,$00,$0A
 $5F0F DEFB $3E,$32,$ED,$B1,$78,$B1,$C8,$E5
 $5F17 DEFB $C5,$AF,$00,$00,$06,$04,$5F,$2D
 $5F1F DEFB $CD,$00,$64,$E6,$07,$BB,$38,$2C
 $5F27 DEFB $CD,$88,$70,$E6,$07,$87,$5F,$87
 $5F2F DEFB $83,$C6,$6C,$5F,$16,$B4,$1A,$77
 $5F37 DEFB $1C,$2C,$10,$FA,$1A,$A7,$28,$19
 $5F3F DEFB $2D,$2D,$2D,$24,$06,$02,$7E,$A7
 $5F47 DEFB $1A,$28,$02,$3C,$3C,$77,$2C,$1C
 $5F4F DEFB $10,$F4,$18,$05,$36,$01,$2C,$10
 $5F57 DEFB $FB,$C1,$E1,$18,$B3,$00,$00,$00
 $5F5F DEFB $11,$00,$9E,$21,$60,$89,$CD,$24
 $5F67 DEFB $64,$21,$01,$A1,$06,$0A,$36,$00
 $5F6F DEFB $25,$36,$00,$24,$2C,$10,$F7,$36
 $5F77 DEFB $23,$D9,$3E,$0A,$00,$47,$D9,$CD
 $5F7F DEFB $00,$64,$E6,$1F,$47,$87,$87,$80
 $5F87 DEFB $0F,$0F,$0F,$6F,$E6,$1F,$C6,$8A
 $5F8F DEFB $67,$7D,$E6,$E0,$6F,$CD,$24,$64
 $5F97 DEFB $D9,$10,$E3,$D9,$21,$60,$89,$CD
 $5F9F DEFB $24,$64,$7B,$21,$F4,$02,$A7,$20
 $5FA7 DEFB $02,$26,$FE,$19,$36,$22,$06,$0A
 $5FAF DEFB $2C,$36,$00,$25,$36,$00,$24,$10
 $5FB7 DEFB $F7,$CD,$40,$64,$CD,$AA,$64,$CD
 $5FBF DEFB $00,$72,$C9,$00,$87,$87,$4F,$D9
 $5FC7 DEFB $01,$FF,$05,$11,$00,$78,$D9,$1A
 $5FCF DEFB $14,$0F,$0F,$0F,$6F,$E6,$1F,$C6
 $5FD7 DEFB $80,$67,$7D,$E6,$E0,$81,$6F,$E5
 $5FDF DEFB $D9,$E1,$ED,$A0,$ED,$A0,$ED,$A0
 $5FE7 DEFB $ED,$A0,$10,$E2,$1A,$3C,$12,$1C
 $5FEF DEFB $1A,$D9,$80,$D9,$12,$1E,$02,$06
 $5FF7 DEFB $10,$D9,$C9,$00,$2A,$17,$78,$54
 $5FFF DEFB $5D,$3A,$19,$78,$4F,$3C,$E6,$07
 $6007 DEFB $32,$19,$78,$20,$0A,$2C,$20,$04
 $600F DEFB $7C,$C6,$05,$67,$22,$17,$78,$7B
 $6017 DEFB $C6,$08,$5F,$30,$04,$7A,$C6,$05
 $601F DEFB $57,$79,$06,$01,$CD,$64,$65,$21
 $6027 DEFB $1F,$40,$54,$5D,$D9,$1A,$1C,$6F
 $602F DEFB $26,$1F,$29,$29,$D9,$06,$04,$D9
 $6037 DEFB $7E,$2C,$D9,$ED,$6F,$2D,$ED,$6F
 $603F DEFB $2D,$ED,$6F,$2D,$ED,$6F,$2D,$ED
 $6047 DEFB $6F,$2D,$ED,$6F,$2D,$ED,$6F,$2D
 $604F DEFB $ED,$6F,$2D,$ED,$6F,$2D,$ED,$6F
 $6057 DEFB $2D,$ED,$6F,$2D,$ED,$6F,$2D,$ED
 $605F DEFB $6F,$2D,$ED,$6F,$2D,$ED,$6F,$2D
 $6067 DEFB $ED,$6F,$2D,$ED,$6F,$2D,$ED,$6F
 $606F DEFB $2D,$ED,$6F,$2D,$ED,$6F,$2D,$ED
 $6077 DEFB $6F,$2D,$ED,$6F,$2D,$ED,$6F,$2D
 $607F DEFB $ED,$6F,$2D,$ED,$6F,$2D,$ED,$6F
 $6087 DEFB $2D,$ED,$6F,$2D,$ED,$6F,$2D,$ED
 $608F DEFB $6F,$2D,$ED,$6F,$2D,$ED,$6F,$2D
 $6097 DEFB $ED,$6F,$6B,$24,$24,$10,$98,$3E
 $609F DEFB $20,$83,$5F,$6F,$30,$02,$16,$48
 $60A7 DEFB $62,$D9,$10,$81,$D9,$C9,$00,$00
 $60AF DEFB $2A,$17,$78,$3A,$19,$78,$A7,$20
 $60B7 DEFB $0E,$7D,$A7,$20,$04,$7C,$D6,$05
 $60BF DEFB $67,$2D,$22,$17,$78,$3E,$08,$3D
 $60C7 DEFB $32,$19,$78,$54,$5D,$06,$FF,$CD
 $60CF DEFB $64,$65,$21,$00,$40,$54,$5D,$D9
 $60D7 DEFB $1A,$1C,$6F,$26,$1F,$29,$29,$D9
 $60DF DEFB $06,$04,$D9,$7E,$2C,$D9,$ED,$67
 $60E7 DEFB $2C,$ED,$67,$2C,$ED,$67,$2C,$ED
 $60EF DEFB $67,$2C,$ED,$67,$2C,$ED,$67,$2C
 $60F7 DEFB $ED,$67,$2C,$ED,$67,$2C,$ED,$67
 $60FF DEFB $2C,$ED,$67,$2C,$ED,$67,$2C,$ED
 $6107 DEFB $67,$2C,$ED,$67,$2C,$ED,$67,$2C
 $610F DEFB $ED,$67,$2C,$ED,$67,$2C,$ED,$67
 $6117 DEFB $2C,$ED,$67,$2C,$ED,$67,$2C,$ED
 $611F DEFB $67,$2C,$ED,$67,$2C,$ED,$67,$2C
 $6127 DEFB $ED,$67,$2C,$ED,$67,$2C,$ED,$67
 $612F DEFB $2C,$ED,$67,$2C,$ED,$67,$2C,$ED
 $6137 DEFB $67,$2C,$ED,$67,$2C,$ED,$67,$2C
 $613F DEFB $ED,$67,$2C,$ED,$67,$6B,$24,$24
 $6147 DEFB $10,$98,$3E,$20,$83,$5F,$6F,$30
 $614F DEFB $02,$16,$48,$62,$D9,$10,$81,$D9
 $6157 DEFB $C9,$00,$00,$00,$00,$00,$00,$00
 $615F DEFB $11,$02,$78,$06,$10,$1A,$1C,$0E
 $6167 DEFB $04,$FE,$0F,$38,$15,$FE,$90,$30
 $616F DEFB $11,$0C,$FE,$3D,$38,$0C,$0C,$FE
 $6177 DEFB $51,$38,$07,$0E,$02,$FE,$6F,$38
 $617F DEFB $01,$0C,$71,$3E,$20,$85,$6F,$8C
 $6187 DEFB $95,$67,$10,$D9,$C9,$00,$21,$01
 $618F DEFB $58,$11,$00,$58,$06,$10,$0E,$FF
 $6197 DEFB $ED,$A0,$ED,$A0,$ED,$A0,$ED,$A0
 $619F DEFB $ED,$A0,$ED,$A0,$ED,$A0,$ED,$A0
 $61A7 DEFB $ED,$A0,$ED,$A0,$ED,$A0,$ED,$A0
 $61AF DEFB $ED,$A0,$ED,$A0,$ED,$A0,$ED,$A0
 $61B7 DEFB $ED,$A0,$ED,$A0,$ED,$A0,$ED,$A0
 $61BF DEFB $ED,$A0,$ED,$A0,$ED,$A0,$ED,$A0
 $61C7 DEFB $ED,$A0,$ED,$A0,$ED,$A0,$ED,$A0
 $61CF DEFB $ED,$A0,$ED,$A0,$ED,$A0,$23,$13
 $61D7 DEFB $10,$BC,$21,$1F,$58,$C3,$00,$67
 $61DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61E7 DEFB $00,$00,$00,$00,$21,$FE,$59,$11
 $61EF DEFB $FF,$59,$06,$10,$0E,$FF,$ED,$A8
 $61F7 DEFB $ED,$A8,$ED,$A8,$ED,$A8,$ED,$A8
 $61FF DEFB $ED,$A8,$ED,$A8,$ED,$A8,$ED,$A8
 $6207 DEFB $ED,$A8,$ED,$A8,$ED,$A8,$ED,$A8
 $620F DEFB $ED,$A8,$ED,$A8,$ED,$A8,$ED,$A8
 $6217 DEFB $ED,$A8,$ED,$A8,$ED,$A8,$ED,$A8
 $621F DEFB $ED,$A8,$ED,$A8,$ED,$A8,$ED,$A8
 $6227 DEFB $ED,$A8,$ED,$A8,$ED,$A8,$ED,$A8
 $622F DEFB $ED,$A8,$ED,$A8,$2B,$1B,$10,$BC
 $6237 DEFB $21,$00,$58,$C3,$00,$67,$00,$00
 $623F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6247 DEFB $00,$21,$14,$78,$7E,$FE,$02,$C0
 $624F DEFB $36,$00,$23,$7E,$A7,$C8,$36,$00
 $6257 DEFB $FE,$02,$CA,$2E,$67,$C3,$8C,$67
 $625F DEFB $32,$19,$78,$7D,$D6,$08,$6F,$30
 $6267 DEFB $04,$7C,$D6,$05,$67,$22,$17,$78
 $626F DEFB $21,$00,$00,$22,$14,$78,$06,$20
 $6277 DEFB $C5,$CD,$9C,$65,$CD,$9C,$65,$CD
 $627F DEFB $E9,$67,$C1,$10,$F3,$C9,$00,$00
 $6287 DEFB $11,$00,$FE,$01,$FE,$FE,$ED,$78
 $628F DEFB $2F,$E6,$1F,$28,$01,$37,$CB,$13
 $6297 DEFB $CB,$12,$30,$04,$CB,$00,$18,$EE
 $629F DEFB $7B,$0F,$30,$02,$CB,$C2,$0F,$30
 $62A7 DEFB $02,$CB,$D2,$0F,$30,$02,$CB,$DA
 $62AF DEFB $0F,$30,$02,$CB,$E2,$0F,$30,$02
 $62B7 DEFB $CB,$E2,$0F,$30,$02,$CB,$DA,$0F
 $62BF DEFB $30,$02,$CB,$D2,$0F,$30,$02,$CB
 $62C7 DEFB $CA,$7A,$E6,$03,$FE,$03,$20,$02
 $62CF DEFB $AA,$57,$7A,$E6,$0C,$FE,$0C,$20
 $62D7 DEFB $02,$AA,$57,$7A,$C9,$00,$00,$00
 $62DF DEFB $CB,$7F,$20,$01,$2F,$E6,$7F,$1F
 $62E7 DEFB $6F,$3E,$A7,$00,$00,$00,$00,$95
 $62EF DEFB $6F,$26,$B4,$ED,$A0,$ED,$A0,$ED
 $62F7 DEFB $A0,$ED,$A0,$ED,$A0,$ED,$A0,$ED
 $62FF DEFB $A0,$ED,$A0,$ED,$A0,$ED,$A0,$ED
 $6307 DEFB $A0,$ED,$A0,$C9,$00,$3A,$1B,$78
 $630F DEFB $A7,$C8,$2A,$1C,$78,$47,$0E,$00
 $6317 DEFB $2B,$56,$2B,$5E,$2B,$7E,$12,$2B
 $631F DEFB $7A,$D6,$11,$F6,$07,$57,$EB,$71
 $6327 DEFB $25,$1A,$77,$1B,$25,$71,$25,$1A
 $632F DEFB $77,$1B,$25,$71,$25,$1A,$77,$1B
 $6337 DEFB $25,$71,$25,$1A,$77,$EB,$10,$D8
 $633F DEFB $22,$1C,$78,$AF,$32,$1B,$78,$C9
 $6347 DEFB $00,$00,$00,$00,$D9,$22,$1C,$78
 $634F DEFB $78,$32,$1B,$78,$D9,$C9,$7E,$D9
 $6357 DEFB $77,$23,$D9,$0A,$77,$03,$24,$0A
 $635F DEFB $77,$03,$24,$7E,$D9,$77,$23,$D9
 $6367 DEFB $0A,$77,$03,$24,$0A,$77,$03,$C9
 $636F DEFB $7C,$D6,$48,$9F,$C6,$59,$67,$7E
 $6377 DEFB $E5,$D9,$D1,$04,$77,$23,$73,$23
 $637F DEFB $72,$23,$FE,$07,$79,$D9,$77,$C0
 $6387 DEFB $C3,$F2,$73,$C9,$47,$79,$D9,$2A
 $638F DEFB $1C,$78,$4F,$3A,$1B,$78,$47,$D9
 $6397 DEFB $78,$87,$6F,$CE,$BE,$95,$67,$78
 $639F DEFB $4E,$2C,$46,$CB,$6F,$C2,$A8,$6D
 $63A7 DEFB $0A,$03,$83,$5F,$0A,$03,$82,$57
 $63AF DEFB $FE,$10,$30,$05,$7B,$FE,$20,$38
 $63B7 DEFB $15,$21,$08,$00,$09,$44,$4D,$0A
 $63BF DEFB $3C,$3E,$01,$20,$E9,$03,$0A,$FE
 $63C7 DEFB $80,$20,$DE,$C3,$EC,$68,$7A,$C6
 $63CF DEFB $40,$E6,$48,$67,$7A,$0F,$0F,$0F
 $63D7 DEFB $E6,$E0,$83,$6F,$CD,$F6,$68,$24
 $63DF DEFB $CD,$F6,$68,$CD,$10,$69,$18,$D7
 $63E7 DEFB $32,$25,$78,$D9,$77,$60,$69,$C3
 $63EF DEFB $1B,$69,$00,$00,$00,$00,$5F,$3A
 $63F7 DEFB $28,$78,$CB,$57,$20,$06,$1C,$CB
 $63FF DEFB $5F

; Get Random Number
;
; Used by the routines at #R$64AA, #R$6500, #R$7088, #R$709D, #R$7200 and
; #R$73B7.
;
; O:A Random number
;
; Random numbers are just data pulled from addresses between #N$7900-#N$7AFF
; (sequentially).
@label=GetRandomNumber
c$6400 PUSH HL       ; Stash #REGhl on the stack.
 $6401 LD HL,($781E) ; #REGhl=*#R$781E.
 $6404 LD A,(HL)     ; #REGa=*#REGhl.
 $6405 INC L         ; Increment #REGl by one.
 $6406 JR NZ,$640F   ; Jump to #R$640F if #REGl is not zero.
 $6408 INC H         ; Increment #REGh by one.
 $6409 BIT 2,H       ; {Jump to #R$640F if bit 2 of #REGh is not set.
 $640B JR Z,$640F    ; }
; Bit 2 is set, this means that #REGh has reached #N$7C so pull the range back
; down to #N$79.
 $640D LD H,$79      ; #REGh=#N$79.
@label=UpdateRandomNumberSeed
*$640F LD ($781E),HL ; Write #REGhl to *#R$781E.
 $6412 POP HL        ; Restore #REGhl from the stack.
 $6413 RET           ; Return.

; Set Random Number Seed?
;
; Used by the routine at #R$E80E.
@label=SetRandomNumberSeed
c$6414 LD HL,($5C78) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>.)
 $6417 LD A,H        ; {#REGh=random number between #N$79-#N$7B.
 $6418 AND %00000011 ;
 $641A JR NZ,$641D   ;
 $641C INC A         ;
@label=SkipNonZero
*$641D ADD A,$78     ;
 $641F LD H,A        ; }
 $6420 LD ($781E),HL ; Write #REGhl to *#R$781E.
 $6423 RET           ; Return.

; Copy Level Data to Level Buffer
;
; Used by the routine at #R$6500.
;
; HL Source data pointer
; DE Destination buffer pointer
@label=CopyLevelDataToBuffer
c$6424 LD C,$05      ; Set a counter in #REGc for #N$05 rows to copy.
@label=CopyLevelDataToBuffer_CopyRow
*$6426 LD B,$20      ; Set a counter in #REGb for #N$20 bytes per row.
@label=CopyLevelDataToBuffer_CopyByte
*$6428 LD A,(HL)     ; Fetch a terrain byte from the source data.
 $6429 INC HL        ; Move to the next source data byte.
 $642A LD (DE),A     ; Write the byte to the destination buffer.
 $642B INC E         ; Move to the next destination buffer position.
 $642C DJNZ $6428    ; Decrease the bytes-per-row counter by one and loop back to #R$6428
                     ; until the whole row has been copied.
; Handle updating the destination pointer positioning after each row.
 $642E DEC E         ; Step back one position.
 $642F LD A,E        ; Align to a #N$20 byte boundary.
 $6430 AND %11100000 ; Keep only the upper 3 bits of the #REGe co-ordinate.
 $6432 LD E,A        ; Reset to the start of the current #N$20 byte block.
 $6433 INC D         ; Move down one row.
 $6434 DEC C         ; Decrease the row counter by one.
 $6435 JR NZ,$6426   ; Jump back to #R$6426 until all the rows have been
                     ; copied.
; Adjust the destination pointer after copying a complete #N$05x#N$20
; block.
 $6437 ADD A,$20     ; Move to the next block horizontally.
 $6439 LD E,A        ; Load the new horizontal position into #REGe.
 $643A RET Z         ; Return if #REGe wrapped around to #N$00 (we reached the end of the
                     ; buffer).
; Move the destination pointer back up #N$05 rows to the original
; vertical position.
 $643B LD A,D        ; {#REGd-=#N$05.
 $643C SUB $05       ;
 $643E LD D,A        ; }
 $643F RET           ; Return.

; Initialise Game Objects
;
; Used by the routine at #R$6500.
@label=InitialiseGameObjects
c$6440 LD A,$0A      ; Set the number of game objects to process (#N$0A).
 $6442 NOP           ; No operation.
 $6443 LD C,A        ; Set a counter in #REGc of the number of game objects.
 $6444 INC B         ; Increment #REGb by one.
 $6445 INC C         ; Increment #REGc by one.
 $6446 LD HL,$A01E   ; #REGhl=#R$9E00(#N$A01E).
*$6449 PUSH HL       ; Stash #REGhl on the stack.
 $644A LD DE,$B400   ; #REGde=#R$B400.
 $644D DEC (HL)      ; Decrease *#REGhl by one.
 $644E JR Z,$6458    ; Jump to #R$6458 if *#REGhl is zero.
 $6450 LD E,$24      ; #REGe=#N$24.
 $6452 INC H         ; Increment #REGh by one.
 $6453 DEC (HL)      ; Decrease *#REGhl by one.
 $6454 JR Z,$6458    ; Jump to #R$6458 if *#REGhl is zero.
 $6456 LD E,$48      ; #REGe=#N$48.
*$6458 POP HL        ; Restore #REGhl from the stack.
 $6459 PUSH HL       ; Stash #REGhl on the stack.
 $645A INC L         ; {Increment #REGl by two.
 $645B INC L         ; }
 $645C JR NZ,$6462   ; Jump to #R$6462 if #REGl is not zero.
 $645E LD A,H        ; {#REGh+=#N$05.
 $645F ADD A,$05     ;
 $6461 LD H,A        ; }
*$6462 INC L         ; Increment #REGl by one.
 $6463 LD A,(HL)     ; #REGa=*#REGhl.
 $6464 DEC A         ; Decrease #REGa by one.
 $6465 JR Z,$6470    ; Jump to #R$6470 if #REGa is zero.
 $6467 INC H         ; Increment #REGh by one.
 $6468 LD A,(HL)     ; #REGa=*#REGhl.
 $6469 DEC A         ; Decrease #REGa by one.
 $646A LD A,$0C      ; #REGa=#N$0C.
 $646C JR Z,$6470    ; Jump to #R$6470 if #REGa was zero on line #R$6469.
 $646E LD A,$18      ; {#REGe+=#N$18.
*$6470 ADD A,E       ;
 $6471 LD E,A        ; }
 $6472 POP HL        ; Restore #REGhl from the stack.
 $6473 DEC H         ; Decrease #REGh by one.
 $6474 LD B,$04      ; #REGb=#N$04.
*$6476 LD A,(DE)     ; #REGa=*#REGde.
 $6477 LD (HL),A     ; Write #REGa to *#REGhl.
 $6478 INC H         ; Increment #REGh by one.
 $6479 INC E         ; Increment #REGe by one.
 $647A DJNZ $6476    ; Decrease counter by one and loop back to #R$6476 until
                     ; counter is zero.
 $647C DEC H         ; {Decrease #REGh by four.
 $647D DEC H         ;
 $647E DEC H         ;
 $647F DEC H         ; }
 $6480 INC L         ; Increment #REGl by one.
 $6481 LD B,$04      ; #REGb=#N$04.
*$6483 LD A,(DE)     ; #REGa=*#REGde.
 $6484 LD (HL),A     ; Write #REGa to *#REGhl.
 $6485 INC H         ; Increment #REGh by one.
 $6486 INC E         ; Increment #REGe by one.
 $6487 DJNZ $6483    ; Decrease counter by one and loop back to #R$6483 until
                     ; counter is zero.
 $6489 INC H         ; Increment #REGh by one.
 $648A INC L         ; Increment #REGl by one.
 $648B JR Z,$6491    ; Jump to #R$6491 if #REGl is zero.
 $648D LD A,H        ; {#REGh-=#N$05.
 $648E SUB $05       ;
 $6490 LD H,A        ; }
*$6491 LD B,$04      ; #REGb=#N$04.
*$6493 LD A,(DE)     ; #REGa=*#REGde.
 $6494 LD (HL),A     ; Write #REGa to *#REGhl.
 $6495 INC H         ; Increment #REGh by one.
 $6496 INC E         ; Increment #REGe by one.
 $6497 DJNZ $6493    ; Decrease counter by one and loop back to #R$6493 until
                     ; counter is zero.
 $6499 DEC H         ; {Decrease #REGh by three.
 $649A DEC H         ;
 $649B DEC H         ; }
 $649C LD A,L        ; {#REGl+=#N$1E.
 $649D ADD A,$1E     ;
 $649F LD L,A        ; }
 $64A0 DEC C         ; Decrease #REGc by one.
 $64A1 JR NZ,$6449   ; Jump to #R$6449 until #REGc is zero.
 $64A3 RET           ; Return.

; Unused
u$64A4 DEFB $00,$00,$00,$00,$00,$00

; Level Object Placement And Special Terrain Generation
;
; Used by the routine at #R$6500.
;
; .
;
; Search the level buffer for special terrain markers (#N$32) and replace
; with objects/ terrain.
@label=ObjectPlacement_SpecialTerrain
c$64AA LD HL,$9E00   ; Load #REGhl with #R$9E00.
 $64AD LD BC,$0A00   ; Set the length of the level buffer in #REGbc (#N$0A00
                     ; bytes).
@label=ObjectPlacement_SpecialTerrain_Loop
*$64B0 LD A,$32      ; {Search for the next #N$32 marker in the level buffer.
 $64B2 CPIR          ; }
 $64B4 LD A,B        ; {Return if no more markers were found.
 $64B5 OR C          ;
 $64B6 RET Z         ; }
; A marker was found.
 $64B7 PUSH HL       ; {Stash the level buffer position and buffer counter on
 $64B8 PUSH BC       ; the stack.}
 $64B9 XOR A         ; Clear #REGa.
 $64BA NOP           ; {No operation.
 $64BB NOP           ; }
 $64BC LD B,$04      ; Set a counter in #REGb for #N$04 bytes to process.
 $64BE LD E,A        ; #REGe=#REGa.
 $64BF DEC L         ; Decrease #REGl by one.
; Determine what to place based on a random number.
 $64C0 CALL $6400    ; Call #R$6400.
 $64C3 AND %00000111 ; #REGa=random number between #N$00 and #N$07.
 $64C5 CP E          ; {Jump to #R$64F4 if #REGa is lower than #REGe.
 $64C6 JR C,$64F4    ; }
; Generate terrain/ object from the data table.
; .
; This part of the routine takes a random number between #N$00-#N$07 and
; uses it to fetch terrain data:
; .
; #TABLE(default,centre,centre,centre)
; { =h Random Number | =h Calculation | =h Address }
; #FOR$00,$07,$01,$04(x,{ #Nx | #N((x*$06)+$6C) | #R(((x*$06)+$6C)+$B4*$100) })
; TABLE#
 $64C8 CALL $7088    ; Call #R$7088.
 $64CB AND %00000111 ; Ensure the random number is between #N$00-#N$07.
; Calculate the low-byte of the object data table address.
 $64CD ADD A,A       ; {#REGe=(#REGa*#N$06)+#N$6C.
 $64CE LD E,A        ;
 $64CF ADD A,A       ;
 $64D0 ADD A,E       ;
 $64D1 ADD A,$6C     ;
 $64D3 LD E,A        ; }
 $64D4 LD D,$B4      ; Set the high-byte in #REGd to #N$B4.
; Copy a byte of the #N$04 bytes of object data into the level buffer.
@label=PlaceObjectData
*$64D6 LD A,(DE)     ; Fetch an object data byte.
 $64D7 LD (HL),A     ; Write the object data byte into the level buffer.
 $64D8 INC E         ; Move to the next object data byte.
 $64D9 INC L         ; Move to the next position in the level buffer.
 $64DA DJNZ $64D6    ; Decrease the byte counter by one and loop back to #R$64D6 until all
                     ; the object data bytes have been written into the level buffer.
; Check if the object has a vertical component.
 $64DC LD A,(DE)     ; {Jump to #R$64F9 if the current data byte is zero (no vertical
 $64DD AND A         ; component).
 $64DE JR Z,$64F9    ; }
; Place the vertical component of the object.
 $64E0 DEC L         ; {Decrease #REGl by three.
 $64E1 DEC L         ;
 $64E2 DEC L         ; }
 $64E3 INC H         ; Increment #REGh by one.
 $64E4 LD B,$02      ; #REGb=#N$02.
@label=PlaceVerticalComponent
*$64E6 LD A,(HL)     ; #REGa=*#REGhl.
 $64E7 AND A         ; Set flags.
 $64E8 LD A,(DE)     ; #REGa=*#REGde.
 $64E9 JR Z,$64ED    ; Jump to #R$64ED if *#REGhl is zero.
 $64EB INC A         ; {Increment #REGa by two.
 $64EC INC A         ; }
@label=PlaceVerticalByte
*$64ED LD (HL),A     ; Write #REGa to *#REGhl.
 $64EE INC L         ; Increment #REGl by one.
 $64EF INC E         ; Increment #REGe by one.
 $64F0 DJNZ $64E6    ; Decrease counter by one and loop back to #R$64E6 until
                     ; counter is zero.
 $64F2 JR $64F9      ; Jump to #R$64F9.
; Place a simple terrain block (block type: #N$01).
@label=PlaceSimpleTerrain_Loop
*$64F4 LD (HL),$01   ; Write block type #N$01 to the level buffer pointer.
 $64F6 INC L         ; Move to the next buffer position.
 $64F7 DJNZ $64F4    ; Decrease the byte counter by one and loop back to #R$64F4 until all
                     ; bytes have been written into the buffer.
; Continue searching for the next terrain markers.
@label=ObjectPlacement_SpecialTerrain_Next
*$64F9 POP BC        ; {Restore the buffer counter and level buffer position
 $64FA POP HL        ; from the stack.}
 $64FB JR $64B0      ; Jump to #R$64B0.

; Unused
u$64FD DEFB $00,$00,$00

; Initialise Level
;
; Used by the routine at #R$6CAA.
;
; .
;
; #PUSHS #UDGTABLE {
; #SIM(start=$6CAA,stop=$6562)#SCR$02(level-1)
; } UDGTABLE# #POPS
@label=InitialiseLevel
c$6500 LD DE,$9E00   ; #REGde=#R$9E00.
 $6503 LD HL,$8960   ; #REGhl=#R$8960.
 $6506 CALL $6424    ; Call #R$6424.
 $6509 LD HL,$A101   ; #REGhl=#N$A101.
 $650C LD B,$0A      ; #REGb=#N$0A.
*$650E LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6510 DEC H         ; Decrease #REGh by one.
 $6511 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6513 INC H         ; Increment #REGh by one.
 $6514 INC L         ; Increment #REGl by one.
 $6515 DJNZ $650E    ; Decrease counter by one and loop back to #R$650E until
                     ; counter is zero.
 $6517 LD (HL),$23   ; Write #N$23 to *#REGhl.
 $6519 EXX           ; Switch to the shadow registers.
 $651A LD A,$0A      ; #REGa=#N$0A.
 $651C NOP           ; No operation.
 $651D LD B,A        ; #REGb=#REGa.
*$651E EXX           ; Switch to the shadow registers.
 $651F CALL $6400    ; Call #R$6400.
 $6522 AND %00011111 ; Keep only bits 0-4.
 $6524 LD B,A        ; #REGb=#REGa.
 $6525 ADD A,A       ; #REGa+=#REGa.
 $6526 ADD A,A       ; #REGa+=#REGa.
 $6527 ADD A,B       ; #REGa+=#REGb.
 $6528 RRCA          ; {RRCA.
 $6529 RRCA          ;
 $652A RRCA          ; }
 $652B LD L,A        ; #REGl=#REGa.
 $652C AND %00011111 ; Keep only bits 0-4.
 $652E ADD A,$8A     ; #REGa+=#N$8A.
 $6530 LD H,A        ; #REGh=#REGa.
 $6531 LD A,L        ; #REGa=#REGl.
 $6532 AND %11100000 ; Keep only bits 5-7.
 $6534 LD L,A        ; #REGl=#REGa.
 $6535 CALL $6424    ; Call #R$6424.
 $6538 EXX           ; Switch to the shadow registers.
 $6539 DJNZ $651E    ; Decrease counter by one and loop back to #R$651E until
                     ; counter is zero.
 $653B EXX           ; Switch to the shadow registers.
 $653C LD HL,$8960   ; #REGhl=#R$8960.
 $653F CALL $6424    ; Call #R$6424.
 $6542 LD A,E        ; #REGa=#REGe.
 $6543 LD HL,$02F4   ; #REGhl=#N$02F4.
 $6546 AND A         ; {Jump to #R$654B if #REGa is not zero.
 $6547 JR NZ,$654B   ; }
 $6549 LD H,$FE      ; #REGh=#N$FE.
*$654B ADD HL,DE     ; #REGhl+=#REGde.
 $654C LD (HL),$22   ; Write #N$22 to *#REGhl.
 $654E LD B,$0A      ; #REGb=#N$0A.
*$6550 INC L         ; Increment #REGl by one.
 $6551 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6553 DEC H         ; Decrease #REGh by one.
 $6554 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6556 INC H         ; Increment #REGh by one.
 $6557 DJNZ $6550    ; Decrease counter by one and loop back to #R$6550 until
                     ; counter is zero.
 $6559 CALL $6440    ; Call #R$6440.
 $655C CALL $64AA    ; Call #R$64AA.
 $655F CALL $7200    ; Call #R$7200.
 $6562 RET           ; Return.

; Unused
u$6563 DEFB $00

; Prepare Scroll Data
;
; Used by the routines at #R$659C and #R$6650.
;
; A Scroll phase
@label=PrepareScrollData
c$6564 ADD A,A       ; {#REGc=#REGa*#N$04.
 $6565 ADD A,A       ;
 $6566 LD C,A        ; }
 $6567 EXX           ; Switch to the shadow registers.
 $6568 LD BC,$05FF   ; Set a counter in #REGb of #N$05 (the #N$FF in #REGc
                     ; isn't used).
 $656B LD DE,$7800   ; #REGde=#R$7800.
@label=PrepareScrollData_Loop
*$656E EXX           ; Switch back to the normal registers.
 $656F LD A,(DE)     ; Read the index byte.
 $6570 INC D         ; Move to the next byte.
 $6571 RRCA          ; {Rotate the index byte right three times to extract the address
 $6572 RRCA          ; components.
 $6573 RRCA          ; }
 $6574 LD L,A        ; Copy the result to #REGl.
 $6575 AND %00011111 ; Keep only bits 0-4.
 $6577 ADD A,$80     ; {Add #N$80 to form the high byte of the graphics address
 $6579 LD H,A        ; in #REGhl.}
 $657A LD A,L        ; Restore the rotated value.
 $657B AND %11100000 ; Keep only bits 5-7.
 $657D ADD A,C       ; Add the scroll offset from #REGc.
 $657E LD L,A        ; Complete the graphics address in #REGhl.
 $657F PUSH HL       ; Stash the graphics address on the stack.
 $6580 EXX           ; Switch to the shadow registers.
 $6581 POP HL        ; Restore the graphics address from the stack.
 $6582 LDI           ; {Copy #N$04 bytes from the graphics line to the
 $6584 LDI           ; destination.
 $6586 LDI           ;
 $6588 LDI           ; }
 $658A DJNZ $656E    ; Decrease the row counter by one and loop back to #R$656E until all
                     ; the rows have been copied.
 $658C LD A,(DE)     ; #REGa=*#REGde.
 $658D INC A         ; Increment #REGa by one.
 $658E LD (DE),A     ; Write #REGa to *#REGde.
 $658F INC E         ; Increment #REGe by one.
 $6590 LD A,(DE)     ; #REGa=*#REGde.
 $6591 EXX           ; Switch to the shadow registers.
 $6592 ADD A,B       ; #REGa+=#REGb.
 $6593 EXX           ; Switch to the shadow registers.
 $6594 LD (DE),A     ; Write #REGa to *#REGde.
 $6595 LD E,$02      ; #REGe=#N$02.
 $6597 LD B,$10      ; #REGb=#N$10.
 $6599 EXX           ; Switch to the shadow registers.
 $659A RET           ; Return.

; Unused
u$659B DEFB $00

; Scroll Playarea Left
;
; #HTML(Scrolls the play area horizontally by shifting pixel data left
; using <code>RLD</code> instructions.)
@label=ScrollPlayarea_Left
c$659C LD HL,($7817) ; #REGhl=*#R$7817.
 $659F LD D,H        ; {Copy the screen position pointer into #REGde.
 $65A0 LD E,L        ; }
 $65A1 LD A,($7819)  ; #REGa=*#R$7819.
 $65A4 LD C,A        ; Copy the scroll phase counter into #REGc.
 $65A5 INC A         ; Increment the scroll phase counter by one.
 $65A6 AND %00000111 ; Ensure the counter is limited to being a number between
                     ; #N$00-#N$07.
 $65A8 LD ($7819),A  ; Write the scroll phase counter back to *#R$7819.
 $65AB JR NZ,$65B7   ; Jump to #R$65B7 if #REGa is not zero.
 $65AD INC L         ; Increment #REGl by one.
 $65AE JR NZ,$65B4   ; Jump to #R$65B4 if #REGl is not zero.
 $65B0 LD A,H        ; {#REGh+=#N$05.
 $65B1 ADD A,$05     ;
 $65B3 LD H,A        ; }
@label=ScrollPlayarea_StorePointer
*$65B4 LD ($7817),HL ; Write #REGhl to *#R$7817.
; Set up the column data pointer for new graphics data.
@label=ScrollPlayarea_UpdateColumnPointer
*$65B7 LD A,E        ; {#REGe+=#N$08.
 $65B8 ADD A,$08     ;
 $65BA LD E,A        ; }
 $65BB JR NC,$65C1   ; Jump to #R$65C1 if {} is higher.
 $65BD LD A,D        ; {#REGd+=#N$05.
 $65BE ADD A,$05     ;
 $65C0 LD D,A        ; }
@label=ScrollPlayarea_SetupScroll
*$65C1 LD A,C        ; Load the original scroll phase counter value into #REGa.
 $65C2 LD B,$01      ; Set a counter in #REGb for #N$01 column to process.
 $65C4 CALL $6564    ; Call #R$6564.
; Start of screen buffer.
 $65C7 LD HL,$401F   ; #REGhl=#N$401F (screen buffer location).
 $65CA LD D,H        ; {Copy the screen position pointer into #REGde.
 $65CB LD E,L        ; }
 $65CC EXX           ; Switch to the shadow registers.
@label=ScrollPlayarea_ProcessRows
*$65CD LD A,(DE)     ; #REGa=*#REGde.
 $65CE INC E         ; Increment #REGe by one.
 $65CF LD L,A        ; #REGl=#REGa.
 $65D0 LD H,$1F      ; #REGh=#N$1F.
 $65D2 ADD HL,HL     ; {Multiply #REGhl by #N$04.
 $65D3 ADD HL,HL     ; }
 $65D4 EXX           ; Switch to the shadow registers.
; #HTML(Scroll one character row (#N$20 characters) left by #N$01 pixel
; using <code>RLD</code>.)
 $65D5 LD B,$04      ; #REGb=#N$04.
@label=ScrollCharacterRow_Left
*$65D7 EXX           ; Switch to the shadow registers.
 $65D8 LD A,(HL)     ; #REGa=*#REGhl.
 $65D9 INC L         ; Increment #REGl by one.
 $65DA EXX           ; Switch to the shadow registers.
 $65DB RLD           ; RLD.
 $65DD DEC L         ; Decrease #REGl by one.
 $65DE RLD           ; RLD.
 $65E0 DEC L         ; Decrease #REGl by one.
 $65E1 RLD           ; RLD.
 $65E3 DEC L         ; Decrease #REGl by one.
 $65E4 RLD           ; RLD.
 $65E6 DEC L         ; Decrease #REGl by one.
 $65E7 RLD           ; RLD.
 $65E9 DEC L         ; Decrease #REGl by one.
 $65EA RLD           ; RLD.
 $65EC DEC L         ; Decrease #REGl by one.
 $65ED RLD           ; RLD.
 $65EF DEC L         ; Decrease #REGl by one.
 $65F0 RLD           ; RLD.
 $65F2 DEC L         ; Decrease #REGl by one.
 $65F3 RLD           ; RLD.
 $65F5 DEC L         ; Decrease #REGl by one.
 $65F6 RLD           ; RLD.
 $65F8 DEC L         ; Decrease #REGl by one.
 $65F9 RLD           ; RLD.
 $65FB DEC L         ; Decrease #REGl by one.
 $65FC RLD           ; RLD.
 $65FE DEC L         ; Decrease #REGl by one.
 $65FF RLD           ; RLD.
 $6601 DEC L         ; Decrease #REGl by one.
 $6602 RLD           ; RLD.
 $6604 DEC L         ; Decrease #REGl by one.
 $6605 RLD           ; RLD.
 $6607 DEC L         ; Decrease #REGl by one.
 $6608 RLD           ; RLD.
 $660A DEC L         ; Decrease #REGl by one.
 $660B RLD           ; RLD.
 $660D DEC L         ; Decrease #REGl by one.
 $660E RLD           ; RLD.
 $6610 DEC L         ; Decrease #REGl by one.
 $6611 RLD           ; RLD.
 $6613 DEC L         ; Decrease #REGl by one.
 $6614 RLD           ; RLD.
 $6616 DEC L         ; Decrease #REGl by one.
 $6617 RLD           ; RLD.
 $6619 DEC L         ; Decrease #REGl by one.
 $661A RLD           ; RLD.
 $661C DEC L         ; Decrease #REGl by one.
 $661D RLD           ; RLD.
 $661F DEC L         ; Decrease #REGl by one.
 $6620 RLD           ; RLD.
 $6622 DEC L         ; Decrease #REGl by one.
 $6623 RLD           ; RLD.
 $6625 DEC L         ; Decrease #REGl by one.
 $6626 RLD           ; RLD.
 $6628 DEC L         ; Decrease #REGl by one.
 $6629 RLD           ; RLD.
 $662B DEC L         ; Decrease #REGl by one.
 $662C RLD           ; RLD.
 $662E DEC L         ; Decrease #REGl by one.
 $662F RLD           ; RLD.
 $6631 DEC L         ; Decrease #REGl by one.
 $6632 RLD           ; RLD.
 $6634 DEC L         ; Decrease #REGl by one.
 $6635 RLD           ; RLD.
 $6637 DEC L         ; Decrease #REGl by one.
 $6638 RLD           ; RLD.
 $663A LD L,E        ; #REGl=#REGe.
 $663B INC H         ; {Increment #REGh by two.
 $663C INC H         ; }
 $663D DJNZ $65D7    ; Decrease counter by one and loop back to #R$65D7 until
                     ; counter is zero.
 $663F LD A,$20      ; {Move down one character row.
 $6641 ADD A,E       ;
 $6642 LD E,A        ; }
 $6643 LD L,A        ; Update the screen pointer.
 $6644 JR NC,$6648   ; Jump to #R$6648 if {} is higher.
 $6646 LD D,$48      ; #REGd=#N$48.
@label=ScrollPlayarea_NextRow
*$6648 LD H,D        ; Update the screen pointer.
 $6649 EXX           ; Switch to the shadow registers.
 $664A DJNZ $65CD    ; Decrease counter by one and loop back to #R$65CD until
                     ; counter is zero.
 $664C EXX           ; Switch back to the normal registers.
 $664D RET           ; Return.

; Unused
u$664E DEFB $00,$00

; Scroll Playarea Right
;
; #HTML(Scrolls the play area horizontally by shifting pixel data right
; using <code>RRD</code> instructions.)
@label=ScrollPlayarea_Right
c$6650 LD HL,($7817) ; #REGhl=*#R$7817.
 $6653 LD A,($7819)  ; {Jump to #R$6667 if *#R$7819 is not zero.
 $6656 AND A         ;
 $6657 JR NZ,$6667   ; }
 $6659 LD A,L        ; {Jump to #R$6661 if #REGl is not zero.
 $665A AND A         ;
 $665B JR NZ,$6661   ; }
 $665D LD A,H        ; {#REGh-=#N$05.
 $665E SUB $05       ;
 $6660 LD H,A        ; }
*$6661 DEC L         ; Decrease #REGl by one.
 $6662 LD ($7817),HL ; Write #REGhl to *#R$7817.
 $6665 LD A,$08      ; #REGa=#N$08.
*$6667 DEC A         ; Decrease #REGa by one.
 $6668 LD ($7819),A  ; Write #REGa to *#R$7819.
 $666B LD D,H        ; #REGd=#REGh.
 $666C LD E,L        ; #REGe=#REGl.
 $666D LD B,$FF      ; #REGb=#N$FF.
 $666F CALL $6564    ; Call #R$6564.
; Start of screen buffer.
 $6672 LD HL,$4000   ; #REGhl=#R$4000(#N$4000) (screen buffer).
 $6675 LD D,H        ; {Copy the screen position pointer into #REGde.
 $6676 LD E,L        ; }
 $6677 EXX           ; Switch to the shadow registers.
*$6678 LD A,(DE)     ; #REGa=*#REGde.
 $6679 INC E         ; Increment #REGe by one.
 $667A LD L,A        ; #REGl=#REGa.
 $667B LD H,$1F      ; #REGh=#N$1F.
 $667D ADD HL,HL     ; {Multiply #REGhl by #N$04.
 $667E ADD HL,HL     ; }
 $667F EXX           ; Switch to the shadow registers.
; #HTML(Scroll one character row (#N$20 characters) left by #N$01 pixel
; using <code>RRD</code>.)
 $6680 LD B,$04      ; Set a counter in #REGb for #N$04 rows.
@label=ScrollCharacterRow_Right
*$6682 EXX           ; Switch to the shadow registers.
 $6683 LD A,(HL)     ; #REGa=*#REGhl.
 $6684 INC L         ; Increment #REGl by one.
 $6685 EXX           ; Switch to the shadow registers.
 $6686 RRD           ; RRD.
 $6688 INC L         ; Increment #REGl by one.
 $6689 RRD           ; RRD.
 $668B INC L         ; Increment #REGl by one.
 $668C RRD           ; RRD.
 $668E INC L         ; Increment #REGl by one.
 $668F RRD           ; RRD.
 $6691 INC L         ; Increment #REGl by one.
 $6692 RRD           ; RRD.
 $6694 INC L         ; Increment #REGl by one.
 $6695 RRD           ; RRD.
 $6697 INC L         ; Increment #REGl by one.
 $6698 RRD           ; RRD.
 $669A INC L         ; Increment #REGl by one.
 $669B RRD           ; RRD.
 $669D INC L         ; Increment #REGl by one.
 $669E RRD           ; RRD.
 $66A0 INC L         ; Increment #REGl by one.
 $66A1 RRD           ; RRD.
 $66A3 INC L         ; Increment #REGl by one.
 $66A4 RRD           ; RRD.
 $66A6 INC L         ; Increment #REGl by one.
 $66A7 RRD           ; RRD.
 $66A9 INC L         ; Increment #REGl by one.
 $66AA RRD           ; RRD.
 $66AC INC L         ; Increment #REGl by one.
 $66AD RRD           ; RRD.
 $66AF INC L         ; Increment #REGl by one.
 $66B0 RRD           ; RRD.
 $66B2 INC L         ; Increment #REGl by one.
 $66B3 RRD           ; RRD.
 $66B5 INC L         ; Increment #REGl by one.
 $66B6 RRD           ; RRD.
 $66B8 INC L         ; Increment #REGl by one.
 $66B9 RRD           ; RRD.
 $66BB INC L         ; Increment #REGl by one.
 $66BC RRD           ; RRD.
 $66BE INC L         ; Increment #REGl by one.
 $66BF RRD           ; RRD.
 $66C1 INC L         ; Increment #REGl by one.
 $66C2 RRD           ; RRD.
 $66C4 INC L         ; Increment #REGl by one.
 $66C5 RRD           ; RRD.
 $66C7 INC L         ; Increment #REGl by one.
 $66C8 RRD           ; RRD.
 $66CA INC L         ; Increment #REGl by one.
 $66CB RRD           ; RRD.
 $66CD INC L         ; Increment #REGl by one.
 $66CE RRD           ; RRD.
 $66D0 INC L         ; Increment #REGl by one.
 $66D1 RRD           ; RRD.
 $66D3 INC L         ; Increment #REGl by one.
 $66D4 RRD           ; RRD.
 $66D6 INC L         ; Increment #REGl by one.
 $66D7 RRD           ; RRD.
 $66D9 INC L         ; Increment #REGl by one.
 $66DA RRD           ; RRD.
 $66DC INC L         ; Increment #REGl by one.
 $66DD RRD           ; RRD.
 $66DF INC L         ; Increment #REGl by one.
 $66E0 RRD           ; RRD.
 $66E2 INC L         ; Increment #REGl by one.
 $66E3 RRD           ; RRD.
 $66E5 LD L,E        ; #REGl=#REGe.
 $66E6 INC H         ; {Increment #REGh by two.
 $66E7 INC H         ; }
 $66E8 DJNZ $6682    ; Decrease counter by one and loop back to #R$6682 until
                     ; counter is zero.
 $66EA LD A,$20      ; {#REGe+=#N$20.
 $66EC ADD A,E       ;
 $66ED LD E,A        ; }
 $66EE LD L,A        ; #REGl=#REGa.
 $66EF JR NC,$66F3   ; Jump to #R$66F3 if {} is higher.
 $66F1 LD D,$48      ; #REGd=#N$48.
@label=ContinueScreenScroll_Right
*$66F3 LD H,D        ; Update the screen pointer.
 $66F4 EXX           ; Switch to the shadow registers.
 $66F5 DJNZ $6678    ; Decrease counter by one and loop back to #R$6678 until
                     ; counter is zero.
 $66F7 EXX           ; Switch back to the normal registers.
 $66F8 RET           ; Return.

; Unused
u$66F9 DEFB $00,$00,$00,$00,$00,$00,$00

; Routine at 6700
;
; Used by the routines at #R$672E and #R$678C.
c$6700 LD DE,$7802   ; #REGde=#R$7802.
 $6703 LD B,$10      ; #REGb=#N$10.
*$6705 LD A,(DE)     ; #REGa=*#REGde.
 $6706 INC E         ; Increment #REGe by one.
 $6707 LD C,$04      ; #REGc=#N$04.
 $6709 CP $0F        ; {Jump to #R$6722 if #REGa is lower than #N$0F.
 $670B JR C,$6722    ; }
 $670D CP $90        ; {Jump to #R$6722 if #REGa is higher than #N$90.
 $670F JR NC,$6722   ; }
 $6711 INC C         ; Increment #REGc by one.
 $6712 CP $3D        ; {Jump to #R$6722 if #REGa is lower than #N$3D.
 $6714 JR C,$6722    ; }
 $6716 INC C         ; Increment #REGc by one.
 $6717 CP $51        ; {Jump to #R$6722 if #REGa is lower than #N$51.
 $6719 JR C,$6722    ; }
 $671B LD C,$02      ; #REGc=#N$02.
 $671D CP $6F        ; {Jump to #R$6722 if #REGa is lower than #N$6F.
 $671F JR C,$6722    ; }
 $6721 INC C         ; Increment #REGc by one.
*$6722 LD (HL),C     ; Write #REGc to *#REGhl.
 $6723 LD A,$20      ; #REGa=#N$20.
 $6725 ADD A,L       ; #REGa+=#REGl.
 $6726 LD L,A        ; #REGl=#REGa.
 $6727 ADC A,H       ; #REGa+=#REGh.
 $6728 SUB L         ; #REGa-=#REGl.
 $6729 LD H,A        ; #REGh=#REGa.
 $672A DJNZ $6705    ; Decrease counter by one and loop back to #R$6705 until
                     ; counter is zero.
 $672C RET           ; Return.

; Unused
u$672D DEFB $00

; Routine at 672E
;
; Used by the routine at #R$67E9.
c$672E LD HL,$5801   ; #REGhl=#N$5801 (attribute buffer location).
 $6731 LD DE,$5800   ; #REGde=#R$5800(#N$5800) (attribute buffer location).
 $6734 LD B,$10      ; #REGb=#N$10.
*$6736 LD C,$FF      ; #REGc=#N$FF.
 $6738 LDI           ; {LDI.
 $673A LDI           ;
 $673C LDI           ;
 $673E LDI           ;
 $6740 LDI           ;
 $6742 LDI           ;
 $6744 LDI           ;
 $6746 LDI           ;
 $6748 LDI           ;
 $674A LDI           ;
 $674C LDI           ;
 $674E LDI           ;
 $6750 LDI           ;
 $6752 LDI           ;
 $6754 LDI           ;
 $6756 LDI           ;
 $6758 LDI           ;
 $675A LDI           ;
 $675C LDI           ;
 $675E LDI           ;
 $6760 LDI           ;
 $6762 LDI           ;
 $6764 LDI           ;
 $6766 LDI           ;
 $6768 LDI           ;
 $676A LDI           ;
 $676C LDI           ;
 $676E LDI           ;
 $6770 LDI           ;
 $6772 LDI           ;
 $6774 LDI           ; }
 $6776 INC HL        ; Increment #REGhl by one.
 $6777 INC DE        ; Increment #REGde by one.
 $6778 DJNZ $6736    ; Decrease counter by one and loop back to #R$6736 until
                     ; counter is zero.
 $677A LD HL,$581F   ; #REGhl=#N$581F (attribute buffer location).
 $677D JP $6700      ; Jump to #R$6700.

; Unused
u$6780 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6788 DEFB $00,$00,$00,$00

; Routine at 678C
;
; Used by the routine at #R$67E9.
c$678C LD HL,$59FE   ; #REGhl=#N$59FE (attribute buffer location).
 $678F LD DE,$59FF   ; #REGde=#N$59FF (attribute buffer location).
 $6792 LD B,$10      ; #REGb=#N$10.
*$6794 LD C,$FF      ; #REGc=#N$FF.
 $6796 LDD           ; {LDD.
 $6798 LDD           ;
 $679A LDD           ;
 $679C LDD           ;
 $679E LDD           ;
 $67A0 LDD           ;
 $67A2 LDD           ;
 $67A4 LDD           ;
 $67A6 LDD           ;
 $67A8 LDD           ;
 $67AA LDD           ;
 $67AC LDD           ;
 $67AE LDD           ;
 $67B0 LDD           ;
 $67B2 LDD           ;
 $67B4 LDD           ;
 $67B6 LDD           ;
 $67B8 LDD           ;
 $67BA LDD           ;
 $67BC LDD           ;
 $67BE LDD           ;
 $67C0 LDD           ;
 $67C2 LDD           ;
 $67C4 LDD           ;
 $67C6 LDD           ;
 $67C8 LDD           ;
 $67CA LDD           ;
 $67CC LDD           ;
 $67CE LDD           ;
 $67D0 LDD           ;
 $67D2 LDD           ; }
 $67D4 DEC HL        ; Decrease #REGhl by one.
 $67D5 DEC DE        ; Decrease #REGde by one.
 $67D6 DJNZ $6794    ; Decrease counter by one and loop back to #R$6794 until
                     ; counter is zero.
 $67D8 LD HL,$5800   ; #REGhl=#R$5800(#N$5800) (attribute buffer location).
 $67DB JP $6700      ; Jump to #R$6700.

; Unused
u$67DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E6 DEFB $00,$00,$00

; Draw Playarea
;
; Used by the routines at #R$6800, #R$6AAC, #R$6C00 and #R$6E18.
@label=DrawPlayarea
c$67E9 LD HL,$7814   ; {Return if *#R$7814 is not equal to #N$02.
 $67EC LD A,(HL)     ;
 $67ED CP $02        ;
 $67EF RET NZ        ; }
 $67F0 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $67F2 INC HL        ; Increment #REGhl by one.
 $67F3 LD A,(HL)     ; #REGa=*#REGhl.
 $67F4 AND A         ; {Return if #REGa is zero.
 $67F5 RET Z         ; }
 $67F6 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $67F8 CP $02        ; {Jump to #R$672E if #REGa is equal to #N$02.
 $67FA JP Z,$672E    ; }
 $67FD JP $678C      ; Jump to #R$678C.

; Routine at 6800
;
; Used by the routines at #R$6CAA and #R$6E18.
c$6800 LD ($7819),A  ; Write #REGa to *#R$7819.
 $6803 LD A,L        ; {#REGl-=#N$08.
 $6804 SUB $08       ;
 $6806 LD L,A        ; }
 $6807 JR NC,$680D   ; Jump to #R$680D if {} is higher.
 $6809 LD A,H        ; {#REGh-=#N$05.
 $680A SUB $05       ;
 $680C LD H,A        ; }
*$680D LD ($7817),HL ; Write #REGhl to *#R$7817.
 $6810 LD HL,$0000   ; {Write #N($0000,$04,$04) to *#R$7814.
 $6813 LD ($7814),HL ; }
 $6816 LD B,$20      ; #REGb=#N$20 (counter; screen columns).
*$6818 PUSH BC       ; Stash the screen column counter on the stack.
 $6819 CALL $659C    ; Call #R$659C.
 $681C CALL $659C    ; Call #R$659C.
 $681F CALL $67E9    ; Call #R$67E9.
 $6822 POP BC        ; Restore the screen column counter from the stack.
 $6823 DJNZ $6818    ; Decrease the screen column counter by one and loop back
                     ; to #R$6818 until counter is zero.
 $6825 RET           ; Return.

; Unused
u$6826 DEFB $00,$00

; Get Keyboard Input
;
; Used by the routines at #R$73B7, #R$757E, #R$76D7, #R$E80E, #R$EB43 and
; #R$ED52.
@label=KeyboardInput
c$6828 LD DE,$FE00   ; #REGde=#R$FE00.
 $682B LD BC,$FEFE   ; {Read from the keyboard;
*$682E IN A,(C)      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FE | SHIFT | Z | X | C | V }
                     ; TABLE#}
 $6830 CPL           ; Invert the bits in #REGa.
 $6831 AND %00011111 ; Keep only bits 0-4.
 $6833 JR Z,$6836    ; Jump to #R$6836 if {} is zero.
 $6835 SCF           ; Set the carry flag.
*$6836 RL E          ; Rotate #REGe left.
 $6838 RL D          ; Rotate #REGd left.
 $683A JR NC,$6840   ; Jump to #R$6840 if {} is higher.
 $683C RLC B         ; Rotate #REGb left (with carry).
 $683E JR $682E      ; Jump to #R$682E.
*$6840 LD A,E        ; #REGa=#REGe.
 $6841 RRCA          ; RRCA.
 $6842 JR NC,$6846   ; Jump to #R$6846 if {} is higher.
 $6844 SET 0,D       ; Set bit 0 of #REGd.
*$6846 RRCA          ; RRCA.
 $6847 JR NC,$684B   ; Jump to #R$684B if {} is higher.
 $6849 SET 2,D       ; Set bit 2 of #REGd.
*$684B RRCA          ; RRCA.
 $684C JR NC,$6850   ; Jump to #R$6850 if {} is higher.
 $684E SET 3,D       ; Set bit 3 of #REGd.
*$6850 RRCA          ; RRCA.
 $6851 JR NC,$6855   ; Jump to #R$6855 if {} is higher.
 $6853 SET 4,D       ; Set bit 4 of #REGd.
*$6855 RRCA          ; RRCA.
 $6856 JR NC,$685A   ; Jump to #R$685A if {} is higher.
 $6858 SET 4,D       ; Set bit 4 of #REGd.
*$685A RRCA          ; RRCA.
 $685B JR NC,$685F   ; Jump to #R$685F if {} is higher.
 $685D SET 3,D       ; Set bit 3 of #REGd.
*$685F RRCA          ; RRCA.
 $6860 JR NC,$6864   ; Jump to #R$6864 if {} is higher.
 $6862 SET 2,D       ; Set bit 2 of #REGd.
*$6864 RRCA          ; RRCA.
 $6865 JR NC,$6869   ; Jump to #R$6869 if {} is higher.
 $6867 SET 1,D       ; Set bit 1 of #REGd.
*$6869 LD A,D        ; #REGa=#REGd.
 $686A AND %00000011 ; Keep only bits 0-1.
 $686C CP $03        ; Compare #REGa with #N$03.
 $686E JR NZ,$6872   ; Jump to #R$6872 if {} is not zero.
 $6870 XOR D         ; Flip the bits according to #REGd.
 $6871 LD D,A        ; #REGd=#REGa.
*$6872 LD A,D        ; #REGa=#REGd.
 $6873 AND %00001100 ; Keep only bits 2-3.
 $6875 CP $0C        ; Compare #REGa with #N$0C.
 $6877 JR NZ,$687B   ; Jump to #R$687B if {} is not zero.
 $6879 XOR D         ; Flip the bits according to #REGd.
 $687A LD D,A        ; #REGd=#REGa.
*$687B LD A,D        ; #REGa=#REGd.
 $687C RET           ; Return.

; Unused
u$687D DEFB $00,$00,$00

; Display Speedometer
;
; Used by the routine at #R$6B4C.
;
; A The speed value
; DE Points to #N$5A45 (the attribute buffer location of the speedometer)
@label=DisplaySpeedometer
c$6880 BIT 7,A       ; {Jump to #R$6885 if the speed value is negative.
 $6882 JR NZ,$6885   ; }
 $6884 CPL           ; Make the position speed value into a negative.
; Strip off the signed bit.
@label=ProcessSpeedValue
*$6885 AND %01111111 ; Keep only bits 0-6.
 $6887 RRA           ; {Divide the speed value by two and store the result in #REGl (scaled
 $6888 LD L,A        ; speed value).}
 $6889 LD A,$A7      ; Set the base offset value in #REGa of #N$A7.
 $688B NOP           ; {No operation.
 $688C NOP           ;
 $688D NOP           ;
 $688E NOP           ; }
 $688F SUB L         ; {Update #REGl to #N$A7 - the scaled speed value.
 $6890 LD L,A        ; }
 $6891 LD H,$B4      ; Set #REGh to the high byte of the display data table.
; Continue on to #R$6893.

; Copy #N$0C Bytes
;
; Used by the routines at #R$6D28 and #R$763C.
;
; HL Source address
; DE Destination address
@label=CopyTwelveBytes
c$6893 LDI           ; {Copy #N$0C bytes from the source address to the destination
 $6895 LDI           ; address.
 $6897 LDI           ;
 $6899 LDI           ;
 $689B LDI           ;
 $689D LDI           ;
 $689F LDI           ;
 $68A1 LDI           ;
 $68A3 LDI           ;
 $68A5 LDI           ;
 $68A7 LDI           ;
 $68A9 LDI           ; }
 $68AB RET           ; Return.

; Unused
u$68AC DEFB $00

; Remove Sprites
;
; Used by the routines at #R$6AAC, #R$6C00, #R$6E18, #R$763C and #R$76D7.
@label=RemoveSprites
c$68AD LD A,($781B)  ; {Return if *#R$781B is zero (no sprite blocks on the
 $68B0 AND A         ; screen).
 $68B1 RET Z         ; }
; Whilst this routine is clearing sprites, the data is stored per
; character block, e.g. a kangaroo may span 3 character blocks - and data is
; stored individually for each of those three blocks, so the count is +3 for
; a kangaroo (when it is covering those three blocks).
 $68B2 LD HL,($781C) ; Load *#R$781C into #REGhl.
 $68B5 LD B,A        ; Set a counter in #REGb of the number of character blocks needed to
                     ; clear all the sprites.
 $68B6 LD C,$00      ; Set a "clear" value (#N$00) in #REGc.
@label=RemoveSingleSpriteBlock_Loop
*$68B8 DEC HL        ; {Load #REGde with the attribute buffer address of the
 $68B9 LD D,(HL)     ; sprite block.
 $68BA DEC HL        ;
 $68BB LD E,(HL)     ; }
 $68BC DEC HL        ; {Fetch the background attribute value.
 $68BD LD A,(HL)     ; }
 $68BE LD (DE),A     ; Write the background attribute value to the attribute buffer
                     ; address held in #REGde.
 $68BF DEC HL        ; Move to next buffer entry.
; Convert the attribute address to the corresponding screen buffer
; address.
 $68C0 LD A,D        ; {Taking the attribute buffer high byte, subtract #N$11.
 $68C1 SUB $11       ; }
 $68C3 OR %00000111  ; Adjust for the screen buffer memory layout.
 $68C5 LD D,A        ; Write this back into #REGd.
 $68C6 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $68C7 LD (HL),C     ; Write #REGc to *#REGhl.
 $68C8 DEC H         ; Decrease #REGh by one.
 $68C9 LD A,(DE)     ; #REGa=*#REGde.
 $68CA LD (HL),A     ; Write #REGa to *#REGhl.
 $68CB DEC DE        ; Decrease #REGde by one.
 $68CC DEC H         ; Decrease #REGh by one.
 $68CD LD (HL),C     ; Write #REGc to *#REGhl.
 $68CE DEC H         ; Decrease #REGh by one.
 $68CF LD A,(DE)     ; #REGa=*#REGde.
 $68D0 LD (HL),A     ; Write #REGa to *#REGhl.
 $68D1 DEC DE        ; Decrease #REGde by one.
 $68D2 DEC H         ; Decrease #REGh by one.
 $68D3 LD (HL),C     ; Write #REGc to *#REGhl.
 $68D4 DEC H         ; Decrease #REGh by one.
 $68D5 LD A,(DE)     ; #REGa=*#REGde.
 $68D6 LD (HL),A     ; Write #REGa to *#REGhl.
 $68D7 DEC DE        ; Decrease #REGde by one.
 $68D8 DEC H         ; Decrease #REGh by one.
 $68D9 LD (HL),C     ; Write #REGc to *#REGhl.
 $68DA DEC H         ; Decrease #REGh by one.
 $68DB LD A,(DE)     ; #REGa=*#REGde.
 $68DC LD (HL),A     ; Write #REGa to *#REGhl.
 $68DD EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $68DE DJNZ $68B8    ; Decrease the sprite block counter by one and loop back to #R$68B8
                     ; until all the sprite blocks have been reverted to backgrounds.
; All sprite blocks are now reverted!
 $68E0 LD ($781C),HL ; Update the buffer position at *#R$781C.
 $68E3 XOR A         ; {Mark that no sprite blocks are now active at *#R$781B.
 $68E4 LD ($781B),A  ; }
 $68E7 RET           ; Return.

; Unused
u$68E8 DEFB $00,$00,$00,$00

; Complete Sprite Sequence
;
; Used by the routines at #R$692C and #R$6DA8.
;
; B' Active block counter
; HL' Sprite background buffer pointer
@label=CompleteSpriteSequence
c$68EC EXX           ; Switch to the shadow registers.
 $68ED LD ($781C),HL ; Write the updated sprite background buffer pointer to
                     ; *#R$781C.
 $68F0 LD A,B        ; {Write the updated active block counter to *#R$781B.
 $68F1 LD ($781B),A  ; }
 $68F4 EXX           ; Switch back to the normal registers.
 $68F5 RET           ; Return.

; Draw Sprite
;
; Used by the routines at #R$692C and #R$6DA8.
;
; BC Sprite data pointer
; HL Screen buffer address
; HL' Sprite background buffer
@label=DrawSprite
c$68F6 LD A,(HL)     ; Read the current screen data (row #N$01).
 $68F7 EXX           ; Switch to the shadow registers.
 $68F8 LD (HL),A     ; Save row #N$01 background data to the sprite background
                     ; buffer.
 $68F9 INC HL        ; Move to the next position in the background buffer.
 $68FA EXX           ; Switch back to the normal registers.
 $68FB LD A,(BC)     ; {Write sprite pixel data to row #N$01 of the screen
 $68FC LD (HL),A     ; buffer.}
 $68FD INC BC        ; Move to the next sprite data byte.
 $68FE INC H         ; Move to row #N$02 in the screen buffer.
 $68FF LD A,(BC)     ; {Write sprite pixel data to row #N$02 of the screen
 $6900 LD (HL),A     ; buffer.}
 $6901 INC BC        ; Move to the next sprite data byte.
 $6902 INC H         ; Move to row #N$03 in the screen buffer.
 $6903 LD A,(HL)     ; Read the current screen data (row #N$03).
 $6904 EXX           ; Switch to the shadow registers.
 $6905 LD (HL),A     ; Save row #N$03 background data to the sprite background
                     ; buffer.
 $6906 INC HL        ; Move to the next position in the background buffer.
 $6907 EXX           ; Switch back to the normal registers.
 $6908 LD A,(BC)     ; {Write sprite pixel data to row #N$03 of the screen
 $6909 LD (HL),A     ; buffer.}
 $690A INC BC        ; Move to the next sprite data byte.
 $690B INC H         ; Move to row #N$04 in the screen buffer.
 $690C LD A,(BC)     ; {Write sprite pixel data to row #N$04 of the screen
 $690D LD (HL),A     ; buffer.}
 $690E INC BC        ; Move to the next sprite data byte.
 $690F RET           ; Return.

; Convert Screen Buffer Address To Attribute Buffer
;
; Used by the routines at #R$692C and #R$6DA8.
@label=ScreenBufferToAttributeBuffer
c$6910 LD A,H        ; #REGa=#REGh.
 $6911 SUB $48       ; #REGa-=#N$48.
 $6913 SBC A,A       ; #REGa-=#REGa (with carry).
 $6914 ADD A,$59     ; #REGa+=#N$59.
 $6916 LD H,A        ; #REGh=#REGa.
 $6917 LD A,(HL)     ; #REGa=*#REGhl.
 $6918 PUSH HL       ; {#REGde'=#REGhl (using the stack).
 $6919 EXX           ;
 $691A POP DE        ; }
; Continue on to #R$691B.

; Colourise Sprite
;
; Used by the routine at #R$6988.
;
; A Sprite data
; B' Sprite block counter
; C' Sprite attribute
; D' Sprite Y position
; E' Sprite X position
; HL' Background buffer store
; HL Attribute buffer pointer
@label=ColouriseSprite
c$691B INC B         ; Increment the sprite block counter in #REGb' by one.
 $691C LD (HL),A     ; Write the sprite data to the sprite background buffer.
 $691D INC HL        ; Increment the sprite background buffer by one.
 $691E LD (HL),E     ; Write the sprite X position to the sprite background
                     ; buffer.
 $691F INC HL        ; Increment the sprite background buffer by one.
 $6920 LD (HL),D     ; Write the sprite Y position to the sprite background
                     ; buffer.
 $6921 INC HL        ; Increment the sprite background buffer by one.
 $6922 CP $07        ; Check if this is a special sprite (type #N$07).
 $6924 LD A,C        ; Load the sprite attribute from #REGc'.
 $6925 EXX           ; Switch back to the normal registers.
 $6926 LD (HL),A     ; Write the sprite attribute to the attribute buffer.
 $6927 RET NZ        ; Return if this isn't a special type #N$07 sprite (from line
                     ; #R$6922).
 $6928 JP $73F2      ; Jump to #R$73F2.

; Unused
u$692B DEFB $C9      ; Return.

; Draw Sprite Object
;
; Used by the routines at #R$6B2D and #R$76D7.
;
; A Sprite frame ID
; C Sprite colour
; DE Sprite screen position
@label=DrawSpriteObject
c$692C LD B,A        ; Store the sprite frame ID in #REGb.
 $692D LD A,C        ; Load the sprite attribute value into #REGa.
 $692E EXX           ; Switch to the shadow registers.
 $692F LD HL,($781C) ; #REGhl'=*#R$781C.
 $6932 LD C,A        ; Load the sprite attribute value into #REGc'.
 $6933 LD A,($781B)  ; {Load *#R$781B into #REGb'.
 $6936 LD B,A        ; }
 $6937 EXX           ; Switch back to the normal registers.
; Calculate the sprite data address from the frame ID.
 $6938 LD A,B        ; {Load #REGl with the frame ID multiplied by #N$02.
 $6939 ADD A,A       ;
 $693A LD L,A        ; }
; This is quite clever, and very subtle. It's probably easier here to
; show examples:
; #TABLE(default,centre,centre)
;   { =h Input Value | =h Output in #REGhl }
;   #FOREACH($0D,$12,$87,$C7)(n,{ #Nn | #SIM(start=$692C,stop=$693F,a=n)#R({sim[HL]})(#N({sim[HL]})) })
; TABLE#
; From a quick glance, the following code looks pretty straight-forward, just a
; little strange: #REGh=(frame ID * #N$02) + #N$BE - (frame ID * #N$02).
; .
; #HTML(The cleverness here is with the carry flag and the <code>ADC</code>
; instruction.)
; .
; #HTML(When the multiplication of the frame ID passes #N$100, the carry flag
; is set and this is included when adding the graphics high byte #N$BE. The
; <code>SUB #REGl</code> then removes the "frame ID * #N$02" part, leaving just
; #N$BE + carry flag.)
 $693B ADC A,$BE     ; {Load #REGh with the high byte for the graphics data: #N$BE + the
 $693D SUB L         ; carry flag.
 $693E LD H,A        ; }
 $693F LD A,B        ; Load the original frame ID into #REGa.
; Fetch the sprite data.
 $6940 LD C,(HL)     ; {Fetch the sprite data address from *#REGhl and store it
 $6941 INC L         ; in #REGbc.
 $6942 LD B,(HL)     ; }
; Check the sprite "type" bit.
 $6943 BIT 5,A       ; {Jump to #R$6DA8 if bit 5 of the sprite ID is set.
 $6945 JP NZ,$6DA8   ; }
; Process regular sprite animation frames.
 $6948 LD A,(BC)     ; Fetch the sprite X offset and store it in #REGa.
@label=ProcessNextFrame
*$6949 INC BC        ; Move to the next data byte.
 $694A ADD A,E       ; {#REGe=base X position + the sprite X offset.
 $694B LD E,A        ; }
 $694C LD A,(BC)     ; Fetch the sprite Y offset and store it in #REGa.
 $694D INC BC        ; Move to the next data byte.
@label=CalculatePosition
*$694E ADD A,D       ; {#REGd=base Y position + the sprite Y offset.
 $694F LD D,A        ; }
; Check if the sprite frame is within the screen boundaries.
 $6950 CP $10        ; {Jump to #R$6959 if the sprites "Y" position is higher
 $6952 JR NC,$6959   ; than #N$10.}
 $6954 LD A,E        ; {Jump to #R$696E if the sprites "X" position is lower
 $6955 CP $20        ; than #N$20.
 $6957 JR C,$696E    ; }
; Skip the current frame and advance to the next frame data.
@label=SkipToNextFrame
*$6959 LD HL,$0008   ; {#REGbc=sprite data pointer+#N($0008,$04,$04).
 $695C ADD HL,BC     ;
 $695D LD B,H        ;
 $695E LD C,L        ; }
@label=CheckNextFrame
*$695F LD A,(BC)     ; Load #REGa with the next control byte from *#REGbc.
; Check for the terminator (#N$FF+#N$01 will set the zero flag).
 $6960 INC A         ; Increment the control byte by one.
 $6961 LD A,$01      ; Set the sprite "type" flag in #REGa to #N$01.
 $6963 JR NZ,$694E   ; Jump to #R$694E if the terminator character wasn't detected (on
                     ; line #R$6960).
; We reached the terminator.
 $6965 INC BC        ; Move to the next data byte.
; Check for the sequence end marker byte.
 $6966 LD A,(BC)     ; Read the sequence control byte.
 $6967 CP $80        ; {Jump to #R$6949 if the sequence control byte is not
 $6969 JR NZ,$6949   ; equal to #N$80.}
 $696B JP $68EC      ; Jump to #R$68EC.
; Draw the sprite frame to the screen.
@label=DrawVisibleFrame
*$696E LD A,D        ; Load the sprite Y position.
 $696F ADD A,$40     ; Convert it to a screen buffer address.
; Extract the bits which relate to the ZX Spectrum screen layout.
 $6971 AND %01001000 ; Keep only bits 3 and 6.
 $6973 LD H,A        ; Store the result in #REGh.
 $6974 LD A,D        ; Reload the sprite Y position.
 $6975 RRCA          ; {Rotate #REGa right three positions (bits 0 to 2 are now
 $6976 RRCA          ; in positions 5 to 7).
 $6977 RRCA          ; }
; Keep only the row bits.
 $6978 AND %11100000 ; Keep only bits 5-7.
 $697A ADD A,E       ; {Add the sprite X position and store the result in
 $697B LD L,A        ; #REGl.}
; Draw the sprite to the screen buffer.
 $697C CALL $68F6    ; Call #R$68F6 to draw the top of the sprite.
 $697F INC H         ; Move to the next screen row.
 $6980 CALL $68F6    ; Call #R$68F6 to draw the bottom of the sprite.
 $6983 CALL $6910    ; Call #R$6910.
 $6986 JR $695F      ; Jump to #R$695F.

; Routine at 6988
c$6988 LD ($7825),A  ; Write #REGa to *#R$7825.
 $698B EXX           ; Switch to the shadow registers.
 $698C LD (HL),A     ; Write #REGa to *#REGhl.
 $698D LD H,B        ; Load the active sprite block count into #REGh.
 $698E LD L,C        ; Load the attribute byte into #REGl.
 $698F JP $691B      ; Jump to #R$691B.

; Unused
u$6992 DEFB $00,$00,$00,$00

; Routine at 6996
;
; Used by the routine at #R$69BE.
c$6996 LD E,A        ; #REGe=#REGa.
 $6997 LD A,($7828)  ; #REGa=*#R$7828.
; This entry point is used by the routine at #R$709D.
*$699A BIT 2,A       ; {Jump to #R$69A4 if bit 2 of #REGa is not zero.
 $699C JR NZ,$69A4   ; }
 $699E INC E         ; Increment #REGe by one.
 $699F BIT 3,A       ; {Jump to #R$69A4 if bit 3 of #REGa is zero.
 $69A1 JR Z,$69A4    ; }
 $69A3 INC E         ; Increment #REGe by one.
*$69A4 LD L,(HL)     ; #REGl=*#REGhl.
 $69A5 LD H,$00      ; #REGh=#N$00.
 $69A7 LD D,$B5      ; #REGd=#N$B5.
 $69A9 ADD HL,HL     ; #REGhl+=#REGhl.
 $69AA LD B,H        ; #REGb=#REGh.
 $69AB LD C,L        ; #REGc=#REGl.
 $69AC ADD HL,HL     ; #REGhl+=#REGhl.
 $69AD ADD HL,HL     ; #REGhl+=#REGhl.
 $69AE ADD HL,HL     ; #REGhl+=#REGhl.
 $69AF ADD HL,BC     ; #REGhl+=#REGbc.
 $69B0 ADD HL,DE     ; #REGhl+=#REGde.
 $69B1 LD A,(HL)     ; #REGa=*#REGhl.
; This entry point is used by the routine at #R$6AAC.
*$69B2 ADD A,A       ; #REGa+=#REGa.
 $69B3 ADD A,A       ; #REGa+=#REGa.
 $69B4 LD L,A        ; #REGl=#REGa.
 $69B5 LD H,$BB      ; #REGh=#N$BB.
 $69B7 RET           ; Return.

; Unused
u$69B8 DEFB $00,$00

; Routine at 69BA
c$69BA ADD HL,HL     ; #REGhl+=#REGhl.
 $69BB ADD HL,BC     ; #REGhl+=#REGbc.
 $69BC RET           ; Return.

; Unused
u$69BD DEFB $00

; Routine at 69BE
c$69BE LD DE,$0002   ; #REGde=#N($0002,$04,$04).
 $69C1 ADD HL,DE     ; #REGhl+=#REGde.
 $69C2 LD A,(HL)     ; #REGa=*#REGhl.
 $69C3 RLCA          ; RLCA.
 $69C4 SBC A,A       ; #REGa-=#REGa.
 $69C5 RET C         ; Return if {} is lower.
 $69C6 BIT 6,(HL)    ; {Return if bit 6 of *#REGhl is zero.
 $69C8 RET Z         ; }
 $69C9 INC A         ; Increment #REGa by one.
 $69CA RET           ; Return.
; This entry point is used by the routines at #R$6A00 and #R$6AAC.
*$69CB CALL $69BE    ; Call #R$69BE.
 $69CE LD E,A        ; #REGe=#REGa.
 $69CF LD HL,($782E) ; #REGhl=*#R$782E.
 $69D2 ADD A,H       ; #REGa+=#REGh.
 $69D3 LD H,A        ; #REGh=#REGa.
 $69D4 ADD HL,BC     ; #REGhl+=#REGbc.
 $69D5 CP H          ; {Jump to #R$69DD if #REGa is equal to #REGh.
 $69D6 JR Z,$69DD    ; }
 $69D8 LD A,C        ; #REGa=#REGc.
 $69D9 ADD A,A       ; #REGa+=#REGa.
 $69DA ADD A,A       ; #REGa+=#REGa.
 $69DB ADD A,H       ; #REGa+=#REGh.
 $69DC LD H,A        ; #REGh=#REGa.
*$69DD LD A,B        ; #REGa=#REGb.
 $69DE AND %00000011 ; Keep only bits 0-1.
 $69E0 INC A         ; Increment #REGa by one.
 $69E1 ADD A,E       ; #REGa+=#REGe.
 $69E2 LD E,A        ; #REGe=#REGa.
 $69E3 CALL $6F62    ; Call #R$6F62.
 $69E6 ADD A,A       ; #REGa+=#REGa.
 $69E7 ADD A,E       ; #REGa+=#REGe.
 $69E8 CALL $6996    ; Call #R$6996.
 $69EB LD ($7831),HL ; Write #REGhl to *#R$7831.
 $69EE LD A,($7830)  ; #REGa=*#R$7830.
 $69F1 RET           ; Return.

; Unused
u$69F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69FA DEFB $00,$00,$00,$00,$00,$00

; Routine at 6A00
;
; Used by the routine at #R$6C00.
c$6A00 LD A,($7830)  ; #REGa=*#R$7830.
 $6A03 INC A         ; Increment #REGa by one.
 $6A04 AND %00000111 ; Keep only bits 0-2.
 $6A06 LD ($7830),A  ; Write #REGa to *#R$7830.
 $6A09 LD HL,($7831) ; #REGhl=*#R$7831.
 $6A0C LD BC,$0001   ; #REGbc=#N($0001,$04,$04).
 $6A0F CALL Z,$69CB  ; Call #R$69CB if #REGa is zero.
 $6A12 ADD A,A       ; {#REGc=#REGa*#N$02.
 $6A13 LD C,A        ; }
 $6A14 JR $6A27      ; Jump to #R$6A27.

; Unused
u$6A16 DEFB $78

; Routine at 6A17
;
; Used by the routine at #R$6AAC.
c$6A17 AND $7F       ;
 $6A19 SUB $02       ;
 $6A1B JR NC,$6A1E   ;
 $6A1D XOR A         ;
*$6A1E SRL A         ;
 $6A20 SRL A         ;
 $6A22 ADD A,L       ;
 $6A23 LD L,A        ;
 $6A24 ADC A,H       ;
 $6A25 SUB L         ;
 $6A26 LD H,A        ;

; Routine at 6A27
;
; Used by the routines at #R$6A00 and #R$6AAC.
c$6A27 LD A,(HL)     ; #REGa=*#REGhl.
 $6A28 RLCA          ; {RLCA.
 $6A29 RLCA          ;
 $6A2A RLCA          ;
 $6A2B RLCA          ; }
 $6A2C LD L,A        ; #REGl=#REGa.
 $6A2D AND %00001111 ; Keep only bits 0-3.
 $6A2F ADD A,$C0     ; {#REGh=#N$C0+#REGa.
 $6A31 LD H,A        ; }
 $6A32 LD A,L        ; #REGa=#REGl.
 $6A33 AND %11110000 ; Keep only bits 4-7.
 $6A35 ADD A,C       ; #REGa+=#REGc.
 $6A36 LD L,A        ; #REGl=#REGa.
 $6A37 LD A,(HL)     ; #REGa=*#REGhl.
 $6A38 INC L         ; Increment #REGl by one.
 $6A39 LD ($7834),A  ; Write #REGa to *#R$7834.
 $6A3C LD A,(HL)     ; #REGa=*#REGhl.
 $6A3D LD HL,$7826   ; #REGhl=#R$7826.
 $6A40 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6A42 RRCA          ; RRCA.
 $6A43 JR NC,$6A46   ; Jump to #R$6A46 if {} is higher.
 $6A45 INC (HL)      ; Increment *#REGhl by one.
*$6A46 RRCA          ; RRCA.
 $6A47 LD C,A        ; #REGc=#REGa.
 $6A48 JR NC,$6A6D   ; Jump to #R$6A6D if {} is higher.
 $6A4A AND %00000011 ; Keep only bits 0-1.
 $6A4C LD L,$33      ; #REGl=#N$33.
 $6A4E JR NZ,$6A51   ; Jump to #R$6A51 if {} is not zero.
 $6A50 DEC (HL)      ; Decrease *#REGhl by one.
*$6A51 DEC A         ; Decrease #REGa by one.
 $6A52 JR NZ,$6A55   ; Jump to #R$6A55 if #REGa is not zero.
 $6A54 INC (HL)      ; Increment *#REGhl by one.
*$6A55 LD L,$26      ; #REGl=#N$26.
 $6A57 LD B,A        ; #REGb=#REGa.
 $6A58 LD A,$23      ; #REGa=#N$23.
 $6A5A SUB (HL)      ; #REGa-=*#REGhl.
 $6A5B LD L,A        ; #REGl=#REGa.
 $6A5C LD A,(HL)     ; #REGa=*#REGhl.
 $6A5D DEC B         ; Decrease #REGb by one.
 $6A5E JR NZ,$6A65   ; Jump to #R$6A65 if #REGb is not zero.
 $6A60 CP $69        ; {Jump to #R$6A65 if #REGa is equal to #N$69.
 $6A62 JR Z,$6A65    ; }
 $6A64 DEC (HL)      ; Decrease *#REGhl by one.
*$6A65 DEC B         ; Decrease #REGb by one.
 $6A66 JR NZ,$6A6D   ; Jump to #R$6A6D if #REGb is not zero.
 $6A68 CP $96        ; {Jump to #R$6A6D if #REGa is equal to #N$96.
 $6A6A JR Z,$6A6D    ; }
 $6A6C INC (HL)      ; Increment *#REGhl by one.
*$6A6D LD L,$26      ; #REGl=#N$26.
 $6A6F LD A,(HL)     ; {Jump to #R$6A94 if *#REGhl is not zero.
 $6A70 AND A         ;
 $6A71 JR NZ,$6A94   ; }
 $6A73 LD L,$22      ; #REGl=#N$22.
 $6A75 LD A,(HL)     ; {Jump to #R$6A7B if bit 7 of *#REGhl is set.
 $6A76 BIT 7,A       ;
 $6A78 JR NZ,$6A7B   ; }
 $6A7A CPL           ; Invert the bits in #REGa.
*$6A7B LD B,A        ; #REGb=#REGa.
 $6A7C DEC L         ; Decrease #REGl by one.
 $6A7D LD A,(HL)     ; {Jump to #R$6A83 if bit 7 of *#REGhl is set.
 $6A7E BIT 7,A       ;
 $6A80 JR NZ,$6A83   ; }
 $6A82 CPL           ; #REGa=#N$00.
*$6A83 SUB B         ; #REGa-=#REGb.
 $6A84 JR NC,$6A94   ; Jump to #R$6A94 if {} is higher.
 $6A86 CPL           ; Invert the bits in #REGa.
 $6A87 SRL A         ; {Shift #REGa right twice.
 $6A89 SRL A         ; }
 $6A8B LD L,$34      ; #REGl=#N$34.
 $6A8D ADD A,(HL)    ; #REGa+=*#REGhl.
 $6A8E BIT 4,A       ; {Jump to #R$6A93 if bit 4 of #REGa is not set.
 $6A90 JR Z,$6A93    ; }
 $6A92 DEC A         ; Decrease #REGa by one.
*$6A93 LD (HL),A     ; Write #REGa to *#REGhl.
*$6A94 LD A,C        ; #REGa=#REGc.
 $6A95 RRCA          ; {RRCA.
 $6A96 RRCA          ;
 $6A97 RRCA          ; }
 $6A98 RET NC        ; Return if {} is higher.
; There are #N$07 actions. They are contained in a jump table at: #R$B4DC
; onwards.
 $6A99 AND %00000111 ; Keep only bits 0-2.
 $6A9B ADD A,A       ; {#REGl=#N$DC+(#REGa*#N$02).
 $6A9C ADD A,$DC     ;
 $6A9E LD L,A        ; }
 $6A9F LD H,$B4      ; #REGh=#N$B4.
; Fetch the related action from the jump table and jump to it.
 $6AA1 LD A,(HL)     ; #REGa=*#REGhl.
 $6AA2 INC L         ; Increment #REGl by one.
 $6AA3 LD H,(HL)     ; #REGh=*#REGhl.
 $6AA4 LD L,A        ; #REGl=#REGa.
 $6AA5 JP (HL)       ; Jump to *#REGhl.

; Unused
u$6AA6 DEFB $00,$00,$00,$00,$00,$00

; Routine at 6AAC
;
; Used by the routine at #R$6C00.
c$6AAC LD A,($7830)  ;
 $6AAF DEC A         ;
 $6AB0 AND $07       ;
 $6AB2 LD ($7830),A  ;
 $6AB5 LD BC,$FFFF   ;
 $6AB8 LD HL,($7831) ;
 $6ABB CP $07        ;
 $6ABD CALL Z,$69CB  ;
 $6AC0 ADD A,A       ;
 $6AC1 LD C,A        ;
 $6AC2 JP $6A27      ;
 $6AC5 CPL           ;
 $6AC6 JP $6A17      ;
; This entry point is used by the routine at #R$6B4C.
*$6AC9 NOP           ;
 $6ACA NOP           ;
 $6ACB NOP           ;
 $6ACC NOP           ;
 $6ACD NOP           ;
 $6ACE NOP           ;
 $6ACF CALL $68AD    ;
 $6AD2 LD B,$0A      ;
*$6AD4 PUSH BC       ;
 $6AD5 CALL $6650    ;
 $6AD8 CALL $67E9    ;
 $6ADB POP BC        ;
 $6ADC DJNZ $6AD4    ;
 $6ADE LD A,$7F      ;
*$6AE0 LD HL,$7821   ;
 $6AE3 LD (HL),A     ;
 $6AE4 INC L         ;
 $6AE5 LD (HL),A     ;
 $6AE6 INC L         ;
 $6AE7 LD (HL),A     ;
 $6AE8 INC L         ;
 $6AE9 LD (HL),$00   ;
 $6AEB LD L,$1A      ;
 $6AED LD (HL),$01   ;
 $6AEF LD HL,($7831) ;
 $6AF2 LD BC,$0002   ;
 $6AF5 ADD HL,BC     ;
 $6AF6 LD A,(HL)     ;
 $6AF7 AND $3F       ;
 $6AF9 CALL $69B2    ;
 $6AFC LD ($7831),HL ;
 $6AFF LD HL,$FFFF   ;
 $6B02 LD SP,HL      ;
 $6B03 CALL $6D49    ;
 $6B06 NOP           ;
 $6B07 NOP           ;
 $6B08 NOP           ;
 $6B09 NOP           ;
 $6B0A NOP           ;
 $6B0B NOP           ;
 $6B0C NOP           ;
 $6B0D NOP           ;
 $6B0E NOP           ;
 $6B0F NOP           ;
; This entry point is used by the routine at #R$6B4C.
*$6B10 NOP           ;
 $6B11 NOP           ;
 $6B12 NOP           ;
 $6B13 NOP           ;
 $6B14 NOP           ;
 $6B15 NOP           ;
 $6B16 CALL $68AD    ;
 $6B19 LD B,$0A      ;
*$6B1B PUSH BC       ;
 $6B1C CALL $659C    ;
 $6B1F CALL $67E9    ;
 $6B22 POP BC        ;
 $6B23 DJNZ $6B1B    ;
 $6B25 LD A,$80      ;
 $6B27 JP $6AE0      ;

; Unused
u$6B2A DEFB $00,$00,$00

; Handler: Player Sprite
;
; Used by the routines at #R$6E18, #R$7311, #R$763C and #R$76D7.
@label=Handler_PlayerSprite
c$6B2D LD A,($7822)  ; Load #REGa with *#R$7822.
 $6B30 LD E,$0D      ; Set the sprite offset in #REGe (#N$0D bytes).
 $6B32 BIT 7,A       ; Check the direction bit.
 $6B34 JR NZ,$6B38   ; Jump to #R$6B38 if the player is moving fowards.
 $6B36 LD E,$12      ; Set an alternate sprite offset for the left-facing sprite (#N$12
                     ; bytes).
@label=SetPlayerSpriteDirection
*$6B38 LD C,$07      ; Set #INK$07 to #REGc.
 $6B3A LD HL,$7833   ; {Fetch #R$7833 in #REGd.
 $6B3D LD D,(HL)     ; }
 $6B3E INC L         ; {Fetch #R$7834 in #REGa.
 $6B3F LD A,(HL)     ; }
 $6B40 CALL $692C    ; Call #R$692C.
 $6B43 RET           ; Return.

; Unused?
c$6B44 INC D         ; Increment #REGd by one.
 $6B45 LD (HL),E     ; Write #REGe to *#REGhl.
 $6B46 RET           ; Return.

; Unused
u$6B47 DEFB $00

; Get Controls
;
; Used by the routine at #R$6C00.
@label=GetControls
c$6B48 LD HL,($782C) ; #REGhl=*#R$782C.
 $6B4B JP (HL)       ; Jump to *#REGhl.

; Handler: Player Movement
;
; Used by the routine at #R$6C00.
;
; A Input state
@label=Handler_PlayerMovement
c$6B4C LD ($7828),A  ; Store the current player input state in *#R$7828.
; Set up the directional indicator colors based on the input combination.
; The indicators show which direction the player will move on slopes.
; .
; Note that the middle body section is shared between the "UP" and "DOWN"
; arrows, this is why the logic controls three colour variables.
 $6B4F LD C,$00      ; Initialise the "UP" indicator colour in #REGc to #INK$00
                     ; (OFF).
 $6B51 LD DE,$0606   ; Set #INK$06 (ON) for both #REGd ("DOWN" indicator) and #REGe
                     ; (the middle body section of the indicators).
 $6B54 BIT 2,A       ; {Jump to #R$6B61 if "DOWN" is being pressed.
 $6B56 JR NZ,$6B61   ; }
; A "DOWN" key is not being pressed, so activate the "UP" indicator.
 $6B58 LD C,E        ; Change the "UP" indicator colour in #REGc to #INK$06
                     ; (ON).
 $6B59 LD E,$00      ; Clear the "DOWN" indicator colour in #REGe to #INK$00
                     ; (OFF).
 $6B5B BIT 3,A       ; {Jump to #R$6B61 if "UP" is being pressed.
 $6B5D JR NZ,$6B61   ; }
; Neither "UP" or "DOWN" are being pressed, so clear both indicators.
 $6B5F LD C,E        ; Clear the "UP" indicator colour in #REGc to #INK$00
                     ; (OFF).
 $6B60 LD D,E        ; Clear the middle body section colour in #REGd to #INK$00
                     ; (OFF).
; Paint the indicators.
; .
; First paint the "UP" section.
@label=UpdateIndicatorDisplay
*$6B61 LD HL,$5A53   ; Set the attribute buffer location of the top of the indicators in
                     ; #REGhl to #N$5A53 to paint the "UP" section.
 $6B64 LD (HL),C     ; {Write #REGc containing the "UP" indicator colour value to the
 $6B65 INC L         ; top left and right of the "UP" indicator.
 $6B66 LD (HL),C     ; }
; The body of the indicator is shared between both "UP" and "DOWN"
; indicator arrows.
 $6B67 LD L,$73      ; Alter the attribute buffer location to point to the body of the
                     ; indicator.
 $6B69 LD (HL),D     ; {Write #REGd containing the middle section of the indicator colour
 $6B6A INC L         ; value to the middle left and right of the indicator body.
 $6B6B LD (HL),D     ; }
; Finally, paint the "DOWN" section.
 $6B6C LD L,$93      ; Alter the attribute buffer location to point to the bottom of the
                     ; indicators to paint the "DOWN" section.
 $6B6E LD (HL),E     ; {Write #REGe containing the "DOWN" indicator colour value to the
 $6B6F INC L         ; bottom left and right of the "DOWN" indicator.
 $6B70 LD (HL),E     ; }
 $6B71 NOP           ; {No operation.
 $6B72 NOP           ;
 $6B73 NOP           ; }
 $6B74 LD HL,$7823   ; #REGhl=#R$7823.
 $6B77 AND %00000011 ; Keep only bits 0-1.
 $6B79 JR Z,$6B99    ; Jump to #R$6B99 if #REGl is equal to #N$93.
 $6B7B RRCA          ; RRCA.
 $6B7C LD A,(HL)     ; #REGa=*#REGhl.
 $6B7D JR NC,$6B8C   ; Jump to #R$6B8C if #REGl is greater than or equal to
                     ; #N$93.
 $6B7F CP $96        ; Compare #REGa with #N$96.
 $6B81 LD A,$00      ; #REGa=#N$00.
 $6B83 JR Z,$6B99    ; Jump to #R$6B99 if #REGa was equal to #N$96 on line
                     ; #R$6B7F.
 $6B85 INC (HL)      ; Increment *#REGhl by one.
 $6B86 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $6B88 JR NZ,$6B99   ; Jump to #R$6B99 if *#REGhl is not equal to #N$00.
 $6B8A JR $6B97      ; Jump to #R$6B97.
*$6B8C CP $69        ; Compare #REGa with #N$69.
 $6B8E LD A,$00      ; #REGa=#N$00.
 $6B90 JR Z,$6B99    ; Jump to #R$6B99 if #REGa was equal to #N$69 on line
                     ; #R$6B8C.
 $6B92 DEC (HL)      ; Decrease *#REGhl by one.
 $6B93 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $6B95 JR Z,$6B99    ; Jump to #R$6B99 if *#REGhl is equal to #N$00.
*$6B97 LD A,$02      ; {Write #N$02 to *#R$7829.
*$6B99 LD ($7829),A  ; }
 $6B9C LD L,$27      ; #REGl=#N$27.
 $6B9E LD A,(HL)     ; {Jump to #R$6BA3 if *#REGhl is zero.
 $6B9F AND A         ;
 $6BA0 JR Z,$6BA3    ; }
 $6BA2 DEC (HL)      ; Decrease *#REGhl by one.
*$6BA3 DEC L         ; Decrease #REGl by one.
 $6BA4 LD A,(HL)     ; {Jump to #R$6BC3 if *#REGhl is not zero.
 $6BA5 AND A         ;
 $6BA6 JR NZ,$6BC3   ; }
 $6BA8 LD L,$23      ; #REGl=#N$23.
 $6BAA LD A,(HL)     ; #REGa=*#REGhl.
 $6BAB DEC L         ; Decrease #REGl by one.
 $6BAC CP (HL)       ; {Jump to #R$6BC3 if #REGa is equal to *#REGhl.
 $6BAD JR Z,$6BC3    ; }
 $6BAF LD A,(HL)     ; #REGa=*#REGhl.
 $6BB0 JR C,$6BB4    ; Jump to #R$6BB4 if #REGa is less than *#REGhl.
 $6BB2 INC (HL)      ; {Increment *#REGhl by two.
 $6BB3 INC (HL)      ; }
*$6BB4 DEC (HL)      ; Decrease *#REGhl by one.
 $6BB5 OR (HL)       ; Set the bits from *#REGhl.
 $6BB6 INC A         ; Increment #REGa by one.
 $6BB7 JR NZ,$6BC3   ; Jump to #R$6BC3 if #REGa is not equal to *#REGhl.
 $6BB9 LD A,(HL)     ; #REGa=*#REGhl.
 $6BBA DEC L         ; Decrease #REGl by one.
 $6BBB LD (HL),A     ; Write #REGa to *#REGhl.
 $6BBC RLCA          ; RLCA.
 $6BBD JP NC,$6AC9   ; Jump to #R$6AC9 if #REGl is greater than *#REGhl.
 $6BC0 JP $6B10      ; Jump to #R$6B10.
*$6BC3 LD L,$22      ; #REGl=#N$22.
 $6BC5 LD A,(HL)     ; #REGa=*#REGhl.
 $6BC6 DEC L         ; Decrease #REGl by one.
 $6BC7 CP (HL)       ; {Jump to #R$6BEB if #REGa is equal to *#REGhl.
 $6BC8 JR Z,$6BEB    ; }
 $6BCA JR C,$6BD9    ; Jump to #R$6BD9 if #REGa is less than *#REGhl.
 $6BCC INC (HL)      ; Increment *#REGhl by one.
 $6BCD RLCA          ; RLCA.
 $6BCE JR NC,$6BEA   ; Jump to #R$6BEA if *#REGhl is greater than or equal to
                     ; *#REGhl.
 $6BD0 LD A,($7827)  ; {Jump to #R$6BE5 if *#R$7827 is zero.
 $6BD3 AND A         ;
 $6BD4 JR Z,$6BE5    ; }
 $6BD6 DEC (HL)      ; Decrease *#REGhl by one.
 $6BD7 JR $6BEA      ; Jump to #R$6BEA.
*$6BD9 DEC (HL)      ; Decrease *#REGhl by one.
 $6BDA RLCA          ; RLCA.
 $6BDB JR C,$6BEA    ; Jump to #R$6BEA if *#REGhl is less than #REGa.
 $6BDD INC (HL)      ; Increment *#REGhl by one.
 $6BDE LD A,($7827)  ; {Jump to #R$6BEA if *#R$7827 is not zero.
 $6BE1 AND A         ;
 $6BE2 JR NZ,$6BEA   ; }
 $6BE4 DEC (HL)      ; Decrease *#REGhl by one.
*$6BE5 LD A,$03      ; {Write #N$03 to *#R$7827.
 $6BE7 LD ($7827),A  ; }
*$6BEA NOP           ; No operation.
*$6BEB LD L,$22      ; #REGl=#N$22.
 $6BED LD A,(HL)     ; #REGa=*#REGhl.
 $6BEE LD DE,$5A45   ; #REGde=#N$5A45 (attribute buffer location).
 $6BF1 CALL $6880    ; Call #R$6880.
 $6BF4 LD A,($7823)  ; #REGa=*#R$7823.
 $6BF7 LD E,$85      ; #REGe=#N$85.
 $6BF9 JP $6D28      ; Jump to #R$6D28.

; Unused
u$6BFC DEFB $00,$00,$00,$00

; Game Loop
;
; Used by the routines at #R$EBF3 and #R$EC00.
@label=Game_Loop
c$6C00 LD A,($782B)  ; #REGa=*#R$782B.
 $6C03 XOR %00000001 ; Flip bit 0.
 $6C05 LD ($782B),A  ; Write #REGa back to *#R$782B.
 $6C08 LD HL,$FFFF   ; {#REGsp=#N$FFFF.
 $6C0B LD SP,HL      ; }
 $6C0C LD A,($5C78)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>.)
 $6C0F INC A         ; Increment #REGa by one.
 $6C10 LD HL,$781A   ; #REGhl=#R$781A.
 $6C13 DEC (HL)      ; Decrease *#REGhl by one.
 $6C14 LD L,$5A      ; #REGl=#N$5A.
 $6C16 LD (HL),A     ; Write #REGa to *#REGhl.
 $6C17 JR NZ,$6C73   ; Jump to #R$6C73 if *#REGhl is not zero.
 $6C19 INC (HL)      ; Increment *#REGhl by one.
 $6C1A LD L,$2B      ; #REGl=#N$2B.
 $6C1C LD A,(HL)     ; #REGa=*#REGhl.
 $6C1D XOR %00000001 ; Flip bit 0.
 $6C1F LD (HL),A     ; Write #REGa to *#REGhl.
 $6C20 NOP           ;
 $6C21 NOP           ;
 $6C22 LD A,$02      ;
 $6C24 LD ($7824),A  ;
 $6C27 LD A,($782A)  ;
 $6C2A AND A         ;
 $6C2B JP NZ,$6E18   ;
 $6C2E CALL $68AD    ;
 $6C31 LD A,($7822)  ;
 $6C34 BIT 7,A       ;
 $6C36 JR Z,$6C43    ;
 $6C38 CALL $659C    ;
 $6C3B CALL $67E9    ;
 $6C3E CALL $6A00    ;
 $6C41 JR $6C4C      ;
*$6C43 CALL $6650    ;
 $6C46 CALL $67E9    ;
 $6C49 CALL $6AAC    ;
*$6C4C CALL $72C3    ;
 $6C4F CALL $7311    ;
 $6C52 CALL $6B48    ;
 $6C55 CALL $6B4C    ;
 $6C58 LD A,($7822)  ;
 $6C5B BIT 7,A       ;
 $6C5D JR Z,$6C60    ;
 $6C5F CPL           ;
*$6C60 SUB $66       ;
 $6C62 JR NC,$6C65   ;
 $6C64 XOR A         ;
*$6C65 SRL A         ;
 $6C67 SRL A         ;
 $6C69 INC A         ;
 $6C6A LD ($781A),A  ;
 $6C6D NOP           ;
 $6C6E NOP           ;
 $6C6F NOP           ;
 $6C70 CALL $763C    ;
*$6C73 LD A,($782B)  ;
 $6C76 AND A         ;
 $6C77 JR NZ,$6C8F   ;
 $6C79 LD A,($782A)  ;
 $6C7C AND A         ;
 $6C7D JR NZ,$6C88   ;
 $6C7F CALL $72C3    ;
 $6C82 CALL $6B48    ;
 $6C85 CALL $6B4C    ;
*$6C88 XOR A         ;
 $6C89 LD ($7824),A  ;
 $6C8C CALL $6D50    ;
*$6C8F LD A,($7824)  ;
 $6C92 AND A         ;
 $6C93 JR NZ,$6C9B   ;
 $6C95 CALL $68AD    ;
 $6C98 CALL $7311    ;
*$6C9B CALL $6D50    ;
 $6C9E HALT          ;
 $6C9F NOP           ;
 $6CA0 NOP           ;
 $6CA1 NOP           ;
 $6CA2 NOP           ;
 $6CA3 NOP           ;
 $6CA4 NOP           ;
 $6CA5 NOP           ;
 $6CA6 NOP           ;
 $6CA7 NOP           ;
 $6CA8 NOP           ;
 $6CA9 NOP           ;

; Game Initialisation
;
; Used by the routines at #R$6D21, #R$E800 and #R$ECAB.
@label=GameInitialisation
c$6CAA CALL $75AA    ; Call #R$75AA.
; This entry point is used by the routine at #R$76D7.
@label=SetNewGameStates
*$6CAD LD HL,$3400   ; {Write #N$3400 to *#R$783C.
 $6CB0 LD ($783C),HL ; }
 $6CB3 LD HL,$7815   ; {Write #N$00 to #R$7815.
 $6CB6 LD (HL),$00   ; }
 $6CB8 DEC L         ; {Write #N$00 to #R$7814.
 $6CB9 LD (HL),$00   ; }
 $6CBB LD L,$1A      ; {Write #N$01 to #R$781A.
 $6CBD LD (HL),$01   ; }
 $6CBF INC L         ; {Write #N$00 to #R$781B.
 $6CC0 LD (HL),$00   ; }
 $6CC2 INC L         ; {Write #R$B200 to #R$781C.
 $6CC3 LD (HL),$00   ;
 $6CC5 INC L         ;
 $6CC6 LD (HL),$B2   ; }
 $6CC8 LD L,$21      ; #REGhl=#R$7821.
; Write #N$80 to #FOR$00,$02,,$01(n,#R($7821+n), , and ).
 $6CCA LD B,$03      ; #REGb=#N$03.
*$6CCC LD (HL),$80   ; Write #N$80 to *#REGhl.
 $6CCE INC L         ; Increment #REGl by one.
 $6CCF DJNZ $6CCC    ; Decrease counter by one and loop back to #R$6CCC until
                     ; counter is zero.
; Write #N$00 to #FOR$00,$07,,$01(n,#N($7824+n), , and ).
 $6CD1 LD B,$08      ; #REGb=#N$08.
*$6CD3 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6CD5 INC L         ; Increment #REGl by one.
 $6CD6 DJNZ $6CD3    ; Decrease counter by one and loop back to #R$6CD3 until
                     ; counter is zero.
 $6CD8 INC L         ; {Write #R$A100(#N$A113) to *#R$782E.
 $6CD9 INC L         ;
 $6CDA LD (HL),$13   ;
 $6CDC INC L         ;
 $6CDD LD (HL),$A1   ; }
 $6CDF INC L         ; {Write #N$03 to *#R$7830.
 $6CE0 LD (HL),$03   ; }
 $6CE2 INC L         ; {Write #N$BB00 to *#R$7831.
 $6CE3 LD (HL),$00   ;
 $6CE5 INC L         ;
 $6CE6 LD (HL),$BB   ; }
 $6CE8 INC L         ; {Write #N$0B to *#R$7833.
 $6CE9 LD (HL),$0B   ; }
 $6CEB INC L         ; {Write #N$00 to *#R$7834.
 $6CEC LD (HL),$00   ; }
 $6CEE CALL $6500    ; Call #R$6500.
 $6CF1 LD L,$10      ; #REGl=#N$10.
; See #R$E800.
 $6CF3 LD A,($782D)  ; {Jump to #R$6D11 if the game is not in "demo mode" (the
 $6CF6 CP $73        ; high-order byte of #R$782C does not contain
 $6CF8 JR NZ,$6D11   ; #R$73B7(#N$73)).}
 $6CFA LD HL,$A1E0   ; #REGhl=#R$A1E0.
*$6CFD LD A,(HL)     ; #REGa=*#REGhl.
 $6CFE DEC L         ; Decrease #REGl by one.
 $6CFF DEC A         ; Decrease #REGa by one.
 $6D00 JR Z,$6D0A    ; Jump to #R$6D0A if #REGa is zero.
 $6D02 CP $31        ; {Jump to #R$6CFD if #REGa is higher than #N$31.
 $6D04 JR NC,$6CFD   ; }
 $6D06 CP $2D        ; {Jump to #R$6CFD if #REGa is lower than #N$2D.
 $6D08 JR C,$6CFD    ; }
*$6D0A LD A,L        ; #REGa=#REGl.
 $6D0B INC A         ; Increment #REGa by one.
 $6D0C LD ($782E),A  ; Write #REGa to *#R$782E.
 $6D0F DEC L         ; {Decrease #REGl by two.
 $6D10 DEC L         ; }
*$6D11 LD H,$9E      ; #REGh=#N$9E.
 $6D13 XOR A         ; #REGa=#N$00.
 $6D14 CALL $6800    ; Call #R$6800.
; This entry point is used by the routine at #R$6E18.
*$6D17 LD A,($5C78)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>.)
 $6D1A INC A         ; Increment #REGa by one.
 $6D1B JP $EBF6      ; Jump to #R$EBF6.

@org

; Routine at 6D1E
;
; Used by the routine at #R$5D11.
@label=Alias_InitialiseGame
c$6D1E JP $E80E      ; Jump to #R$E80E.

; Routine at 6D21
c$6D21 LD HL,$FFFF   ; {#REGsp=#N$FFFF.
 $6D24 LD SP,HL      ; }
 $6D25 JP $6CAA      ; Jump to #R$6CAA.

; Routine at 6D28
;
; Used by the routine at #R$6B4C.
c$6D28 BIT 7,A       ;
 $6D2A JR NZ,$6D2D   ;
 $6D2C CPL           ;
*$6D2D ADD A,$3C     ;
 $6D2F LD L,A        ;
 $6D30 LD H,$B4      ;
 $6D32 LD L,(HL)     ;
 $6D33 LD A,($7829)  ;
 $6D36 AND A         ;
 $6D37 JR NZ,$6D42   ;
 $6D39 LD A,($7828)  ;
 $6D3C AND $03       ;
 $6D3E JR Z,$6D42    ;
 $6D40 DEC L         ;
 $6D41 DEC L         ;
*$6D42 LD A,L        ;
 $6D43 LD ($7835),A  ;
 $6D46 JP $6893      ;

; Routine at 6D49
;
; Used by the routines at #R$6AAC and #R$76D7.
c$6D49 LD A,($5C78)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>.)
 $6D4C INC A         ; Increment #REGa by one.
 $6D4D LD ($785A),A  ; Write #REGa to *#R$785A.
; This entry point is used by the routines at #R$6C00, #R$6E18 and #R$763C.
*$6D50 LD HL,$782A   ; #REGhl=#R$782A.
 $6D53 LD A,(HL)     ; {Jump to #R$6D5E if *#REGhl is not zero.
 $6D54 AND A         ;
 $6D55 JR NZ,$6D5E   ; }
 $6D57 DEC L         ; Decrease #REGl by one.
 $6D58 LD A,(HL)     ; {Jump to #R$6D77 if *#REGhl is zero.
 $6D59 AND A         ;
 $6D5A JR Z,$6D77    ; }
 $6D5C LD A,$02      ; #REGa=#N$02.
*$6D5E LD L,$CC      ; #REGl=#N$CC.
 $6D60 LD B,$02      ; #REGb=#N$02.
*$6D62 LD D,(HL)     ; #REGd=*#REGhl.
 $6D63 INC L         ; Increment #REGl by one.
*$6D64 LD E,(HL)     ; #REGe=*#REGhl.
 $6D65 OUT ($FE),A   ; OUT #N$FE
 $6D67 XOR %00010000 ; Flip bits 4.
*$6D69 DEC E         ; Decrease #REGe by one.
 $6D6A JR NZ,$6D69   ; Jump to #R$6D69 until #REGe is zero.
 $6D6C CALL $EC00    ; Call #R$EC00.
 $6D6F DEC D         ; Decrease #REGd by one.
 $6D70 JR NZ,$6D64   ; Jump to #R$6D64 until #REGd is zero.
 $6D72 INC L         ; Increment #REGl by one.
 $6D73 DJNZ $6D62    ; Decrease counter by one and loop back to #R$6D62 until
                     ; counter is zero.
 $6D75 JR $6D5E      ; Jump to #R$6D5E.
*$6D77 LD A,($7835)  ; #REGa=*#R$7835.
 $6D7A SUB $9B       ; #REGa-=#N$9B.
 $6D7C LD C,A        ; #REGc=#REGa.
*$6D7D LD D,$14      ; #REGd=#N$14.
 $6D7F LD L,$CC      ; #REGl=#N$CC.
 $6D81 XOR A         ; #REGa=#N$00.
*$6D82 LD B,C        ; #REGb=#REGc.
 $6D83 OUT ($FE),A   ; OUT #N$FE
 $6D85 XOR %00010000 ; Flip bits 4.
*$6D87 LD E,(HL)     ; #REGe=*#REGhl.
*$6D88 DEC E         ; Decrease #REGe by one.
 $6D89 JR NZ,$6D88   ; Jump to #R$6D88 until #REGe is zero.
 $6D8B CALL $EC00    ; Call #R$EC00.
 $6D8E DJNZ $6D87    ; Decrease counter by one and loop back to #R$6D87 until
                     ; counter is zero.
 $6D90 INC L         ; Increment #REGl by one.
 $6D91 DEC D         ; Decrease #REGd by one.
 $6D92 JR NZ,$6D82   ; Jump to #R$6D82 until #REGd is zero.
 $6D94 JR $6D7D      ; Jump to #R$6D7D.

; Routine at 6D96
;
; Used by the routine at #R$6DA8.
c$6D96 LD A,(HL)     ; #REGa=*#REGhl.
 $6D97 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6D99 EXX           ; Switch to the shadow registers.
 $6D9A LD (HL),A     ; Write #REGa to *#REGhl'.
 $6D9B INC HL        ; Increment #REGhl' by one.
 $6D9C EXX           ; Switch back to the normal registers.
 $6D9D INC H         ; {Increment #REGh by two.
 $6D9E INC H         ; }
 $6D9F LD A,(HL)     ; #REGa=*#REGhl.
 $6DA0 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6DA2 EXX           ; Switch to the shadow registers.
 $6DA3 LD (HL),A     ; Write #REGa to *#REGhl'.
 $6DA4 INC HL        ; Increment #REGhl' by one.
 $6DA5 EXX           ; Switch back to the normal registers.
 $6DA6 INC H         ; Increment #REGh by one.
 $6DA7 RET           ; Return.

; Draw Large Sprite
;
; Used by the routine at #R$692C.
@label=DrawLargeSprite
c$6DA8 LD A,(BC)     ; #REGa=*#REGbc.
*$6DA9 INC BC        ; Increment #REGbc by one.
 $6DAA ADD A,E       ; #REGa+=#REGe.
 $6DAB LD E,A        ; #REGe=#REGa.
 $6DAC LD A,(BC)     ; #REGa=*#REGbc.
 $6DAD INC BC        ; Increment #REGbc by one.
 $6DAE ADD A,D       ; #REGa+=#REGd.
 $6DAF DEC A         ; Decrease #REGa by one.
 $6DB0 LD D,A        ; #REGd=#REGa.
*$6DB1 CP $10        ; Compare #REGa with #N$10.
 $6DB3 JR NC,$6DBA   ; Jump to #R$6DBA if #REGa is greater than or equal to
                     ; #N$10.
 $6DB5 LD A,E        ; {Jump to #R$6DCF if #REGe is less than #N$20.
 $6DB6 CP $20        ;
 $6DB8 JR C,$6DCF    ; }
*$6DBA LD HL,$0008   ; {#REGhl=#N($0008,$04,$04)+#REGbc.
 $6DBD ADD HL,BC     ; }
 $6DBE LD B,H        ; #REGb=#REGh.
 $6DBF LD C,L        ; #REGc=#REGl.
 $6DC0 INC D         ; Increment #REGd by one.
*$6DC1 LD A,(BC)     ; #REGa=*#REGbc.
 $6DC2 INC A         ; Increment #REGa by one.
 $6DC3 LD A,D        ; {Jump to #R$6DB1 if #REGd is not equal to #N$20.
 $6DC4 JR NZ,$6DB1   ; }
*$6DC6 INC BC        ; Increment #REGbc by one.
 $6DC7 LD A,(BC)     ; {Jump to #R$6DA9 if *#REGbc is not equal to #N$80.
 $6DC8 CP $80        ;
 $6DCA JR NZ,$6DA9   ; }
 $6DCC JP $68EC      ; Jump to #R$68EC.
*$6DCF LD A,D        ; #REGa=#REGd.
 $6DD0 ADD A,$40     ; #REGa+=#N$40.
 $6DD2 AND %01001000 ; Keep only bits 3, 6.
 $6DD4 LD H,A        ; #REGh=#REGa.
 $6DD5 LD A,D        ; #REGa=#REGd.
 $6DD6 RRCA          ; RRCA.
 $6DD7 RRCA          ; RRCA.
 $6DD8 RRCA          ; RRCA.
 $6DD9 AND %11100000 ; Keep only bits 5-7.
 $6DDB ADD A,E       ; #REGa+=#REGe.
 $6DDC LD L,A        ; #REGl=#REGa.
 $6DDD CALL $6D96    ; Call #R$6D96.
 $6DE0 INC H         ; Increment #REGh by one.
*$6DE1 CALL $68F6    ; Call #R$68F6.
 $6DE4 CALL $6910    ; Call #R$6910.
 $6DE7 INC D         ; Increment #REGd by one.
 $6DE8 LD A,D        ; {Jump to #R$6DF3 if #REGd is less than #N$10.
 $6DE9 CP $10        ;
 $6DEB JR C,$6DF3    ; }
 $6DED INC BC        ; {Increment #REGbc by four.
 $6DEE INC BC        ;
 $6DEF INC BC        ;
 $6DF0 INC BC        ; }
 $6DF1 JR $6DC1      ; Jump to #R$6DC1.
*$6DF3 ADD A,$40     ; #REGa+=#N$40.
 $6DF5 AND %01001000 ; Keep only bits 3, 6.
 $6DF7 LD H,A        ; #REGh=#REGa.
 $6DF8 LD A,D        ; #REGa=#REGd.
 $6DF9 RRCA          ; RRCA.
 $6DFA RRCA          ; RRCA.
 $6DFB RRCA          ; RRCA.
 $6DFC AND %11100000 ; Keep only bits 5-7.
 $6DFE ADD A,E       ; #REGa+=#REGe.
 $6DFF LD L,A        ; #REGl=#REGa.
 $6E00 CALL $68F6    ; Call #R$68F6.
 $6E03 INC H         ; Increment #REGh by one.
 $6E04 LD A,(BC)     ; #REGa=*#REGbc.
 $6E05 INC A         ; Increment #REGa by one.
 $6E06 JR NZ,$6DE1   ; Jump to #R$6DE1 if #REGa is not zero.
 $6E08 CALL $6D96    ; Call #R$6D96.
 $6E0B CALL $6910    ; Call #R$6910.
 $6E0E JR $6DC6      ; Jump to #R$6DC6.

; Data block at 6E10
b$6E10 DEFB $00,$00,$01,$07,$06,$01,$00,$00

; Handler: Game Over
;
; Used by the routine at #R$6C00.
@label=Handler_GameOver
c$6E18 CALL $68AD    ; Call #R$68AD.
 $6E1B LD HL,($783A) ; #REGhl=*#R$783A.
 $6E1E LD A,(HL)     ; #REGa=*#REGhl.
 $6E1F CP $F0        ; {Jump to #R$6E57 if #REGa is higher than #N$F0.
 $6E21 JR NC,$6E57   ; }
 $6E23 LD ($7834),A  ; Write #REGa to *#R$7834.
 $6E26 INC HL        ; Increment #REGhl by one.
 $6E27 LD A,(HL)     ; #REGa=*#REGhl.
 $6E28 AND %00001111 ; Keep only bits 0-3.
 $6E2A LD ($781A),A  ; Write #REGa to *#R$781A.
 $6E2D LD A,(HL)     ; #REGa=*#REGhl.
 $6E2E INC HL        ; Increment #REGhl by one.
 $6E2F LD ($783A),HL ; Write #REGhl to *#R$783A.
 $6E32 LD HL,$7833   ; #REGhl=#R$7833.
 $6E35 RLCA          ; RLCA.
 $6E36 JR NC,$6E39   ; Jump to #R$6E39 if {} is higher.
 $6E38 DEC (HL)      ; Decrease *#REGhl by one.
*$6E39 RLCA          ; RLCA.
 $6E3A JR NC,$6E3D   ; Jump to #R$6E3D if {} is higher.
 $6E3C INC (HL)      ; Increment *#REGhl by one.
*$6E3D RLCA          ; RLCA.
 $6E3E JR NC,$6E48   ; Jump to #R$6E48 if {} is higher.
 $6E40 CALL $659C    ; Call #R$659C.
 $6E43 CALL $67E9    ; Call #R$67E9.
 $6E46 JR $6E51      ; Jump to #R$6E51.
*$6E48 RLCA          ; RLCA.
 $6E49 JR NC,$6E51   ; Jump to #R$6E51 if {} is higher.
 $6E4B CALL $6650    ; Call #R$6650.
 $6E4E CALL $67E9    ; Call #R$67E9.
*$6E51 CALL $6B2D    ; Call #R$6B2D.
 $6E54 CALL $6D50    ; Call #R$6D50.
@label=StartCarouselAnimation
*$6E57 PUSH AF       ; Stash #REGaf on the stack.
 $6E58 NOP           ; {No operation.
 $6E59 NOP           ;
 $6E5A NOP           ;
 $6E5B NOP           ;
 $6E5C NOP           ;
 $6E5D NOP           ; }
 $6E5E CALL $6B2D    ; Call #R$6B2D.
 $6E61 POP AF        ; Restore #REGaf from the stack.
 $6E62 AND %00001111 ; Keep only bits 0-3.
 $6E64 SUB $08       ; #REGa-=#N$08.
 $6E66 LD B,A        ; #REGb=#REGa.
 $6E67 LD A,($7822)  ; {Fetch *#R$7822 to determine if the player facing left
 $6E6A BIT 7,A       ; or right?}
 $6E6C LD A,$12      ; Set a default offset in #REGa of #N$12.
 $6E6E JR Z,$6E72    ; Jump to #R$6E72 if the player is facing left.
; The player is facing right.
 $6E70 LD A,$0D      ; Change the offset in #REGa to #N$0D.
*$6E72 ADD A,B       ; #REGa+=#REGb.
 $6E73 LD L,A        ; #REGl=#REGa.
 $6E74 LD A,($7833)  ; #REGa=*#R$7833.
 $6E77 SUB $02       ; #REGa-=#N$02.
 $6E79 LD H,$40      ; #REGh=#N$40.
 $6E7B CP $08        ; {Jump to #R$6E81 if #REGa is lower than #N$08.
 $6E7D JR C,$6E81    ; }
 $6E7F LD H,$48      ; #REGh=#N$48.
*$6E81 AND %00000111 ; Keep only bits 0-2.
 $6E83 RRCA          ; {RRCA.
 $6E84 RRCA          ;
 $6E85 RRCA          ; }
 $6E86 ADD A,L       ; #REGa+=#REGl.
 $6E87 LD L,A        ; #REGl=#REGa.
 $6E88 PUSH HL       ; Stash #REGhl on the stack.
 $6E89 DEC L         ; {Decrease #REGl by two.
 $6E8A DEC L         ; }
 $6E8B LD DE,$78E0   ; #REGde=#R$78E0.
 $6E8E LD C,$28      ; #REGc=#N$28.
 $6E90 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
*$6E91 LD B,$04      ; #REGb=#N$04.
*$6E93 LDI           ; LDI.
 $6E95 DJNZ $6E93    ; Decrease counter by one and loop back to #R$6E93 until
                     ; counter is zero.
 $6E97 LD A,E        ; #REGa=#REGe.
 $6E98 SUB $04       ; #REGa-=#N$04.
 $6E9A LD E,A        ; #REGe=#REGa.
 $6E9B INC D         ; Increment #REGd by one.
 $6E9C DEC C         ; Decrease #REGc by one.
 $6E9D JR NZ,$6E91   ; Jump to #R$6E91 until #REGc is zero.
 $6E9F LD A,D        ; #REGa=#REGd.
 $6EA0 SUB $49       ; #REGa-=#N$49.
 $6EA2 SBC A,A       ; #REGa-=#REGa.
 $6EA3 ADD A,$59     ; #REGa+=#N$59.
 $6EA5 LD D,A        ; #REGd=#REGa.
 $6EA6 LD B,$04      ; Set a counter in #REGb of #N$04 for the width of the
                     ; carousel.
; Paint the carousel.
 $6EA8 LD A,$06      ; #REGa=#COLOUR$06.
@label=ColourCarousel_Loop
*$6EAA LD (DE),A     ; Write the attribute byte to the attribute buffer address in
                     ; *#REGde.
 $6EAB INC E         ; Move to the next attribute buffer position.
 $6EAC DJNZ $6EAA    ; Decrease the carousel width counter by one and loop back to #R$6EAA
                     ; until all of the carousel has been painted.
 $6EAE POP HL        ; Restore #REGhl from the stack.
; Play the "player dead" audio.
; .
; #HTML(#AUDIO(dead.wav)(#INCLUDE(Dead)))
 $6EAF LD B,$14      ; #REGb=#N$14 (counter; #N$14 loops).
@label=Handler_PlayerDead
*$6EB1 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $6EB2 PUSH HL       ; }
 $6EB3 LD A,B        ; #REGa=#REGb.
 $6EB4 AND %00000111 ; Keep only bits 0-2.
 $6EB6 LD D,$00      ; #REGd=#N$00.
@label=PlayAudioDead
*$6EB8 OUT ($FE),A   ; Send to the speaker.
 $6EBA XOR %00010000 ; Flip the speaker (bit 4) on/ off.
 $6EBC LD B,D        ; #REGb=#REGd.
@label=AudioDead_Loop
*$6EBD DJNZ $6EBD    ; Decrease counter by one and loop back to #R$6EBD until
                     ; counter is zero.
 $6EBF DEC D         ; Decrease #REGd by one.
 $6EC0 JR NZ,$6EB8   ; Jump to #R$6EB8 until #REGd is zero.
 $6EC2 LD B,$08      ; #REGb=#N$08 (counter; height of the carousel).
@label=Carousel_Loop
*$6EC4 XOR A         ; #REGa=#N$00.
 $6EC5 RLD           ; RLD.
 $6EC7 DEC L         ; Decrease #REGl by one.
 $6EC8 RLD           ; RLD.
 $6ECA INC L         ; Increment #REGl by one.
 $6ECB OR (HL)       ; Set the bits from *#REGhl.
 $6ECC LD (HL),A     ; Write #REGa to *#REGhl.
 $6ECD INC H         ; Increment #REGh by one.
 $6ECE DJNZ $6EC4    ; Decrease counter by one and loop back to #R$6EC4 until
                     ; counter is zero.
 $6ED0 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $6ED1 POP BC        ; }
 $6ED2 DJNZ $6EB1    ; Decrease counter by one and loop back to #R$6EB1 until
                     ; counter is zero.
; This entry point is used by the routines at #R$7161 and #R$76D7.
*$6ED4 CALL $68AD    ; Call #R$68AD.
 $6ED7 LD A,($7838)  ; #REGa=*#R$7838.
 $6EDA BIT 7,A       ; Test bit 7 of #REGa.
 $6EDC LD HL,$BB00   ; #REGhl=#R$BB00.
 $6EDF LD A,$80      ; #REGa=#N$80.
 $6EE1 JR Z,$6EE6    ; Jump to #R$6EE6 if {} is zero.
 $6EE3 DEC A         ; Decrease #REGa by one.
 $6EE4 LD L,$04      ; #REGl=#N$04.
*$6EE6 LD ($7831),HL ; Write #REGhl to *#R$7831.
 $6EE9 LD HL,$7830   ; #REGhl=#R$7830.
 $6EEC LD (HL),$03   ; Write #N$03 to *#REGhl.
 $6EEE JR Z,$6EF1    ; Jump to #R$6EF1 if {} is zero.
 $6EF0 INC (HL)      ; Increment *#REGhl by one.
*$6EF1 LD L,$21      ; #REGl=#N$21.
 $6EF3 LD B,$03      ; #REGb=#N$03.
*$6EF5 LD (HL),A     ; Write #REGa to *#REGhl.
 $6EF6 INC L         ; Increment #REGl by one.
 $6EF7 DJNZ $6EF5    ; Decrease counter by one and loop back to #R$6EF5 until
                     ; counter is zero.
 $6EF9 LD B,$08      ; #REGb=#N$08.
*$6EFB LD (HL),$00   ; Write #N$00 to *#REGhl.
 $6EFD INC L         ; Increment #REGl by one.
 $6EFE DJNZ $6EFB    ; Decrease counter by one and loop back to #R$6EFB until
                     ; counter is zero.
 $6F00 LD L,$1A      ; #REGl=#N$1A.
 $6F02 LD (HL),$01   ; Write #N$01 to *#REGhl.
 $6F04 LD HL,$0000   ; {Write #N($0000,$04,$04) to *#R$7814.
 $6F07 LD ($7814),HL ; }
 $6F0A LD HL,($7836) ; {Write *#R$7836 to *#R$782E.
 $6F0D LD ($782E),HL ; }
 $6F10 BIT 7,A       ; Test bit 7 of #REGa.
 $6F12 LD B,$03      ; #REGb=#N$03.
 $6F14 JR NZ,$6F17   ; Jump to #R$6F17 if {} is not zero.
 $6F16 INC B         ; Increment #REGb by one.
*$6F17 LD A,H        ; #REGa=#REGh.
 $6F18 SUB $99       ; #REGa-=#N$99.
*$6F1A SUB $05       ; #REGa-=#N$05.
 $6F1C JR NC,$6F1A   ; Jump to #R$6F1A if {} is higher.
 $6F1E ADD A,$05     ; #REGa+=#N$05.
 $6F20 ADD A,A       ; #REGa+=#REGa.
 $6F21 ADD A,A       ; #REGa+=#REGa.
 $6F22 DEC A         ; Decrease #REGa by one.
 $6F23 LD ($7833),A  ; Write #REGa to *#R$7833.
 $6F26 LD A,$9E      ; #REGa=#N$9E.
*$6F28 ADD A,$05     ; #REGa+=#N$05.
 $6F2A CP H          ; {Jump to #R$6F28 if #REGa is lower than #REGh.
 $6F2B JR C,$6F28    ; }
 $6F2D SUB $05       ; #REGa-=#N$05.
 $6F2F LD H,A        ; #REGh=#REGa.
 $6F30 LD A,L        ; {#REGl-=#REGb.
 $6F31 SUB B         ;
 $6F32 LD L,A        ; }
 $6F33 JR NC,$6F39   ; Jump to #R$6F39 if {} is higher.
 $6F35 LD A,H        ; {#REGh-=#N$05.
 $6F36 SUB $05       ;
 $6F38 LD H,A        ; }
*$6F39 XOR A         ; #REGa=#N$00.
 $6F3A CALL $6800    ; Call #R$6800.
 $6F3D CALL $7552    ; Call #R$7552.
 $6F40 CALL $6D17    ; Call #R$6D17.

; Unused
u$6F43 DEFB $00,$00,$00,$00,$00,$00,$00

; Handler: Hit Wall
@label=Handler_HitWall
c$6F4A LD HL,$BC80   ; #REGhl=#R$BC80.
 $6F4D LD A,($7822)  ; {Jump to #R$6F56 if *#R$7822 is higher than #N$80 (i.e.
 $6F50 BIT 7,A       ; moving right).
 $6F52 JR NZ,$6F56   ; }
 $6F54 LD L,$8F      ; #REGl=#N$8F.
@label=HitWallMovingRight
*$6F56 LD ($783A),HL ; Write #REGhl to *#R$783A.
 $6F59 LD A,$04      ; {Write #N$04 to *#R$782A.
 $6F5B LD ($782A),A  ; }
 $6F5E RET           ; Return.

; Unused
u$6F5F DEFB $00,$00,$00

; Routine at 6F62
;
; Used by the routine at #R$69BE.
c$6F62 LD ($782E),HL ; Write #REGhl to *#R$782E.
 $6F65 LD C,A        ; #REGc=#REGa.
 $6F66 LD A,(HL)     ; #REGa=*#REGhl.
 $6F67 DEC A         ; Decrease #REGa by one.
 $6F68 JR Z,$6F72    ; Jump to #R$6F72 if #REGa is zero.
 $6F6A CP $29        ; {Jump to #R$6F7B if #REGa is lower than #N$29.
 $6F6C JR C,$6F7B    ; }
 $6F6E CP $31        ; {Jump to #R$6F7B if #REGa is higher than #N$31.
 $6F70 JR NC,$6F7B   ; }
*$6F72 LD ($7836),HL ; Write #REGhl to *#R$7836.
 $6F75 LD A,($7822)  ; {Write *#R$7822 to *#R$7838.
 $6F78 LD ($7838),A  ; }
*$6F7B LD A,C        ; #REGa=#REGc.
 $6F7C RET           ; Return.

; Handler: Hit Hump
@label=Handler_HitHump
c$6F7D LD A,($7834)  ; #REGa=*#R$7834.
; #TABLE(default,centre,centre,centre,centre)
; { =h Direction | =h Wheelie Range | =h Byte | =h Bits }
; { =r4 Left | =h Normal (no wheelie) | #N$48 | #EVAL($48,$02,$08) }
; { =h Mid-Low | #N$49 | #EVAL($49,$02,$08) }
; { =h Mid-High | #N$4A | #EVAL($4A,$02,$08) }
; { =h Max (full wheelie) | #N$4B | #EVAL($4B,$02,$08) }
; { =r4 Right | =h Normal (no wheelie) | #N$08 | #EVAL($08,$02,$08) }
; { =h Mid-Low | #N$09 | #EVAL($09,$02,$08) }
; { =h Mid-High | #N$0A | #EVAL($0A,$02,$08) }
; { =h Max (full wheelie) | #N$0B | #EVAL($0B,$02,$08) }
; TABLE#
 $6F80 AND %00000111 ; Keep only bits 0-2.
 $6F82 RET NZ        ; Return if the result is not zero.
 $6F83 LD A,$05      ; {Write #N$05 to *#R$782A.
 $6F85 LD ($782A),A  ; }
 $6F88 LD A,($7834)  ; #REGa=*#R$7834.
 $6F8B AND %01000000 ; Keep only the direction bit (bit 6).
 $6F8D LD HL,$BD0E   ; #REGhl=#R$BD0E.
 $6F90 JR Z,$6F94    ; Jump to #R$6F94 if the player is moving right.
 $6F92 LD L,$21      ; #REGl=#N$21.
@label=HitHumpMovingRight
*$6F94 LD ($783A),HL ; Write #REGhl to *#R$783A.
 $6F97 RET           ; Return.

; Unused
u$6F98 DEFB $00

; Handler: Ice
;
; .
;
; .
;
; If you hit ice too fast the bike will slide (crash) and you fall off.
; .
; The parameters are; #TABLE(default,centre,centre,centre,centre)
; { =h,r2 Direction | =h,c2 Bike Range | =h,r2 Crash Point }
; { =h Lowest | =h Highest }
; { Left | #N$69 | #N$7F | < #N$6F }
; { Right | #N$80 | #N$96 | > #N$90 }
; TABLE#
@label=Handler_Ice
c$6F99 LD A,($7822)  ; #REGa=*#R$7822.
 $6F9C CP $90        ; {Jump to #R$6FAA if #REGa is higher than #N$90.
 $6F9E JR NC,$6FAA   ; }
 $6FA0 CP $6F        ; {Jump to #R$6FAA if #REGa is lower than #N$6F.
 $6FA2 JR C,$6FAA    ; }
 $6FA4 LD A,($7828)  ; #REGa=*#R$7828.
 $6FA7 AND %00000011 ; Keep only bits 0-1.
 $6FA9 RET Z         ; Return if the result is zero.
@label=Initialise_CrashIce
*$6FAA LD A,$06      ; {Write #N$06 to *#R$782A.
 $6FAC LD ($782A),A  ; }
 $6FAF LD HL,$BDB8   ; #REGhl=#R$BDB8.
 $6FB2 LD A,($7822)  ; {Jump to #R$6FBB if *#R$7822 is higher than #N$80 (i.e.
 $6FB5 BIT 7,A       ; moving right).
 $6FB7 JR NZ,$6FBB   ; }
 $6FB9 LD L,$C7      ; #REGl=#N$C7.
@label=CrashIceMovingRight
*$6FBB LD ($783A),HL ; Write #REGhl to *#R$783A.
 $6FBE RET           ; Return.

; Unused
u$6FBF DEFB $00

; Handler: Jumps
;
; .
;
; .
;
; If you hit a jump too fast or too slow the bike will crash.
@label=Handler_Jumps
c$6FC0 LD DE,$0000   ; #REGde=#N($0000,$04,$04).
 $6FC3 LD A,($7822)  ; #REGa=*#R$7822.
; Check if the speed was too fast.
; .
; The parameters are quite wide; #TABLE(default,centre,centre,centre,centre)
; { =h,r2 Direction | =h,c2 Bike Range | =h,r2 Crash Point }
; { =h Lowest | =h Highest }
; { Left | #N$69 | #N$7F | < #N$6A }
; { Right | #N$80 | #N$96 | > #N$96 }
; TABLE#
 $6FC6 CP $96        ; {Jump to #R$6FDE if #REGa is higher than #N$96.
 $6FC8 JR NC,$6FDE   ; }
 $6FCA LD E,$42      ; #REGe=#N$42.
 $6FCC CP $6A        ; {Jump to #R$6FDE if #REGa is lower than #N$6A.
 $6FCE JR C,$6FDE    ; }
 $6FD0 LD E,$23      ; #REGe=#N$23.
; Check if the speed was too slow.
; .
; The parameters are again, quite wide; #TABLE(default,centre,centre,centre,centre)
; { =h,r2 Direction | =h,c2 Bike Range | =h,r2 Crash Point }
; { =h Lowest | =h Highest }
; { Left | #N$69 | #N$7F | > #N$70 }
; { Right | #N$80 | #N$96 | < #N$90 }
; TABLE#
 $6FD2 CP $90        ; {Return if #REGa is higher than #N$90.
 $6FD4 RET NC        ; }
 $6FD5 CP $70        ; {Return if #REGa is lower than #N$70.
 $6FD7 RET C         ; }
 $6FD8 BIT 7,A       ; {Jump to #R$6FDE if *#R$7822 is higher than #N$80 (i.e.
 $6FDA JR NZ,$6FDE   ; moving right).}
 $6FDC LD E,$65      ; #REGe=#N$65.
@label=Initialise_CrashJumpTooFast
*$6FDE RLCA          ; Rotate the direction bit into the carry flag.
 $6FDF LD HL,($782E) ; #REGhl=*#R$782E.
 $6FE2 JR C,$6FE6    ; Jump to #R$6FE6 if the player is moving right.
 $6FE4 DEC L         ; {Decrease #REGl by two.
 $6FE5 DEC L         ; }
@label=CrashJumpTooFastMovingRight
*$6FE6 INC L         ; Increment #REGl by one.
 $6FE7 LD A,(HL)     ; #REGa=*#REGhl.
 $6FE8 LD HL,$BD34   ; #REGhl=#R$BD34.
 $6FEB CP $43        ; {Jump to #R$6FF2 if #REGa is lower than #N$43.
 $6FED JR C,$6FF2    ; }
 $6FEF LD HL,$C400   ; #REGhl=#R$C400.
*$6FF2 ADD HL,DE     ; #REGhl+=#REGde.
 $6FF3 LD ($783A),HL ; Write #REGhl to *#R$783A.
 $6FF6 LD A,$04      ; {Write #N$04 to *#R$782A.
 $6FF8 LD ($782A),A  ; }
 $6FFB RET           ; Return.

; Unused
u$6FFC DEFB $00

; Handler: Downhill
;
; .
;
; .
;
; If you hit a downhill too fast the bike will launch (crash) and you fall off.
; .
; The parameters are quite wide though; #TABLE(default,centre,centre,centre,centre)
; { =h,r2 Direction | =h,c2 Bike Range | =h,r2 Crash Point }
; { =h Lowest | =h Highest }
; { Left | #N$69 | #N$7F | < #N$6A }
; { Right | #N$80 | #N$96 | > #N$96 }
; TABLE#
@label=Handler_Downhill
c$6FFD LD A,($7822)  ; #REGa=*#R$7822.
 $7000 CP $96        ; {Jump to #R$7007 if the players speed is higher than or
 $7002 JR NC,$7007   ; equal to #N$96.}
 $7004 CP $6A        ; {Return if #REGa is higher than #N$6A.
 $7006 RET NC        ; }
@label=Initialise_CrashDownhill
*$7007 LD HL,$BC9E   ; #REGhl=#R$BC9E.
 $700A LD DE,($782E) ; #REGde=*#R$782E.
 $700E INC D         ; Increment #REGd by one.
 $700F LD B,A        ; Store speed in #REGb temporarily.
 $7010 LD A,$03      ; {Write #N$03 to *#R$782A.
 $7012 LD ($782A),A  ; }
 $7015 LD A,B        ; Restore the current speed back to #REGa.
 $7016 RLCA          ; RLCA.
 $7017 JR NC,$702D   ; Jump to #R$702D if #REGa is higher.
 $7019 INC E         ; Increment #REGe by one.
 $701A JR NZ,$7020   ; Jump to #R$7020 if #REGe is not zero.
 $701C LD A,D        ; {#REGd+=#N$05.
 $701D ADD A,$05     ;
 $701F LD D,A        ; }
*$7020 LD A,(DE)     ; #REGa=*#REGde.
 $7021 CP $0B        ; {Jump to #R$7029 if #REGa is equal to #N$0B.
 $7023 JR Z,$7029    ; }
 $7025 CP $1E        ; {Jump to #R$7043 if #REGa is not equal to #N$1E.
 $7027 JR NZ,$7043   ; }
*$7029 LD L,$B3      ; #REGl=#N$B3.
 $702B JR $7043      ; Jump to #R$7043.
*$702D LD L,$D6      ; #REGl=#N$D6.
 $702F LD A,E        ; #REGa=#REGe.
 $7030 DEC E         ; Decrease #REGe by one.
 $7031 AND A         ; {Jump to #R$7038 if #REGa is not zero.
 $7032 JR NZ,$7038   ; }
 $7034 LD A,D        ; {#REGd-=#N$05.
 $7035 SUB $05       ;
 $7037 LD D,A        ; }
*$7038 LD A,(DE)     ; #REGa=*#REGde.
 $7039 CP $0A        ; {Jump to #R$7041 if #REGa is equal to #N$0A.
 $703B JR Z,$7041    ; }
 $703D CP $1F        ; {Jump to #R$7043 if #REGa is not equal to #N$1F.
 $703F JR NZ,$7043   ; }
*$7041 LD L,$EB      ; #REGl=#N$EB.
*$7043 LD ($783A),HL ; Write #REGhl to *#R$783A.
 $7046 RET           ; Return.

; Unused
u$7047 DEFB $00

; Handler: Refuel
@label=Handler_Refuel
c$7048 LD HL,($782E) ; #REGhl=*#R$782E.
 $704B LD (HL),$2E   ; Write #N$2E to *#REGhl.
 $704D LD A,($7833)  ; #REGa=*#R$7833.
 $7050 CP $08        ; Compare #REGa with #N$08.
 $7052 LD H,$42      ; #REGh=#N$42.
 $7054 JR C,$7058    ; Jump to #R$7058 if #REGa was lower than #N$08 (on line
                     ; #R$7050).
 $7056 LD H,$4A      ; #REGh=#N$4A.
*$7058 DEC A         ; Decrease #REGa by one.
 $7059 AND %00000110 ; Keep only bits 1-2.
 $705B RRCA          ; {RRCA.
 $705C RRCA          ;
 $705D RRCA          ; }
 $705E ADD A,$0D     ; #REGa+=#N$0D.
 $7060 LD L,A        ; #REGl=#REGa.
 $7061 LD C,$03      ; #REGc=#N$03.
 $7063 LD E,$02      ; #REGe=#N$02.
*$7065 LD B,$06      ; #REGb=#N$06.
 $7067 XOR A         ; {Write #N$00 to *#REGhl.
*$7068 LD (HL),A     ; }
 $7069 INC L         ; Increment #REGl by one.
 $706A DJNZ $7068    ; Decrease counter by one and loop back to #R$7068 until
                     ; counter is zero.
 $706C LD A,L        ; {#REGl-=#N$06.
 $706D SUB $06       ;
 $706F LD L,A        ; }
 $7070 INC H         ; {Increment #REGh by two.
 $7071 INC H         ; }
 $7072 DEC C         ; Decrease #REGc by one.
 $7073 JR NZ,$7065   ; Jump to #R$7065 until #REGc is zero.
 $7075 ADD A,$20     ; #REGa+=#N$20.
 $7077 LD L,A        ; #REGl=#REGa.
 $7078 LD A,H        ; #REGa=#REGh.
 $7079 SUB $08       ; #REGa-=#N$08.
 $707B LD H,A        ; #REGh=#REGa.
 $707C LD C,E        ; #REGc=#REGe.
 $707D DEC E         ; Decrease #REGe by one.
 $707E JR NZ,$7065   ; Jump to #R$7065 until #REGe is zero.
 $7080 LD HL,$3400   ; {Write #N$3400 to *#R$783C.
 $7083 LD ($783C),HL ; }
 $7086 RET           ; Return.

; Unused
u$7087 DEFB $00

; Contextual Random Number
;
; Used by the routine at #R$64AA.
;
;   H Seed value
; O:A Random number betwen #N$00-#N$FF
@label=ContextualRandomNumber
c$7088 CALL $6400    ; {#REGe=random number between #N$00-#N$FF.
 $708B LD E,A        ; }
 $708C LD A,H        ; Get the seed number.
@label=CheckSeedNumber
*$708D CP $9F        ; {Jump to #R$709B if the seed number in #REGh is lower
 $708F JR C,$709B    ; than #N$9F.}
 $7091 JR Z,$7097    ; Jump to #R$7097 if the seed number in #REGh is equal to
                     ; #N$9F.
; Else, subtract #N$05 and loop back to try again.
 $7093 SUB $05       ; Subtract #N$05 from the seed number.
 $7095 JR $708D      ; Jump back to #R$708D.
; Return either #N$00 or #N$01 using bit 0 of the random number.
@label=ReturnBoolean
*$7097 LD A,E        ; {#REGa=bit 0 of the random number stored in #REGe (ensure it is
 $7098 AND %00000001 ; either #N$00 or #N$01).}
 $709A RET           ; Return.
; Just return the full random number between #N$00-#N$FF.
@label=ReturnFullValue
*$709B LD A,E        ; #REGa=the random number stored in #REGe.
 $709C RET           ; Return.

; Routine at 709D
;
; Used by the routine at #R$72C3.
c$709D LD C,(HL)     ;
 $709E BIT 7,C       ;
 $70A0 RET NZ        ;
 $70A1 INC L         ;
 $70A2 DEC (HL)      ;
 $70A3 RET NZ        ;
 $70A4 LD A,C        ;
 $70A5 AND $0F       ;
 $70A7 LD (HL),A     ;
 $70A8 INC L         ;
 $70A9 DEC (HL)      ;
 $70AA JR NZ,$70AE   ;
 $70AC LD (HL),$0E   ;
*$70AE LD A,C        ;
 $70AF RLCA          ;
 $70B0 RLCA          ;
 $70B1 SBC A,A       ;
 $70B2 BIT 5,C       ;
 $70B4 JR Z,$70B7    ;
 $70B6 INC A         ;
*$70B7 INC L         ;
 $70B8 ADD A,(HL)    ;
 $70B9 LD B,A        ;
 $70BA CP $08        ;
 $70BC JR NC,$70FF   ;
 $70BE INC L         ;
 $70BF LD E,(HL)     ;
 $70C0 LD D,$BB      ;
 $70C2 LD A,(DE)     ;
 $70C3 ADD A,B       ;
 $70C4 LD E,A        ;
 $70C5 LD D,$C3      ;
 $70C7 LD A,(DE)     ;
 $70C8 BIT 5,A       ;
 $70CA JR Z,$70EB    ;
 $70CC INC L         ;
*$70CD LD A,(HL)     ;
 $70CE XOR $80       ;
 $70D0 LD (HL),A     ;
 $70D1 DEC L         ;
 $70D2 LD E,(HL)     ;
 $70D3 INC E         ;
 $70D4 LD D,$BB      ;
 $70D6 LD A,(DE)     ;
 $70D7 AND $3F       ;
 $70D9 LD E,A        ;
 $70DA ADD A,A       ;
 $70DB ADD A,A       ;
 $70DC INC A         ;
 $70DD LD (HL),A     ;
 $70DE LD A,$60      ;
 $70E0 XOR C         ;
 $70E1 LD C,A        ;
 $70E2 DEC L         ;
 $70E3 DEC L         ;
 $70E4 DEC L         ;
 $70E5 DEC L         ;
 $70E6 LD (HL),C     ;
 $70E7 INC L         ;
 $70E8 INC L         ;
 $70E9 JR $70AE      ;
*$70EB DEC L         ;
 $70EC LD (HL),B     ;
*$70ED INC L         ;
 $70EE INC L         ;
 $70EF RLCA          ;
 $70F0 JR NC,$70F3   ;
 $70F2 DEC (HL)      ;
*$70F3 RLCA          ;
 $70F4 JR NC,$70F7   ;
 $70F6 INC (HL)      ;
*$70F7 RES 4,(HL)    ;
 $70F9 RLCA          ;
 $70FA AND $10       ;
 $70FC OR (HL)       ;
 $70FD LD (HL),A     ;
 $70FE RET           ;
*$70FF INC L         ;
 $7100 INC L         ;
 $7101 INC L         ;
 $7102 LD A,(HL)     ;
 $7103 DEC L         ;
 $7104 AND $1F       ;
 $7106 CP $1E        ;
 $7108 JR NZ,$710E   ;
 $710A BIT 7,B       ;
 $710C JR Z,$70CD    ;
*$710E CP $08        ;
 $7110 JR NZ,$7116   ;
 $7112 BIT 7,B       ;
 $7114 JR NZ,$70CD   ;
*$7116 LD E,$01      ;
 $7118 INC L         ;
 $7119 INC (HL)      ;
 $711A LD A,B        ;
 $711B RLCA          ;
 $711C JR NC,$7122   ;
 $711E DEC (HL)      ;
 $711F DEC (HL)      ;
 $7120 LD E,$04      ;
*$7122 DEC L         ;
 $7123 DEC L         ;
 $7124 DEC L         ;
 $7125 AND $07       ;
 $7127 LD (HL),A     ;
 $7128 LD B,A        ;
 $7129 INC L         ;
 $712A PUSH HL       ;
 $712B LD C,(HL)     ;
 $712C INC C         ;
 $712D LD B,$BB      ;
 $712F LD A,(BC)     ;
 $7130 INC L         ;
 $7131 INC L         ;
 $7132 INC L         ;
 $7133 RLCA          ;
 $7134 JR C,$713B    ;
 $7136 INC E         ;
 $7137 INC (HL)      ;
 $7138 RLCA          ;
 $7139 JR C,$713D    ;
*$713B DEC E         ;
 $713C DEC (HL)      ;
*$713D LD A,E        ;
 $713E ADD A,A       ;
 $713F ADD A,E       ;
 $7140 LD E,A        ;
 $7141 LD A,(HL)     ;
 $7142 DEC L         ;
 $7143 LD L,(HL)     ;
 $7144 LD H,A        ;
 $7145 CALL $6400    ;
 $7148 AND $0C       ;
 $714A JR Z,$714E    ;
 $714C XOR $0C       ;
*$714E CALL $699A    ;
 $7151 POP DE        ;
 $7152 EX DE,HL      ;
 $7153 INC E         ;
 $7154 LD (HL),E     ;
 $7155 LD A,(DE)     ;
 $7156 DEC L         ;
 $7157 ADD A,(HL)    ;
 $7158 LD E,A        ;
 $7159 LD D,$C3      ;
 $715B LD A,(DE)     ;
 $715C JR $70ED      ;
 $715E NOP           ;
 $715F NOP           ;
 $7160 NOP           ;

; Check Demo Mode
;
; Used by the routine at #R$763C.
@label=Check_DemoMode
c$7161 CALL $7535    ; Call #R$7535.
 $7164 JP $6ED4      ; Jump to #R$6ED4.

; Unused
u$7167 DEFB $00,$00,$00,$00,$00,$00,$00

; Routine at 716E
;
; Used by the routine at #R$7311.
c$716E LD A,($7817)  ;
 $7171 ADD A,A       ;
 $7172 ADD A,A       ;
 $7173 ADD A,A       ;
 $7174 LD C,A        ;
 $7175 LD A,($7819)  ;
 $7178 ADD A,C       ;
 $7179 LD C,A        ;
 $717A LD HL,($783E) ;
 $717D LD B,$08      ;
*$717F LD A,(HL)     ;
 $7180 INC L         ;
 $7181 INC L         ;
 $7182 LD D,(HL)     ;
 $7183 INC L         ;
 $7184 LD E,(HL)     ;
 $7185 INC L         ;
 $7186 INC L         ;
 $7187 INC L         ;
 $7188 RLCA          ;
 $7189 JR C,$71F3    ;
 $718B LD A,(HL)     ;
 $718C ADD A,A       ;
 $718D ADD A,A       ;
 $718E ADD A,A       ;
 $718F ADD A,E       ;
 $7190 SUB C         ;
 $7191 JR NC,$7198   ;
 $7193 CP $FD        ;
 $7195 CCF           ;
 $7196 JR $719A      ;
*$7198 CP $44        ;
*$719A JR NC,$71F3   ;
 $719C PUSH BC       ;
 $719D PUSH HL       ;
 $719E SRA A         ;
 $71A0 LD E,A        ;
 $71A1 ADC A,$90     ;
 $71A3 SUB E         ;
 $71A4 LD B,A        ;
 $71A5 DEC L         ;
 $71A6 LD A,(HL)     ;
 $71A7 DEC D         ;
 $71A8 LD L,A        ;
 $71A9 AND $E0       ;
 $71AB RLA           ;
 $71AC JR NC,$71B0   ;
 $71AE SET 6,B       ;
*$71B0 RLCA          ;
 $71B1 RLCA          ;
 $71B2 LD C,A        ;
 $71B3 RLCA          ;
 $71B4 RLCA          ;
 $71B5 OR B          ;
 $71B6 LD B,A        ;
 $71B7 LD A,C        ;
 $71B8 LD C,$43      ;
 $71BA AND A         ;
 $71BB JR Z,$71D3    ;
 $71BD DEC C         ;
 $71BE CP $02        ;
 $71C0 JR Z,$71D3    ;
 $71C2 LD C,$45      ;
 $71C4 DEC A         ;
 $71C5 JR Z,$71DB    ;
 $71C7 INC C         ;
 $71C8 LD A,D        ;
 $71C9 CP $06        ;
 $71CB JR C,$71DB    ;
 $71CD AND $03       ;
 $71CF ADD A,$02     ;
 $71D1 JR $71DB      ;
*$71D3 LD A,D        ;
 $71D4 CP $08        ;
 $71D6 JR C,$71DB    ;
 $71D8 CPL           ;
 $71D9 SUB $F1       ;
*$71DB BIT 4,L       ;
 $71DD JR Z,$71E0    ;
 $71DF INC A         ;
*$71E0 SRL A         ;
 $71E2 JR NC,$71E6   ;
 $71E4 INC B         ;
 $71E5 INC B         ;
*$71E6 LD H,A        ;
 $71E7 LD A,L        ;
 $71E8 AND $0F       ;
 $71EA SUB H         ;
 $71EB LD D,A        ;
 $71EC LD A,B        ;
 $71ED DEC A         ;
 $71EE CALL $76D7    ;
 $71F1 POP HL        ;
 $71F2 POP BC        ;
*$71F3 INC L         ;
 $71F4 INC L         ;
 $71F5 DJNZ $717F    ;
 $71F7 RET           ;

; Unused
u$71F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Initialise New Level
;
; Used by the routine at #R$6500.
@label=InitialiseNewLevel
c$7200 LD HL,$7820   ; #REGhl=#R$7820.
 $7203 LD A,(HL)     ; {Jump to #R$720A if the current level is equal to #N$07.
 $7204 CP $07        ; After level #N$07 the game just repeats this level.
 $7206 JR Z,$720A    ; }
; Increments both #R$7820 and #REGa as we use this as an offset for pointing to
; the level data.
 $7208 INC (HL)      ; Increment *#REGhl by one.
 $7209 INC A         ; Increment #REGa by one.
; #TABLE(default,centre,centre)
; { =h Level | =h Data }
; { #N$00 | #R$E600 }
; { #N$01 | #R$E640 }
; { #N$02 | #R$E680 }
; { #N$03 | #R$E6C0 }
; { #N$04 | #R$E700 }
; { #N$05 | #R$E740 }
; { #N$06 | #R$E780 }
; { #N$07 | #R$E7C0 }
; TABLE#
@label=InitialiseLevelTodo
*$720A RRCA          ; {Rotate #REGa right two positions (bits 2 to 5 are now
 $720B RRCA          ; in positions 0 to 3) using the carry flag.}
 $720C LD L,A        ; #REGl=#REGa.
 $720D AND %00000011 ; Keep only bits 0-1.
 $720F ADD A,$E6     ; #REGa+=#N$E6.
 $7211 LD H,A        ; #REGh=#REGa.
 $7212 LD A,L        ; #REGa=#REGl.
 $7213 AND %11000000 ; Keep only bits 6-7.
 $7215 LD L,A        ; #REGl=#REGa.
 $7216 LD A,$0A      ; #REGa=#N$0A (counter).
 $7218 NOP           ; No operation.
 $7219 LD DE,$FA40   ; #REGde=#R$FA40.
*$721C PUSH HL       ; Stash #REGhl on the stack.
 $721D LD BC,$0040   ; #REGbc=#N($0040,$04,$04).
 $7220 LDIR          ; Copy #N($0040,$04,$04) bytes of data from *#REGhl to
                     ; *#REGde.
 $7222 POP HL        ; Restore #REGhl from the stack.
 $7223 DEC A         ; Decrease #REGa by one.
 $7224 JR NZ,$721C   ; Jump to #R$721C until #REGa is zero.
 $7226 LD H,A        ; #REGh=#REGa.
 $7227 LD B,$08      ; #REGb=#N$08.
 $7229 LD L,B        ; #REGl=#REGb.
 $722A EX DE,HL      ; Exchange the #REGde and #REGhl registers.
*$722B LD (HL),H     ; Write #REGh to *#REGhl.
 $722C ADD HL,DE     ; #REGhl+=#REGde.
 $722D DJNZ $722B    ; Decrease counter by one and loop back to #R$722B until
                     ; counter is zero.
 $722F LD B,E        ; #REGb=#REGe.
 $7230 LD H,$FA      ; #REGh=#N$FA.
*$7232 LD (HL),H     ; Write #REGh to *#REGhl.
 $7233 ADD HL,DE     ; #REGhl+=#REGde.
 $7234 DJNZ $7232    ; Decrease counter by one and loop back to #R$7232 until
                     ; counter is zero.
 $7236 LD B,E        ; #REGb=#REGe.
 $7237 LD E,$10      ; #REGe=#N$10.
*$7239 LD (HL),H     ; Write #REGh to *#REGhl.
 $723A ADD HL,DE     ; #REGhl+=#REGde.
 $723B DJNZ $7239    ; Decrease counter by one and loop back to #R$7239 until
                     ; counter is zero.
 $723D EXX           ; Switch to the shadow registers.
 $723E LD BC,$FA46   ; #REGbc'=#N$FA46.
 $7241 EXX           ; Switch back to the normal registers.
 $7242 LD DE,$9F20   ; #REGde=#R$9F20.
 $7245 LD B,$0A      ; #REGb=#N$0A.
*$7247 PUSH BC       ; Stash #REGbc on the stack.
 $7248 LD B,$08      ; #REGb=#N$08.
*$724A CALL $6400    ; {#REGa=random number between #N$00-#N$1F.
 $724D AND %00011111 ; }
 $724F CP $1F        ; {Jump to #R$724A if #REGa is equal to #N$1F.
 $7251 JR Z,$724A    ; }
 $7253 CP $08        ; {Jump to #R$724A if #REGa is lower than #N$08.
 $7255 JR C,$724A    ; }
 $7257 LD L,A        ; #REGl=#REGa.
 $7258 CALL $6400    ; {#REGh=random number between #N$00-#N$03.
 $725B AND %00000011 ;
 $725D LD H,A        ; }
 $725E ADD HL,DE     ; #REGhl+=#REGde.
 $725F LD A,(HL)     ; #REGa=*#REGhl.
 $7260 DEC A         ; Decrease #REGa by one.
 $7261 JR Z,$726B    ; Jump to #R$726B if #REGa is zero.
 $7263 CP $31        ; {Jump to #R$724A if #REGa is higher than #N$31.
 $7265 JR NC,$724A   ; }
 $7267 CP $2D        ; {Jump to #R$724A if #REGa is lower than #N$2D.
 $7269 JR C,$724A    ; }
*$726B PUSH HL       ; Stash #REGhl on the stack.
 $726C EXX           ; Switch to the shadow registers.
 $726D LD H,B        ; #REGh=#REGb.
 $726E LD L,C        ; #REGl=#REGc.
 $726F POP DE        ; Restore #REGde from the stack.
*$7270 LD A,(HL)     ; #REGa=*#REGhl.
 $7271 AND A         ; {Jump to #R$7284 if #REGa is zero.
 $7272 JR Z,$7284    ; }
 $7274 INC L         ; Increment #REGl by one.
 $7275 CP E          ; {Jump to #R$727E if #REGa is not equal to #REGe.
 $7276 JR NZ,$727E   ; }
 $7278 LD A,(HL)     ; #REGa=*#REGhl.
 $7279 CP D          ; Compare #REGa with #REGd.
 $727A EXX           ; Switch to the shadow registers.
 $727B JR Z,$724A    ; Jump to #R$724A if {} is zero.
 $727D EXX           ; Switch to the shadow registers.
*$727E LD A,L        ; {#REGl+=#N$07.
 $727F ADD A,$07     ;
 $7281 LD L,A        ; }
 $7282 JR $7270      ; Jump to #R$7270.
*$7284 LD (HL),E     ; Write #REGe to *#REGhl.
 $7285 INC L         ; Increment #REGl by one.
 $7286 LD (HL),D     ; Write #REGd to *#REGhl.
 $7287 EXX           ; Switch to the shadow registers.
 $7288 DJNZ $724A    ; Decrease counter by one and loop back to #R$724A until
                     ; counter is zero.
 $728A EXX           ; Switch to the shadow registers.
 $728B LD HL,$0040   ; #REGhl=#N($0040,$04,$04).
 $728E ADD HL,BC     ; #REGhl+=#REGbc.
 $728F LD B,H        ; #REGb=#REGh.
 $7290 LD C,L        ; #REGc=#REGl.
 $7291 EXX           ; Switch to the shadow registers.
 $7292 LD A,E        ; {#REGe+=#N$20.
 $7293 ADD A,$20     ;
 $7295 LD E,A        ; }
 $7296 JR NZ,$729C   ; Jump to #R$729C if #REGe is not zero.
 $7298 LD A,D        ; {#REGd+=#N$05.
 $7299 ADD A,$05     ;
 $729B LD D,A        ; }
*$729C POP BC        ; Restore #REGbc from the stack.
 $729D DJNZ $7247    ; Decrease counter by one and loop back to #R$7247 until
                     ; counter is zero.
 $729F CALL $74DC    ; Call #R$74DC.
 $72A2 LD HL,$3280   ; #REGhl=#N$3280.
; See #R$E800.
 $72A5 LD A,($782D)  ; {Jump to #R$72AE if the game is in "demo mode" (the
 $72A8 CP $73        ; high-order byte of #R$782C contains #R$73B7(#N$73)).
 $72AA JR Z,$72AE    ; }
 $72AC LD H,$0B      ; #REGh=#N$0B.
@label=InitialiseNewLevel_InDemoMode
*$72AE NOP           ; {No operation.
 $72AF NOP           ; }
 $72B0 LD ($7841),HL ; Write #REGhl to *#R$7841.
 $72B3 XOR A         ; {Write #N$00 to *#R$7840.
 $72B4 LD ($7840),A  ; }
 $72B7 JP $7396      ; Jump to #R$7396.

; Unused
u$72BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $72C2 DEFB $00

; Routine at 72C3
;
; Used by the routine at #R$6C00.
c$72C3 LD A,($7840)  ; {Jump to #R$72E2 if *#R$7840 is zero.
 $72C6 AND A         ;
 $72C7 JR Z,$72E2    ; }
 $72C9 LD HL,$7843   ; #REGhl=#R$7843.
 $72CC DEC (HL)      ; Decrease *#REGhl by one.
 $72CD JR NZ,$72E2   ; Jump to #R$72E2 if *#REGhl is not zero.
 $72CF LD (HL),$03   ; Write #N$03 to *#REGhl.
 $72D1 LD HL,($7841) ; #REGhl=*#R$7841.
 $72D4 DEC HL        ; Decrease #REGhl by one.
 $72D5 LD ($7841),HL ; Write #REGhl to *#R$7841.
 $72D8 LD A,H        ; {Jump to #R$72E2 if #REGh is not zero.
 $72D9 AND A         ;
 $72DA JR NZ,$72E2   ; }
 $72DC LD A,L        ; {Call #R$77E0 if #REGl is equal to #N$80.
 $72DD CP $80        ;
 $72DF CALL Z,$77E0  ; }
*$72E2 LD HL,($7817) ; #REGhl=*#R$7817.
 $72E5 LD A,H        ; #REGa=#REGh.
 $72E6 SUB $99       ; #REGa-=#N$99.
 $72E8 LD B,$FE      ; #REGb=#N$FE.
*$72EA INC B         ; {Increment #REGb by two.
 $72EB INC B         ; }
 $72EC SUB $05       ; #REGa-=#N$05.
 $72EE JR NZ,$72EA   ; Jump to #R$72EA if #REGa is not zero.
 $72F0 LD A,L        ; #REGa=#REGl.
 $72F1 AND %11100000 ; Keep only bits 5-7.
 $72F3 ADD A,A       ; #REGa+=#REGa.
 $72F4 LD L,A        ; #REGl=#REGa.
 $72F5 ADC A,B       ; #REGa+=#REGb.
 $72F6 SUB L         ; #REGa-=#REGl.
 $72F7 ADD A,$FA     ; #REGa+=#N$FA.
 $72F9 LD H,A        ; #REGh=#REGa.
 $72FA CALL $E84D    ; Call #R$E84D.
 $72FD LD B,$08      ; #REGb=#N$08.
*$72FF PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $7300 PUSH BC       ; }
 $7301 CALL $709D    ; Call #R$709D.
 $7304 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $7305 POP HL        ; }
 $7306 LD DE,$0008   ; #REGde=#N($0008,$04,$04).
 $7309 ADD HL,DE     ; #REGhl+=#REGde.
 $730A DJNZ $72FF    ; Decrease counter by one and loop back to #R$72FF until
                     ; counter is zero.
 $730C RET           ; Return.

; Unused
u$730D DEFB $00,$00,$00,$00

; Routine at 7311
;
; Used by the routine at #R$6C00.
c$7311 CALL $6B2D    ; Call #R$6B2D.
; This entry point is used by the routine at #R$76D7.
*$7314 CALL $716E    ; Call #R$716E.
 $7317 LD HL,($7817) ; #REGhl=*#R$7817.
 $731A LD A,L        ; #REGa=#REGl.
 $731B RLCA          ; {RLCA.
 $731C RLCA          ;
 $731D RLCA          ; }
 $731E LD L,A        ; #REGl=#REGa.
 $731F AND %00000111 ; Keep only bits 0-2.
 $7321 LD B,A        ; #REGb=#REGa.
 $7322 LD A,L        ; #REGa=#REGl.
 $7323 AND %11111000 ; Keep only bits 3-7.
 $7325 LD L,A        ; #REGl=#REGa.
 $7326 LD A,($7819)  ; #REGa=*#R$7819.
 $7329 ADD A,L       ; #REGa+=#REGl.
 $732A LD L,A        ; #REGl=#REGa.
 $732B LD A,H        ; #REGa=#REGh.
 $732C LD H,$F8      ; #REGh=#N$F8.
 $732E LD DE,$0800   ; #REGde=#N$0800.
 $7331 SUB $99       ; #REGa-=#N$99.
*$7333 ADD HL,DE     ; #REGhl+=#REGde.
 $7334 SUB $05       ; #REGa-=#N$05.
 $7336 JR NZ,$7333   ; Jump to #R$7333 if #REGa is not zero.
 $7338 LD A,H        ; #REGa=#REGh.
 $7339 ADD A,B       ; #REGa+=#REGb.
 $733A LD H,A        ; #REGh=#REGa.
 $733B PUSH HL       ; Stash #REGhl on the stack.
 $733C LD DE,$0008   ; #REGde=#N($0008,$04,$04).
 $733F SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $7341 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $7342 LD HL,($7841) ; #REGhl=*#R$7841.
 $7345 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $7347 LD A,H        ; {Jump to #R$736C if #REGh is not zero.
 $7348 AND A         ;
 $7349 JR NZ,$736C   ; }
 $734B LD A,L        ; #REGa=#REGl.
 $734C CP $50        ; {Jump to #R$736C if #REGa is higher than #N$50.
 $734E JR NC,$736C   ; }
 $7350 SUB $08       ; #REGa-=#N$08.
 $7352 SRA A         ;
 $7354 LD C,$44      ; #REGc=#COLOUR$44.
 $7356 LD E,A        ; #REGe=#REGa.
 $7357 LD D,$0B      ; #REGd=#N$0B.
 $7359 LD A,$00      ; #REGa=#N$00.
 $735B ADC A,$00     ;
 $735D CALL $76D7    ; Call #R$76D7.
 $7360 LD A,($7825)  ; {Jump to #R$736C if *#R$7825 is not equal to #N$44.
 $7363 CP $44        ;
 $7365 JR NZ,$736C   ; }
 $7367 LD A,$01      ; {Write #N$01 to *#R$7840.
 $7369 LD ($7840),A  ; }
*$736C POP HL        ; Restore #REGhl from the stack.
 $736D LD A,($7840)  ; {Return if *#R$7840 is zero.
 $7370 AND A         ;
 $7371 RET Z         ; }
 $7372 LD A,H        ; {Return if #REGh is not zero.
 $7373 AND A         ;
 $7374 RET NZ        ; }
 $7375 LD A,L        ; {Return if #REGl is higher than #N$80.
 $7376 CP $80        ;
 $7378 RET NC        ; }
 $7379 LD A,$80      ; #REGa=#N$80.
 $737B SUB L         ; #REGa-=#REGl.
 $737C NOP           ; {No operation.
 $737D NOP           ;
 $737E NOP           ;
 $737F NOP           ;
 $7380 NOP           ; }
 $7381 LD C,$47      ; #REGc=#N$47.
 $7383 LD D,$0B      ; #REGd=#N$0B.
 $7385 SRA A         ;
 $7387 LD E,A        ; #REGe=#REGa.
 $7388 LD A,$40      ; #REGa=#N$40.
 $738A ADC A,$00     ;
 $738C CALL $76D7    ; Call #R$76D7.
 $738F RET           ; Return.

; Unused
u$7390 DEFB $00,$00,$00,$00,$00,$00

; Routine at 7396
;
; Used by the routine at #R$7200.
c$7396 LD HL,$FA47   ; #REGhl=#R$FA47.
 $7399 LD B,$50      ; #REGb=#N$50.
*$739B LD A,(HL)     ; #REGa=*#REGhl.
 $739C DEC L         ; {Decrease #REGl by two.
 $739D DEC L         ; }
 $739E SUB $9A       ; #REGa-=#N$9A.
*$73A0 SUB $05       ; #REGa-=#N$05.
 $73A2 JR NC,$73A0   ; Jump to #R$73A0 if {} is higher.
 $73A4 ADD A,$06     ; #REGa+=#N$06.
 $73A6 CP $05        ; {Jump to #R$73AF if #REGa is equal to #N$05.
 $73A8 JR Z,$73AF    ; }
 $73AA ADD A,A       ; #REGa+=#REGa.
 $73AB ADD A,A       ; #REGa+=#REGa.
 $73AC DEC A         ; Decrease #REGa by one.
 $73AD ADD A,(HL)    ; #REGa+=*#REGhl.
 $73AE LD (HL),A     ; Write #REGa to *#REGhl.
*$73AF LD DE,$000A   ; #REGde=#N($000A,$04,$04).
 $73B2 ADD HL,DE     ; #REGhl+=#REGde.
 $73B3 DJNZ $739B    ; Decrease counter by one and loop back to #R$739B until
                     ; counter is zero.
 $73B5 RET           ; Return.

; Unused
u$73B6 DEFB $03

; Demo Mode Input
;
; Input method; used by the routine at #R$6B48.
;
; .
;
; In demo mode, we never let the game run out of fuel or lives.
@label=DemoModeInput
c$73B7 LD A,$04      ; {Write #N$04 to *#R$7839.
 $73B9 LD ($7839),A  ; }
 $73BC LD HL,$3400   ; {Write #N$3400 to *#R$783C.
 $73BF LD ($783C),HL ; }
 $73C2 CALL $6828    ; Call #R$6828.
 $73C5 AND A         ; {Jump to #R$73D1 if no keys are being pressed.
 $73C6 JR Z,$73D1    ; }
 $73C8 NOP           ; {No operation.
 $73C9 NOP           ;
 $73CA NOP           ;
 $73CB NOP           ;
 $73CC NOP           ;
 $73CD NOP           ; }
; Any input jumps back to the start screen.
 $73CE JP $E81B      ; Jump to #R$E81B.
; Randomly send controls for the game.
@label=DemoModeControls
*$73D1 CALL $6400    ; Call #R$6400.
 $73D4 AND %00001100 ; {Ensure the random number is either #N$04#RAW(,) #N$08
 $73D6 JR Z,$73D1    ; or #N$0C.}
 $73D8 XOR %00001100 ; Flip bits 2-3 so #N$04 becomes #N$08#RAW(,) #N$08
                     ; becomes #N$04 and #N$0C becomes #N$00.
 $73DA LD HL,($7831) ; #REGhl=*#R$7831.
 $73DD INC L         ; {Increment #REGl by three.
 $73DE INC L         ;
 $73DF INC L         ; }
 $73E0 LD D,A        ; #REGd=#REGa.
 $73E1 LD A,($7822)  ; #REGa=*#R$7822.
 $73E4 CP (HL)       ; Compare #REGa with *#REGhl.
 $73E5 LD A,$00      ; #REGa=#N$00.
 $73E7 JR Z,$73EF    ; Jump to #R$73EF if #REGa was equal to *#REGhl on line
                     ; #R$73E4.
 $73E9 JR C,$73ED    ; Jump to #R$73ED if #REGa was lower than *#REGhl on line
                     ; #R$73E4.
 $73EB LD A,$03      ; #REGa=#N$03.
*$73ED XOR %00000001 ; Flip bits 0.
*$73EF OR D          ; Set the bits from #REGd.
 $73F0 RET           ; Return.

; Unused
u$73F1 DEFB $00

; Routine at 73F2
;
; Used by the routine at #R$691B.
c$73F2 LD A,($7825)  ; #REGa=*#R$7825.
 $73F5 AND A         ; {Return if #REGa is not zero.
 $73F6 RET NZ        ; }
 $73F7 LD HL,$FFF8   ; #REGhl=#R$FFF8.
 $73FA ADD HL,BC     ; #REGhl+=#REGbc.
 $73FB EXX           ; Switch to the shadow registers.
 $73FC LD A,L        ; {#REGl'-=#N$07.
 $73FD SUB $07       ;
 $73FF LD L,A        ; }
 $7400 SBC A,A       ; #REGa-=#REGa.
 $7401 ADD A,H       ; #REGa+=#REGh'.
 $7402 LD H,A        ; #REGh'=#REGa.
 $7403 LD DE,$0400   ; #REGde'=#N$0400.
*$7406 LD A,(HL)     ; #REGa=*#REGhl'.
 $7407 EXX           ; Switch back to the normal registers.
 $7408 OR (HL)       ; Set the bits from *#REGhl.
 $7409 XOR (HL)      ; Flip the bits according to *#REGhl.
 $740A INC HL        ; {Increment #REGhl by two.
 $740B INC HL        ; }
 $740C EXX           ; Switch to the shadow registers.
 $740D CP (HL)       ; {Jump to #R$7411 if #REGa is equal to *#REGhl'.
 $740E JR Z,$7411    ; }
 $7410 INC E         ; Increment #REGe' by one.
*$7411 INC HL        ; Increment #REGhl' by one.
 $7412 DEC D         ; Decrease #REGd' by one.
 $7413 JR NZ,$7406   ; Jump to #R$7406 if #REGd' is not zero.
 $7415 INC HL        ; {Increment #REGhl' by three.
 $7416 INC HL        ;
 $7417 INC HL        ; }
 $7418 LD A,E        ; #REGa=#REGe'.
 $7419 LD ($7825),A  ; Write #REGa to *#R$7825.
 $741C EXX           ; Switch back to the normal registers.
 $741D RET           ; Return.

; Unused
u$741E DEFB $00,$00

; Update Score Display
;
; Used by the routines at #R$757E, #R$763C and #R$76D7.
;
; .
;
; Convert the 16-bit into a five digit score using two's complement.
@label=UpdateScoreDisplay
c$7420 LD HL,($7844) ; #REGhl=*#R$7844.
 $7423 LD DE,($7846) ; #REGde=*#R$7846.
 $7427 AND A         ; {Return if the players score is the same as the stored
 $7428 SBC HL,DE     ; highscore.
 $742A RET Z         ; }
 $742B ADD HL,DE     ; Restore the original players score value.
; This entry point is used by the routine at #R$75AA.
@label=ForceScoreUpdate
*$742C LD ($7846),HL ; Update the stored *#R$7846 value.
 $742F EXX           ; Switch to the shadow registers.
 $7430 LD DE,$51C6   ; Set the screen buffer position for the score display.
 $7433 EXX           ; Switch back to the normal registers.
; This entry point is used by the routines at #R$757E and #R$75AA.
@label=ConvertScoreToDigits
*$7434 LD DE,$784B   ; #REGde=#R$784B.
; Convert the binary score to decimal using the repeated subtraction
; method.
; .
; Calculate the tens of thousands digit.
 $7437 LD BC,$D810   ; #REGbc=-10,000 (it's technically -10,224 which is probably a
                     ; mistake).
 $743A LD A,$FF      ; Set the digit counter in #REGa to -01.
@label=ExtractTenThousands_Loop
*$743C INC A         ; Increment the digit counter by one.
 $743D ADD HL,BC     ; Subtract 10,000 from the score.
 $743E JR C,$743C    ; Jump back to #R$743C if the result is still positive.
 $7440 SBC HL,BC     ; Restore the valid remainder.
 $7442 LD (DE),A     ; Store the count to the score buffer in *#REGde.
 $7443 INC E         ; Move to the next score digit position.
; Calculate the thousands digit.
 $7444 LD BC,$FC18   ; #REGbc=-1,000.
 $7447 LD A,$FF      ; Set the digit counter in #REGa to -01.
@label=ExtractThousands_Loop
*$7449 INC A         ; Increment the digit counter by one.
 $744A ADD HL,BC     ; Subtract 1,000 from the score remainder.
 $744B JR C,$7449    ; Jump back to #R$7449 if the result is still positive.
 $744D SBC HL,BC     ; Restore the valid remainder.
 $744F LD (DE),A     ; Store the count to the score buffer in *#REGde.
 $7450 INC E         ; Move to the next score digit position.
; Calculate the hundreds digit.
 $7451 LD BC,$FF9C   ; #REGbc=-100.
 $7454 LD A,$FF      ; Set the digit counter in #REGa to -01.
@label=ExtractHundreds_Loop
*$7456 INC A         ; Increment the digit counter by one.
 $7457 ADD HL,BC     ; Subtract 100 from the score remainder.
 $7458 JR C,$7456    ; Jump back to #R$7456 if the result is still positive.
 $745A SBC HL,BC     ; Restore the valid remainder.
 $745C LD (DE),A     ; Store the count to the score buffer in *#REGde.
 $745D INC E         ; Move to the next score digit position.
; Calculate the tens digit.
 $745E LD C,$F6      ; #REGc=-10.
 $7460 LD A,$FF      ; Set the digit counter in #REGa to -01.
@label=ExtractTens_Loop
*$7462 INC A         ; Increment the digit counter by one.
 $7463 ADD HL,BC     ; Subtract 10 from the score remainder.
 $7464 JR C,$7462    ; Jump back to #R$7462 if the result is still positive.
 $7466 LD (DE),A     ; Store the count to the score buffer in *#REGde.
 $7467 INC E         ; Move to the next score digit position.
; Store the units digit.
 $7468 LD A,L        ; Get the final remainder.
 $7469 ADD A,$0A     ; Compensate for the last subtraction.
 $746B LD (DE),A     ; Store the result to the score buffer in *#REGde.
 $746C EXX           ; Switch to the shadow registers.
 $746D LD BC,$784B   ; #REGbc'=#R$784B.
; #HTML(Work out the ZX Spectrum ROM location of the number UDG, e.g. "1" would be
; <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html#3d89">#N$3D89</a>.)
; .
; This calculation avoids the whitespace at the top and bottom of the ROM UDG; in the code below you'll see it
; only copies six bytes/ lines.
@label=PrintScoreDigit_Loop
*$7470 LD A,(BC)     ; Fetch the score digit value.
; Calculate the ZX Spectrum ROM font address:
; #N$3D00 + (digit * #N$08) + #N$01.
 $7471 ADD A,A       ; {#REGl'=#N$81+(#REGa*#N$08).
 $7472 ADD A,A       ;
 $7473 ADD A,A       ;
 $7474 ADD A,$81     ;
 $7476 LD L,A        ; }
 $7477 LD H,$3D      ; #HTML(#REGh'=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3D</a>.)
; Copy #N$06 lines of font character data (skipping top and bottom whitespace).
 $7479 LD A,(HL)     ; {Copy a number UDG byte line from the Spectum ROM
 $747A LD (DE),A     ; (*#REGhl') to the screen buffer (*#REGde').}
 $747B INC L         ; Move to the next font line.
 $747C INC D         ; Move down one row in the screen buffer.
 $747D LD A,(HL)     ; {Copy a number UDG byte line from the Spectum ROM
 $747E LD (DE),A     ; (*#REGhl') to the screen buffer (*#REGde').}
 $747F INC L         ; Move to the next font line.
 $7480 INC D         ; Move down one row in the screen buffer.
 $7481 LD A,(HL)     ; {Copy a number UDG byte line from the Spectum ROM
 $7482 LD (DE),A     ; (*#REGhl') to the screen buffer (*#REGde').}
 $7483 INC L         ; Move to the next font line.
 $7484 INC D         ; Move down one row in the screen buffer.
 $7485 LD A,(HL)     ; {Copy a number UDG byte line from the Spectum ROM
 $7486 LD (DE),A     ; (*#REGhl') to the screen buffer (*#REGde').}
 $7487 INC L         ; Move to the next font line.
 $7488 INC D         ; Move down one row in the screen buffer.
 $7489 LD A,(HL)     ; {Copy a number UDG byte line from the Spectum ROM
 $748A LD (DE),A     ; (*#REGhl') to the screen buffer (*#REGde').}
 $748B INC L         ; Move to the next font line.
 $748C INC D         ; Move down one row in the screen buffer.
 $748D LD A,(HL)     ; {Copy a number UDG byte line from the Spectum ROM
 $748E LD (DE),A     ; (*#REGhl') to the screen buffer (*#REGde').}
; Reset the screen buffer position.
 $748F LD D,$51      ; #REGd'=#N$51.
 $7491 INC E         ; Move right one character block in the screen buffer,
                     ; ready to print the next number.
 $7492 INC C         ; Move to the next digit in the score display buffer.
 $7493 BIT 3,C       ; {Jump back to #R$7470 until all the digits have been
 $7495 JR NZ,$7470   ; printed.}
 $7497 EXX           ; Switch back to the normal registers.
 $7498 RET           ; Return.

; Unused
u$7499 DEFB $00,$00,$00

; Clear Screen
;
; Used by the routines at #R$75AA, #R$E80E, #R$EBE3 and #R$ECAB.
@label=ClearScreen
c$749C LD HL,$4000   ; #REGhl=#R$4000(#N$4000) (screen buffer location).
 $749F LD (HL),L     ; Write #N$00 to *#REGhl.
 $74A0 LD BC,$1B00   ; #REGbc=#N$1B00.
 $74A3 LD D,H        ; {#REGde=#REGhl+#N$01.
 $74A4 LD E,L        ;
 $74A5 INC E         ; }
 $74A6 LDIR          ; Copy #N$00 across both the screen and attribute buffers.
 $74A8 RET           ; Return.

; Unused
u$74A9 DEFB $D9

; Print Graphic
;
; Used by the routines at #R$754F, #R$75AA and #R$E891.
;
; L The low-order byte to point to a UDG address
;
; Set the high-order byte value for the UDG address.
@label=PrintGraphic
c$74AA LD H,$78      ; #REGh=#N$78.
 $74AC JR $74B5      ; Jump to #R$74B5.

; Print Letter
;
; Used by the routine at #R$74D3.
@label=PrintLetter
c$74AE EXX           ; Switch to the shadow registers.
 $74AF ADD A,A       ; {#REGl=#REGa*#N$02.
 $74B0 LD L,A        ; }
 $74B1 LD H,$0F      ; #REGh=#N$0F.
 $74B3 ADD HL,HL     ; {#REGhl*=#N$04.
 $74B4 ADD HL,HL     ; }
; This entry point is used by the routine at #R$74AA.
@label=PrintUDG
*$74B5 LD B,$08      ; #REGb=#N$08.
 $74B7 LD C,D        ; #REGc=#REGd.
@label=PrintUDGG_Loop
*$74B8 LD A,(HL)     ; #REGa=*#REGhl.
 $74B9 LD (DE),A     ; Write #REGa to *#REGde.
 $74BA INC L         ; Increment #REGl by one.
 $74BB INC D         ; Increment #REGd by one.
 $74BC DJNZ $74B8    ; Decrease counter by one and loop back to #R$74B8 until
                     ; counter is zero.
 $74BE LD D,C        ; #REGd=#REGc.
 $74BF INC E         ; Increment #REGe by one.
 $74C0 EXX           ; Switch back to the normal registers.
 $74C1 RET           ; Return.

; Unused
u$74C2 DEFB $00

; Print Footer Colour String
;
; Used by the routines at #R$7535, #R$757E, #R$763C, #R$76D7, #R$77E0 and
; #R$ED52.
;
; A Attribute
; HL Address of the string
;
; Given an attribute value and a pointer to a string of #N$20 bytes, this routine will print a string to the
;       footer of the screen buffer using the given attribute colour.
@label=PrintFooterColourString
c$74C3 LD B,$20      ; #REGb=#N$20 (counter of number of characters in a row).
 $74C5 LD DE,$5AE0   ; #REGde=#N$5AE0 (footer attribute buffer location).
@label=PrintColourString_Loop
*$74C8 LD (DE),A     ; Write #REGa to *#REGde.
 $74C9 INC E         ; Increment #REGe by one.
 $74CA DJNZ $74C8    ; Decrease counter by one and loop back to #R$74C8 until
                     ; counter is zero.
 $74CC LD B,$20      ; #REGb=#N$20 (counter of number of characters in string).
 $74CE EXX           ; Switch to the shadow registers.
 $74CF LD DE,$50E0   ; #REGde'=#N$50E0 (footer screen buffer location).
 $74D2 EXX           ; Switch back to the normal registers.
; Continue on to #R$74D3.

; Print Loop
;
; Used by the routines at #R$74DC, #R$75AA, #R$E891, #R$EB43, #R$EC8E, #R$ECAB
; and #R$ED52.
;
; B Counter; number of characters to print
; HL Address of the string
; DE' Screen buffer address for output
@label=Print_Loop
c$74D3 LD A,(HL)     ; Fetch a character from the string, store it in #REGa.
 $74D4 CALL $74AE    ; Call #R$74AE.
 $74D7 INC HL        ; Increment the string pointer by one.
 $74D8 DJNZ $74D3    ; Decrease counter by one and loop back to #R$74D3 until
                     ; counter is zero.
 $74DA RET           ; Return.

; Unused
u$74DB DEFB $00

; Print Level Name
;
; #UDGTABLE(default,centre)
; { #PUSHS #SIM(start=$75AA,stop=$7638)#SIM(start=$74DC,stop=$7518)
; #SCR$02(game) #POPS }
; UDGTABLE#
;
; .
;
; This looks confusing but it's basically #REGhl=#N$BBA0+(level*#N$1C).
; .
; #TABLE(default,centre,centre,centre,centre)
; { =h Level | =h Address | =h Attribute | =h Name }
; #FOR$00,$07,(n,{ #Nn | #R($BBA0+n*$1C)(#N($BBA0+n*$1C)) | #COLOUR(#PEEK($BBA0+n*$1C)) | #HTML(#STR($BBA1+n*$1C,$04,$09)<br />#STR($BBAA+n*$1C,$04,$09)<br />#STR($BBB3+n*$1C,$04,$09)) }, )
; TABLE#
@label=PrintLevelName
c$74DC LD A,($7820)  ; #REGa=*#R$7820.
 $74DF ADD A,A       ; {#REGa*=#N$04.
 $74E0 ADD A,A       ; }
 $74E1 LD L,A        ; #REGl=#REGa (level*#N$04).
 $74E2 ADD A,A       ; #REGa*=#N$02.
 $74E3 LD H,A        ; #REGh=#REGa (level*#N$08).
 $74E4 ADD A,A       ; {#REGl=#N$A0+#REGh+#REGl+(level*#N$10).
 $74E5 ADD A,H       ;
 $74E6 ADD A,L       ;
 $74E7 ADD A,$A0     ;
 $74E9 LD L,A        ; }
 $74EA LD A,$00      ; {#REGh=#N$BB+carry.
 $74EC ADC A,$BB     ;
 $74EE LD H,A        ; }
 $74EF LD DE,$5A57   ; #REGde=#N$5A57 (attribute buffer location).
 $74F2 LD C,$03      ; #REGc=#N$03 (counter; three lines).
@label=LevelName_ColourLineLoop
*$74F4 LD A,(HL)     ; #REGa=*#REGhl.
 $74F5 LD B,$09      ; #REGb=#N$09 (counter; length of each line).
@label=LevelName_ColourLoop
*$74F7 LD (DE),A     ; Write #REGa to *#REGde.
 $74F8 INC E         ; Increment #REGe by one.
 $74F9 DJNZ $74F7    ; Decrease counter by one and loop back to #R$74F7 until
                     ; counter is zero.
; Move down one line (and reset the position - #N$09+#N$17=#N$20).
 $74FB LD A,E        ; {#REGe+=#N$17.
 $74FC ADD A,$17     ;
 $74FE LD E,A        ; }
 $74FF DEC C         ; Decrease #REGc by one.
 $7500 JR NZ,$74F4   ; Jump to #R$74F4 until #REGc is zero.
 $7502 INC L         ; Increment #REGl by one.
 $7503 EXX           ; Switch to the shadow registers.
 $7504 LD DE,$5057   ; #REGde'=#N$5057 (screen buffer location).
 $7507 EXX           ; Switch back to the normal registers.
 $7508 LD C,$03      ; #REGc=#N$03 (counter; three lines).
@label=PrintLevelName_Loop
*$750A LD B,$09      ; #REGb=#N$09 (counter; length of each line).
 $750C CALL $74D3    ; Call #R$74D3.
; Move down one line (and reset the position - #N$09+#N$17=#N$20).
 $750F EXX           ; Switch to the shadow registers.
 $7510 LD A,E        ; {#REGe'+=#N$17.
 $7511 ADD A,$17     ;
 $7513 LD E,A        ; }
 $7514 EXX           ; Switch back to the normal registers.
; Have we printed all three lines of the level name yet?
 $7515 DEC C         ; Decrease #REGc by one.
 $7516 JR NZ,$750A   ; Jump to #R$750A until #REGc is zero.
 $7518 RET           ; Return.

; Unused
u$7519 DEFB $00

; Handler: Hump Jump
@label=Handler_HumpJump
c$751A LD HL,($782E) ; #REGhl=*#R$782E.
 $751D LD DE,$0011   ; #REGde=#N($0011,$04,$04).
 $7520 LD A,(HL)     ; #REGa=*#REGhl.
 $7521 CP $28        ; {Jump to #R$752D if #REGa is lower than #N$28.
 $7523 JR C,$752D    ; }
 $7525 CP $46        ; Compare #REGa with #N$46.
 $7527 LD E,$08      ; Alter awarded score to #N($0008,$04,$04).
 $7529 JR NC,$752D   ; Jump to #R$752D if #REGa was higher than #N$46 (on line
                     ; #R$7525).
 $752B LD E,$01      ; Alter awarded score to #N($0001,$04,$04).
; Award the score.
@label=HumpJumpAwardScore
*$752D LD HL,($7844) ; {#REGhl=*#R$7844+#REGde.
 $7530 ADD HL,DE     ; }
 $7531 LD ($7844),HL ; Write #REGhl to *#R$7844.
 $7534 RET           ; Return.

; Print "Demo Mode"
;
; Used by the routines at #R$7161, #R$754F and #R$76D7.
;
; .
;
; See #R$E800.
@label=PrintDemoMode
c$7535 LD A,($782D)  ; {Jump to #R$7544 if the game is not in "demo mode" (the
 $7538 CP $73        ; high-order byte of #R$782C does not contain
 $753A JR NZ,$7544   ; #R$73B7(#N$73)).}
; Print the "#STR($BA66,$03,$20)" messaging in the footer.
; .
; #HTML(#FONT:(DEMO MODE-PRESS A KEY TO PLAY)$3D00,attr=$82(demo-mode))
 $753C LD A,$82      ; #REGa=#N$82 (#COLOUR$82).
 $753E LD HL,$BA66   ; #REGhl=#R$BA66.
 $7541 JP $74C3      ; Jump to #R$74C3.
; If this is not demo mode then set the attributes to #COLOUR$00 where it would normally display the demo mode
;       footer messaging.
@label=NotDemoMode
*$7544 LD HL,$5AE0   ; #REGhl=#N$5AE0 (footer attribute buffer location).
 $7547 LD B,$20      ; #REGb=#N$20.
@label=NotDemoMode_Loop
*$7549 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $754B INC L         ; Increment #REGl by one.
 $754C DJNZ $7549    ; Decrease counter by one and loop back to #R$7549 until
                     ; counter is zero.
 $754E RET           ; Return.

; Initialise New Game
;
; Used by the routine at #R$75AA.
@label=InitialiseNewGame
c$754F CALL $7535    ; Call #R$7535.
; "Spend" a life to continue, or move to Game Over.
@label=SpendLife
*$7552 LD HL,$7839   ; {Decrease *#R$7839 by one.
 $7555 DEC (HL)      ; }
; Compare the players current lives with the maximum number of lives (#N$04).
 $7556 LD C,(HL)     ; #REGc=*#R$7839.
 $7557 LD A,$04      ; #REGa=#N$04 (the maximum number of lives).
 $7559 EXX           ; Switch to the shadow registers.
 $755A LD DE,$50CB   ; #REGde'=#N$50CB (screen buffer location).
 $755D EXX           ; Switch back to the normal registers.
 $755E SUB C         ; #REGa-=#REGc.
 $755F JR Z,$756B    ; Jump to #R$756B if #REGa is zero.
; Blank out where the lives would print.
 $7561 ADD A,A       ; {#REGb=#REGa*#N$02.
 $7562 LD B,A        ; }
@label=PrintBlank_Loop
*$7563 EXX           ; Switch to the shadow registers.
 $7564 LD L,$64      ; #REGl=#R$7864(#N$64).
 $7566 CALL $74AA    ; Call #R$74AA.
 $7569 DJNZ $7563    ; Decrease counter by one and loop back to #R$7563 until
                     ; counter is zero.
@label=TestGameOver
*$756B LD A,C        ; {Jump to #R$757E if #REGc is zero.
 $756C AND A         ;
 $756D JR Z,$757E    ; }
; Display the bike graphic for each remaining life.
 $756F LD B,C        ; #REGb=#REGc (counter; current number of lives).
@label=PrintLives
*$7570 EXX           ; Switch to the shadow registers.
 $7571 LD L,$9C      ; #REGl'=#R$789C(#N$9C).
; Print the left side of the bike graphic.
 $7573 CALL $74AA    ; Call #R$74AA.
 $7576 EXX           ; Switch back to the normal registers.
; Print the right side of the bike graphic.
 $7577 CALL $74AA    ; Call #R$74AA.
 $757A DJNZ $7570    ; Decrease counter by one and loop back to #R$7570 until
                     ; counter is zero.
 $757C RET           ; Return.

; Unused
u$757D DEFB $00

; Game Over
;
; Used by the routine at #R$754F.
@label=GameOver
c$757E CALL $7420    ; Call #R$7420.
 $7581 LD HL,($7848) ; #REGhl=*#R$7848.
 $7584 LD DE,($7846) ; #REGde=*#R$7846.
 $7588 AND A         ; Set flags.
 $7589 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $758B JR NC,$7599   ; Jump to #R$7599 if {} is higher.
 $758D EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $758E LD ($7848),HL ; Write #REGhl to *#R$7848.
 $7591 EXX           ; Switch to the shadow registers.
 $7592 LD DE,$51DB   ; #REGde'=#N$51DB (screen buffer location).
 $7595 EXX           ; Switch back to the normal registers.
 $7596 CALL $7434    ; Call #R$7434.
; Print the "#STR($BA46,$03,$20)" messaging in the footer.
; .
; #HTML(#FONT:(GAME OVER-PRESS KEY TO TRY AGAIN)$3D00,attr=$84(game-over))
@label=Print_GameOver
*$7599 LD A,$84      ; #REGa=#N$84 (#COLOUR$84).
 $759B LD HL,$BA46   ; #REGhl=#R$BA46.
 $759E CALL $74C3    ; Call #R$74C3.
@label=GameOver_Input
*$75A1 CALL $6828    ; Call #R$6828.
 $75A4 AND A         ; {Jump to #R$75A1 until any key is pressed.
 $75A5 JR Z,$75A1    ; }
 $75A7 JP $E81B      ; Jump to #R$E81B.

; Print Game Display
;
; #UDGTABLE(default,centre)
; { #PUSHS #SIM(start=$75AA,stop=$7638) #SCR$02(game-display) #POPS }
; UDGTABLE#
; .
; Used by the routine at #R$6CAA.
@label=PrintGameDisplay
c$75AA CALL $749C    ; Call #R$749C.
 $75AD LD A,$05      ; {Write #N$05 to *#R$7839.
 $75AF LD ($7839),A  ; }
; Set the attributes for the "ground".
 $75B2 LD H,$5A      ; #REGh=#N$5A.
 $75B4 LD B,$40      ; #REGb=#N$40 (counter; two full rows).
@label=GameDisplay_GreenBarLoop
*$75B6 LD (HL),$04   ; Write #N$04 (#COLOUR$04) to *#REGhl.
 $75B8 INC L         ; Increment #REGl by one.
 $75B9 DJNZ $75B6    ; Decrease counter by one and loop back to #R$75B6 until
                     ; counter is zero.
; Draw the "ground".
 $75BB LD C,$04      ; #REGc=#N$04 (counter; how many times to write the byte).
 $75BD LD HL,$5000   ; #REGhl=#N$5000 (screen buffer location).
@label=DrawGround_Loop
*$75C0 LD B,$40      ; #REGb=#N$40 (counter; two full rows).
@label=DrawGround_WriteLoop
*$75C2 LD (HL),$55   ; Write #N$55 to *#REGhl.
 $75C4 INC L         ; Increment #REGl by one.
 $75C5 DJNZ $75C2    ; Decrease counter by one and loop back to #R$75C2 until
                     ; counter is zero.
 $75C7 INC H         ; {Increment #REGh by two.
 $75C8 INC H         ; }
 $75C9 LD L,$00      ; #REGl=#N$00.
 $75CB DEC C         ; Decrease #REGc by one.
 $75CC JR NZ,$75C0   ; Jump to #R$75C0 until #REGc is zero.
 $75CE LD C,$03      ; #REGc=#N$03.
 $75D0 LD HL,$5A41   ; #REGhl=#N$5A41 (attribute buffer location).
*$75D3 LD B,$04      ; #REGb=#N$04.
*$75D5 LD (HL),$07   ; Write #N$07 (#COLOUR$07) to *#REGhl.
 $75D7 INC L         ; Increment #REGl by one.
 $75D8 DJNZ $75D5    ; Decrease counter by one and loop back to #R$75D5 until
                     ; counter is zero.
 $75DA LD A,L        ; #REGa=#REGl.
 $75DB ADD A,$1C     ; #REGa+=#N$1C.
 $75DD LD L,A        ; #REGl=#REGa.
 $75DE DEC C         ; Decrease #REGc by one.
 $75DF JR NZ,$75D3   ; Jump to #R$75D3 until #REGc is zero.
 $75E1 LD L,$C0      ; #REGl=#N$C0.
 $75E3 LD B,$20      ; #REGb=#N$20.
*$75E5 LD (HL),$07   ; Write #N$07 (#COLOUR$07) to *#REGhl.
 $75E7 INC L         ; Increment #REGl by one.
 $75E8 DJNZ $75E5    ; Decrease counter by one and loop back to #R$75E5 until
                     ; counter is zero.
; Handles printing "MPH, FUEL, RPM" (bike stats) to the display.
 $75EA LD C,$03      ; #REGc=#N$03 (counter; three strings).
 $75EC LD HL,$C3E0   ; #REGhl=#R$C3E0.
 $75EF EXX           ; Switch to the shadow registers.
 $75F0 LD DE,$5041   ; #REGde'=#N$5041 (screen buffer location).
 $75F3 EXX           ; Switch back to the normal registers.
@label=GameDisplay_StatsLoop
*$75F4 LD B,$04      ; #REGb=#N$04 (counter; number of characters in each
                     ; string).
 $75F6 CALL $74D3    ; Call #R$74D3.
; At the end of each string there are two more bytes which build the up/ down arrow shown above "TARGET". This is
; hidden by the attributes until it's shown in-game by setting the appropriate attribute values.
 $75F9 LD A,(HL)     ; #REGa=*#REGhl.
 $75FA EXX           ; Switch to the shadow registers.
 $75FB LD L,A        ; #REGl'=#REGa.
 $75FC LD A,E        ; {#REGe'+=#N$0E.
 $75FD ADD A,$0E     ;
 $75FF LD E,A        ; }
 $7600 CALL $74AA    ; Call #R$74AA.
 $7603 INC L         ; Increment #REGl by one.
 $7604 EXX           ; Switch back to the normal registers.
 $7605 CALL $74AA    ; Call #R$74AA.
 $7608 INC L         ; Increment #REGl by one.
 $7609 EXX           ; Switch to the shadow registers.
 $760A LD A,E        ; {#REGe'+=#N$0C.
 $760B ADD A,$0C     ;
 $760D LD E,A        ; }
 $760E EXX           ; Switch back to the normal registers.
 $760F DEC C         ; Decrease #REGc by one.
 $7610 JR NZ,$75F4   ; Jump to #R$75F4 until #REGc is zero.
; Set the screen buffer position.
 $7612 EXX           ; Switch to the shadow registers.
 $7613 LD E,$C0      ; #REGe'=#N$C0.
 $7615 EXX           ; Switch back to the normal registers.
 $7616 LD B,$06      ; #REGb=#N$06 (counter; number of characters in the
                     ; "#STR($C3F2,$04,$06)" string).
 $7618 CALL $74D3    ; Call #R$74D3.
; Set the screen buffer position.
 $761B EXX           ; Switch to the shadow registers.
 $761C LD E,$D4      ; #REGe'=#N$D4.
 $761E EXX           ; Switch back to the normal registers.
 $761F LD B,$07      ; #REGb=#N$07 (counter; number of characters in the
                     ; "#STR($C3F8,$04,$07)" string).
 $7621 CALL $74D3    ; Call #R$74D3.
 $7624 LD HL,$0000   ; {Write #N($0000,$04,$04) to *#R$7844.
 $7627 LD ($7844),HL ; }
 $762A CALL $742C    ; Call #R$742C.
 $762D LD HL,($7848) ; #REGhl=*#R$7848.
 $7630 EXX           ; Switch to the shadow registers.
 $7631 LD DE,$51DB   ; #REGde'=#N$51DB (screen buffer location).
 $7634 EXX           ; Switch back to the normal registers.
 $7635 CALL $7434    ; Call #R$7434.
 $7638 JP $754F      ; Jump to #R$754F.

; Unused
u$763B DEFB $00

; Handler: Fuel
;
; Used by the routine at #R$6C00.
@label=Handler_Fuel
c$763C CALL $7420    ; Call #R$7420.
 $763F LD HL,($783C) ; #REGhl=*#R$783C.
 $7642 LD A,H        ; {Jump to #R$769A if #REGh is lower than #N$80.
 $7643 CP $80        ;
 $7645 JR C,$769A    ; }
 $7647 LD HL,($782E) ; #REGhl=*#R$782E.
 $764A LD A,(HL)     ; #REGa=*#REGhl.
 $764B DEC A         ; Decrease #REGa by one.
 $764C JR Z,$765C    ; Jump to #R$765C if #REGa is zero.
 $764E CP $31        ; {Call #R$EBF3 if #REGa is higher than #N$31.
 $7650 CALL NC,$EBF3 ; }
 $7653 CP $2D        ; {Call #R$EBF3 if #REGa is lower than #N$2D.
 $7655 CALL C,$EBF3  ; }
 $7658 NOP           ; {No operation.
 $7659 NOP           ;
 $765A NOP           ;
 $765B NOP           ; }
; Start the "Out Of Fuel" sequence.
@label=TriggerOutOfFuel
*$765C CALL $68AD    ; Call #R$68AD.
 $765F LD A,($7822)  ; #REGa=*#R$7822.
 $7662 BIT 7,A       ; Check the direction bit.
 $7664 LD A,$87      ; Load the base player sprite into #REGa (#N$87).
 $7666 JR NZ,$766A   ; Jump to #R$766A if the player is moving left.
 $7668 ADD A,$40     ; Modify the player sprite ID for the player moving right
                     ; (#N$C7).
@label=SetWheelieSprite
*$766A LD ($7834),A  ; Write the player sprite ID to *#R$7834.
 $766D CALL $6B2D    ; Call #R$6B2D.
; Print the "#STR($BA86,$03,$20)" messaging in the footer.
; .
; #HTML(#FONT:(OUT OF FUEL)$3D00,attr=$A9(out-of-fuel))
 $7670 LD A,$A9      ; #REGa=#N$A9 (#COLOUR$A9).
 $7672 LD HL,$BA86   ; #REGhl=#R$BA86.
 $7675 CALL $74C3    ; Call #R$74C3.
; Play the "out of fuel" audio.
; .
; #HTML(#AUDIO(out-of-fuel.wav)(#INCLUDE(OutOfFuel)))
 $7678 LD D,$10      ; Set an outer loop count in #REGd for #N$10 iterations.
 $767A LD C,$01      ; Set the initial tone value in #REGc to #N$01.
@label=PlayFuelSound_OuterLoop
*$767C LD HL,$1E00   ; Set the tone duration counter in #REGhl to #N$1E00.
 $767F LD A,C        ; Get current tone value.
@label=PlayFuelSound_ToneLoop
*$7680 LD B,C        ; Set inner delay counter.
 $7681 OUT ($FE),A   ; Send to the speaker.
 $7683 XOR %00010000 ; Flip the speaker bit.
@label=PlayFuelSound_InnerDelayLoop
*$7685 DJNZ $7685    ; Decrease the inner delay counter by one and loop back to #R$7685
                     ; until the counter is zero.
 $7687 DEC L         ; Decrease the tone duration low byte by one.
 $7688 JR NZ,$7680   ; Jump back to #R$7680 until the tone duration low byte is
                     ; zero.
 $768A DEC H         ; Decrease the tone duration high byte by one.
 $768B JR NZ,$7680   ; Jump back to #R$7680 until the tone duration high byte
                     ; is zero.
 $768D INC C         ; Increase the tone frequency by one (higher pitch).
 $768E DEC D         ; Decrease the outer loop counter by one.
 $768F JR NZ,$767C   ; Jump back to #R$767C until the outer loop counter is
                     ; zero.
; Reset the players fuel and restart the game.
 $7691 LD HL,$3400   ; {Write #N$3400 to *#R$783C.
 $7694 LD ($783C),HL ; }
 $7697 JP $7161      ; Jump to #R$7161.
; Normal fuel consumption processing.
@label=ProcessFuelConsumption
*$769A LD A,($7822)  ; #REGa=*#R$7822.
 $769D BIT 7,A       ; Check the direction bit.
 $769F JR NZ,$76A2   ; Jump to #R$76A2 if the player is moving backwards.
; The player is moving forwards.
 $76A1 CPL           ; Invert the speed for forward movement calculation.
@label=CalculateFuelConsumption
*$76A2 SUB $7E       ; {Calculate the fuel consumption rate in #REGde;
 $76A4 SRL A         ; (speed-#N$7E)/#N$02.
 $76A6 LD E,A        ;
 $76A7 LD D,$00      ; }
 $76A9 AND A         ; {Subtract the consumption from the players fuel level.
 $76AA SBC HL,DE     ; }
 $76AC LD ($783C),HL ; Write the updated fuel value back to *#R$783C.
 $76AF JR C,$76D0    ; Jump to #R$76D0 if the fuel value is negative.
; Update the fuel gauge display.
 $76B1 LD A,H        ; Get the fuel high byte.
 $76B2 SRL A         ; {Divide it by #N$04.
 $76B4 SRL A         ; }
 $76B6 CPL           ; Invert the byte for the gauge display.
 $76B7 SUB $0C       ; Abjust by an offset of #N$0C bytes for where the gauge
                     ; displays.
 $76B9 LD L,A        ; Set this value in #REGl.
 $76BA LD H,$BA      ; Load the high byte in #REGh with #N$BA.
 $76BC LD DE,$5A65   ; Point #REGde to the gauge position #N$5A65 (attribute buffer
                     ; location).
 $76BF CALL $6893    ; Call #R$6893.
; Handle fuel-related audio effects during gameplay.
 $76C2 LD HL,($783C) ; #REGhl=*#R$783C.
 $76C5 LD A,H        ; {Call #R$6D50 if the fuel level is #N$0400 or higher, or for every
 $76C6 CP $04        ; #N$40 fuel units (which creates pulses as the fuel decreases).
 $76C8 CALL NC,$6D50 ;
 $76CB BIT 6,L       ;
 $76CD CALL NZ,$6D50 ; }
*$76D0 JP $EBF3      ; Jump to #R$EBF3.

; Unused
u$76D3 DEFB $00,$00,$00,$00

; Handler: Ghost Rider
;
; Used by the routines at #R$716E and #R$7311.
@label=Handler_GhostRider
c$76D7 CALL $692C    ; Call #R$692C.
 $76DA LD A,($7825)  ; {Return if *#R$7825 is zero.
 $76DD AND A         ;
 $76DE RET Z         ; }
 $76DF XOR A         ; {Write #N$00 to *#R$7825.
 $76E0 LD ($7825),A  ; }
 $76E3 LD A,($782A)  ; {Return if *#R$782A is not zero.
 $76E6 AND A         ;
 $76E7 RET NZ        ; }
 $76E8 EXX           ; Switch to the shadow registers.
 $76E9 LD A,C        ; #REGa=#REGc'.
 $76EA EXX           ; Switch back to the normal registers.
 $76EB CP $44        ; {Jump to #R$7744 if #REGa is lower than #N$44.
 $76ED JR C,$7744    ; }
 $76EF JR NZ,$7729   ; Jump to #R$7729 if #REGa is not equal to #N$44.
 $76F1 LD HL,$7840   ; #REGhl=#R$7840.
 $76F4 LD A,(HL)     ; {Jump to #R$EC2A if *#REGhl is not zero.
 $76F5 AND A         ;
 $76F6 JP NZ,$EC2A   ; }
 $76F9 LD (HL),$01   ; Write #N$01 to *#REGhl.
 $76FB CALL $EC0F    ; Call #R$EC0F.
 $76FE NOP           ; No operation.
 $76FF LD HL,($7844) ; {Add #N$01F4 to *#R$7844.
 $7702 LD DE,$01F4   ;
 $7705 ADD HL,DE     ;
 $7706 LD ($7844),HL ; }
; Print the "#STR($BAA6,$03,$20)" messaging in the footer.
; .
; #HTML(#FONT:(THE RACE IS ON!)$3D00,attr=$96(race-is-on))
 $7709 LD A,$96      ; #REGa=#N$96 (#COLOUR$96).
 $770B LD HL,$BAA6   ; #REGhl=#R$BAA6.
 $770E CALL $74C3    ; Call #R$74C3.
 $7711 CALL $EC63    ; Call #R$EC63.
 $7714 CALL $7535    ; Call #R$7535.
 $7717 XOR A         ; {Write #N$00 to *#R$7824.
 $7718 LD ($7824),A  ; }
 $771B INC A         ; {Write #N$01 to *#R$781A.
 $771C LD ($781A),A  ; }
 $771F LD HL,$0B6E   ; {Write #N$0B6E to *#R$7841.
 $7722 LD ($7841),HL ; }
 $7725 NOP           ; No operation.
 $7726 CALL $6D49    ; Call #R$6D49.
*$7729 CP $46        ; {Jump to #R$7742 if #REGa is higher than #N$46.
 $772B JR NC,$7742   ; }
 $772D LD DE,$0032   ; {Add #N($0032,$04,$04) to *#R$7844.
 $7730 LD HL,($7844) ;
 $7733 ADD HL,DE     ;
 $7734 LD ($7844),HL ; }
 $7737 POP HL        ; {Restore #REGhl and #REGde from the stack.
 $7738 POP DE        ; }
 $7739 PUSH DE       ; {Stash #REGde and #REGhl on the stack.
 $773A PUSH HL       ; }
 $773B LD HL,$FFFA   ; #REGhl=#N$FFFA.
 $773E ADD HL,DE     ; #REGhl+=#REGde.
 $773F SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $7741 RET           ; Return.
*$7742 JR NZ,$77A2   ; Jump to #R$77A2 if {} is not zero.
*$7744 NOP           ; {No operation.
 $7745 NOP           ;
 $7746 NOP           ;
 $7747 NOP           ;
 $7748 NOP           ;
 $7749 NOP           ; }
 $774A POP HL        ; {Restore #REGhl and #REGde from the stack.
 $774B POP DE        ; }
 $774C LD HL,($783E) ; #REGhl=*#R$783E.
 $774F LD BC,$0008   ; #REGbc=#N($0008,$04,$04).
 $7752 LD A,C        ; #REGa=#REGc.
*$7753 SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $7755 ADD HL,BC     ; #REGhl+=#REGbc.
 $7756 DEC A         ; Decrease #REGa by one.
 $7757 JR NZ,$7753   ; Jump to #R$7753 until #REGa is zero.
 $7759 LD HL,$FFFA   ; #REGhl=#N$FFFA.
 $775C ADD HL,DE     ; #REGhl+=#REGde.
 $775D RES 7,(HL)    ; Reset bit 7 of *#REGhl.
; This entry point is used by the routine at #R$EC2A.
*$775F PUSH HL       ; Stash #REGhl on the stack.
 $7760 LD B,$06      ; #REGb=#N$06.
*$7762 PUSH BC       ; Stash #REGbc on the stack.
 $7763 CALL $68AD    ; Call #R$68AD.
 $7766 CALL $6B2D    ; Call #R$6B2D.
 $7769 LD C,$28      ; #REGc=#N$28.
 $776B LD HL,$0800   ; #REGhl=#N$0800.
 $776E LD A,$02      ; #REGa=#N$02.
*$7770 OUT ($FE),A   ; OUT #N$FE
 $7772 XOR %00010000 ; Flip bit 4.
 $7774 LD D,A        ; #REGd=#REGa.
 $7775 LD B,C        ; #REGb=#REGc.
*$7776 DJNZ $7776    ; Decrease counter by one and loop back to #R$7776 until
                     ; counter is zero.
 $7778 DEC HL        ; Decrease #REGhl by one.
 $7779 LD A,H        ; {Is #REGhl zero?
 $777A OR L          ; }
 $777B LD A,D        ; #REGa=#REGd.
 $777C JR NZ,$7770   ; Jump to #R$7770 if #REGhl is not zero.
 $777E CALL $68AD    ; Call #R$68AD.
 $7781 CALL $7314    ; Call #R$7314.
 $7784 LD C,$14      ; #REGc=#N$14.
 $7786 LD HL,$1000   ; #REGhl=#N($1000,$04,$04).
 $7789 LD A,$06      ; #REGa=#N$06.
*$778B OUT ($FE),A   ; OUT #N$FE
 $778D XOR %00010000 ; Flip bit 4.
 $778F LD D,A        ; #REGd=#REGa.
 $7790 LD B,C        ; #REGb=#REGc.
*$7791 DJNZ $7791    ; Decrease counter by one and loop back to #R$7791 until
                     ; counter is zero.
 $7793 DEC HL        ; Decrease #REGhl by one.
 $7794 LD A,H        ; {Is #REGhl zero?
 $7795 OR L          ; }
 $7796 LD A,D        ; #REGa=#REGd.
 $7797 JR NZ,$778B   ; Jump to #R$778B if #REGhl is not zero.
 $7799 POP BC        ; Restore #REGbc from the stack.
 $779A DJNZ $7762    ; Decrease counter by one and loop back to #R$7762 until
                     ; counter is zero.
 $779C POP HL        ; Restore #REGhl from the stack.
 $779D SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $779F JP $6ED4      ; Jump to #R$6ED4.
*$77A2 NOP           ; {No operation.
 $77A3 NOP           ;
 $77A4 NOP           ;
 $77A5 NOP           ;
 $77A6 NOP           ;
 $77A7 NOP           ; }
 $77A8 LD DE,$03E8   ; {Add #N$03E8 to *#R$7844.
 $77AB LD HL,($7844) ;
 $77AE ADD HL,DE     ;
 $77AF LD ($7844),HL ; }
 $77B2 CALL $7420    ; Call #R$7420.
 $77B5 CALL $68AD    ; Call #R$68AD.
 $77B8 NOP           ; {No operation.
 $77B9 NOP           ;
 $77BA NOP           ;
 $77BB NOP           ; }
 $77BC LD HL,$7839   ; {Write #N$05 to *#R$7839.
 $77BF LD (HL),$05   ; }
 $77C1 CALL $ED39    ; Call #R$ED39.
; Print the "#STR($BAC6,$03,$20)" messaging in the footer.
; .
; #HTML(#FONT:(NEW CODE ABCDE-PRESS KEY TO PLAY)$3D00,attr=$9F(new-code))
 $77C4 LD A,$9F      ; #REGa=#N$9F (#COLOUR$9F).
 $77C6 LD HL,$BAC6   ; #REGhl=#R$BAC6.
 $77C9 CALL $74C3    ; Call #R$74C3.
 $77CC CALL $EC5E    ; Call #R$EC5E.
@label=LevelComplete_Input
*$77CF CALL $6828    ; Call #R$6828.
 $77D2 AND A         ; {Jump to #R$77CF until any key is pressed.
 $77D3 JR Z,$77CF    ; }
 $77D5 CALL $7535    ; Call #R$7535.
 $77D8 JP $6CAD      ; Jump to #R$6CAD.

; Unused
u$77DB DEFB $00,$00,$00,$00,$00

; Routine at 77E0
;
; Used by the routine at #R$72C3.
c$77E0 NOP           ; {No operation.
 $77E1 NOP           ;
 $77E2 NOP           ;
 $77E3 NOP           ;
 $77E4 NOP           ;
 $77E5 NOP           ; }
; Print the "#STR($78AC,$03,$20)" messaging in the footer.
; .
; #HTML(#FONT:(THE GHOSTRIDER HAS FINISHED)$3D00,attr=$87(ghostrider-finished))
 $77E6 LD A,$87      ; #REGa=#N$87 (#COLOUR$87).
 $77E8 LD HL,$78AC   ; #REGhl=#R$78AC.
 $77EB CALL $74C3    ; Call #R$74C3.
 $77EE CALL $EC68    ; Call #R$EC68.
; Set the player lives to #N$01 this is decreased to #N$00 by #R$7552 so is how
; the player receives a "Game Over".
 $77F1 LD HL,$7839   ; {Write #N$01 to #R$7839.
 $77F4 LD (HL),$01   ; }
 $77F6 JP $7552      ; Jump to #R$7552.

; Data block at 77F9
b$77F9 DEFB $00,$05,$00,$03,$02,$02,$02

; Data block at 7800
b$7800 DEFB $00,$03
 $7802 DEFB $00,$03
 $7804 DEFB $03,$00
 $7806 DEFB $00,$01
 $7808 DEFB $00,$04
 $780A DEFB $00,$00
 $780C DEFB $04,$02
 $780E DEFB $02,$00
 $7810 DEFB $00,$01
 $7812 DEFB $00,$00

; Game status buffer entry at 7814
g$7814 DEFB $00

; Game status buffer entry at 7815
g$7815 DEFW $1E06

; Current Screen Position
@label=Current_ScreenPosition
g$7817 DEFW $0606

; Scroll Phase Counter
@label=ScrollPhase_Counter
g$7819 DEFB $00

; Game status buffer entry at 781A
g$781A DEFB $00

; Active Sprite Blocks
;
; The number of sprite character blocks (8x8 pixels) currently active.
; .
; A single sprite may span multiple character blocks, this is where it's
; tracked.
@label=ActiveSpriteBlocks
g$781B DEFB $00

; Pointer: Sprite Background Buffer
;
; Pointer to buffer containing saved background data for sprite removal.
@label=SpriteBackgroundBuffer_Pointer
g$781C DEFW $0404

; Random Number Seed?
;
; See #R$6414 for how this is generated.
@label=RandomNumberSeed
g$781E DEFW $0000

; Current Level
@label=CurrentLevel
g$7820 DEFB $00

; Game status buffer entry at 7821
g$7821 DEFB $04

; Speed?
@label=Speed
g$7822 DEFB $00      ; Pivots around #N$80 for direction - right >= #N$80, left
                     ; is < #N$80.
 $7823 DEFB $00      ; Mirror of speed? Doesn't seem to be used. TODO.

; Game status buffer entry at 7824
g$7824 DEFB $02

; Sprite State
@label=SpriteState
g$7825 DEFB $00

; Game status buffer entry at 7826
g$7826 DEFB $00

; Game status buffer entry at 7827
g$7827 DEFB $07

; Player Input
;
; Relates to the direction for the current player input.
; #TABLE(default,centre,centre)
;   { =h Byte | =h Meaning }
;   { #N$00 | No input }
;   { #N$01 | Right }
;   { #N$02 | Left }
;   { #N$04 | Down }
;   { #N$08 | Up }
; TABLE#
@label=PlayerInput
g$7828 DEFB $07

; Unused
u$7829 DEFB $07

; Action
@label=Action
g$782A DEFB $00

; Unused
u$782B DEFB $00

; Control Method Pointer
@label=ControlMethod_Pointer
g$782C DEFW $6828

; Level Progress Pointer
@label=LevelProgressPointer
g$782E DEFW $0000

; Game status buffer entry at 7830
g$7830 DEFB $00

; Game status buffer entry at 7831
g$7831 DEFW $0303

; Player Y Position
@label=PlayerPosition_Y
g$7833 DEFB $00

; Player Sprite ID
@label=PlayerSpriteID
g$7834 DEFB $00

; Game status buffer entry at 7835
g$7835 DEFB $04

; Game status buffer entry at 7836
g$7836 DEFB $04,$04

; Game status buffer entry at 7838
g$7838 DEFB $00

; Lives
@label=Lives
g$7839 DEFB $00

; Game status buffer entry at 783A
g$783A DEFW $0000

; Fuel
@label=Fuel
g$783C DEFW $0100

; Game status buffer entry at 783E
g$783E DEFB $00,$00

; Game status buffer entry at 7840
g$7840 DEFB $00

; Game status buffer entry at 7841
g$7841 DEFB $00,$06

; Game status buffer entry at 7843
g$7843 DEFB $04

; Score
@label=Score
g$7844 DEFW $0000

; Game status buffer entry at 7846
@label=HighScore
g$7846 DEFW $0005

; Game status buffer entry at 7848
g$7848 DEFB $00,$00,$00

; Displayed Score
@label=DisplayedScore
g$784B DEFB $03,$04,$00,$00,$02

; Control Method
;
; Pointer to the routine which will handle retrieving the player controls.
@label=ControlMethod
g$7850 DEFW $0000

; Game status buffer entry at 7852
g$7852 DEFB $05

; User-Defined KeyMap
@label=UserDefinedKeyMap
g$7853 DEFB $05
 $7854 DEFB $05
 $7855 DEFB $05
 $7856 DEFB $05
 $7857 DEFB $00

; Game status buffer entry at 7858
g$7858 DEFB $00,$04

; Frame Count
@label=FrameCount
g$785A DEFB $04

; AGF Interface KeyMap
@label=AGFInterfaceKeyMap
g$785B DEFB $35
 $785C DEFB $38
 $785D DEFB $37
 $785E DEFB $36
 $785F DEFB $30

; Data block at 7860
b$7860 DEFB $06,$06,$00,$03

; Graphics: Blank
@label=Graphics_Blank
b$7864 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE(default,centre) {
                                            ; #UDG$7864 } UDGTABLE#

; Graphics: Arrow Top
@label=Graphics_ArrowTopLeft
b$786C DEFB $01,$03,$07,$0F,$1F,$3F,$7F,$FF ; #UDGTABLE(default,centre) {
                                            ; #UDG$786C,attr=$06(arrow-top-left)
                                            ; } UDGTABLE#
@label=Graphics_ArrowTopRight
 $7874 DEFB $80,$C0,$E0,$F0,$F8,$FC,$FE,$FF ; #UDGTABLE(default,centre) {
                                            ; #UDG$7874,attr=$06(arrow-top-right)
                                            ; } UDGTABLE#

; Graphics: Arrow Middle
@label=Graphics_ArrowMiddleLeft
b$787C DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F ; #UDGTABLE(default,centre) {
                                            ; #UDG$787C,attr=$06(arrow-middle-left)
                                            ; } UDGTABLE#
@label=Graphics_ArrowMiddleRight
 $7884 DEFB $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0 ; #UDGTABLE(default,centre) {
                                            ; #UDG$7884,attr=$06(arrow-middle-right)
                                            ; } UDGTABLE#

; Graphics: Arrow Bottom
@label=Graphics_ArrowBottomLeft
b$788C DEFB $FF,$7F,$3F,$1F,$0F,$07,$03,$01 ; #UDGTABLE(default,centre) {
                                            ; #UDG$788C,attr=$06(arrow-bottom-left)
                                            ; } UDGTABLE#
@label=Graphics_ArrowBottomRight
 $7894 DEFB $FF,$FE,$FC,$F8,$F0,$E0,$C0,$80 ; #UDGTABLE(default,centre) {
                                            ; #UDG$7894,attr=$06(arrow-bottom-right)
                                            ; } UDGTABLE#

; Graphics: Bike (Start Screen)
;
; #UDGARRAY$02,attr=$1F,scale=$04,step=$01;(#PC)-(#PC+$08)-$08(bike)
@label=Graphics_StartScreenBike
b$789C DEFB $00,$00,$70,$7F,$3F,$49,$5E,$30
 $78A4 DEFB $00,$E0,$D0,$C8,$98,$F4,$24,$18

; Messaging: Ghostrider Is Finished
@label=Messaging_GhostRiderFinished
t$78AC DEFM "  THE GHOSTRIDER HAS FINISHED   " ; "#STR(#PC,$04,$20)".

; Data block at 78CC
b$78CC DEFB $10,$03,$16,$04,$28,$04,$1E,$06
 $78D4 DEFB $2D,$04,$0F,$05,$32,$01,$3E,$02
 $78DC DEFB $0A,$03,$13,$02

; Graphics: Carousel
;
; This is bit rotated by the routine at: #R$6E18.
@label=Graphics_Carousel
b$78E0 DEFB $00,$55,$00,$00 ; {#UDGTABLE {
 $78E4 DEFB $00,$00,$00,$00 ; #UDGARRAY$04,attr=$06,scale=$04,step=$04;(#PC)-(#PC+$1C)-$01-$20(carousel)
 $78E8 DEFB $01,$00,$41,$40 ; } TABLE#
 $78EC DEFB $00,$00,$00,$00 ;
 $78F0 DEFB $04,$00,$14,$10 ;
 $78F4 DEFB $00,$00,$00,$00 ;
 $78F8 DEFB $01,$55,$41,$40 ;
 $78FC DEFB $00,$00,$00,$00 ; }

; Data block at 7900
b$7900 DEFB $00,$15,$6F,$CA,$44,$30,$33,$24
 $7908 DEFB $B1,$13,$AA,$F0,$98,$8E,$C4,$83
 $7910 DEFB $9C,$F8,$AE,$06,$C9,$26,$59,$2B
 $7918 DEFB $BF,$F7,$92,$DE,$41,$13,$C6,$2E
 $7920 DEFB $90,$6B,$9B,$B1,$FE,$A8,$56,$46
 $7928 DEFB $B6,$83,$61,$A1,$5D,$64,$69,$E6
 $7930 DEFB $90,$5D,$7D,$B5,$10,$BC,$3F,$95
 $7938 DEFB $DE,$2E,$C1,$AB,$2F,$E0,$AE,$17
 $7940 DEFB $DA,$F2,$F9,$0D,$EB,$E1,$FC,$D6
 $7948 DEFB $B6,$5D,$4F,$3B,$6C,$AA,$FC,$DB
 $7950 DEFB $2B,$CB,$BE,$CE,$A4,$19,$68,$A8
 $7958 DEFB $74,$1D,$BE,$E8,$1B,$22,$29,$14
 $7960 DEFB $ED,$AE,$26,$50,$AE,$11,$0C,$C3
 $7968 DEFB $60,$66,$F1,$A3,$FD,$41,$20,$61
 $7970 DEFB $8B,$C1,$BA,$8F,$2C,$FB,$D1,$82
 $7978 DEFB $3E,$3F,$76,$C5,$D7,$FD,$22,$1C
 $7980 DEFB $79,$91,$7D,$D8,$5C,$33,$14,$E3
 $7988 DEFB $97,$69,$DD,$FD,$40,$C8,$A1,$61
 $7990 DEFB $AD,$F8,$C1,$9A,$34,$84,$D8,$7A
 $7998 DEFB $DE,$3C,$B4,$C7,$89,$42,$64,$60
 $79A0 DEFB $69,$E2,$72,$AE,$37,$35,$99,$1C
 $79A8 DEFB $64,$8E,$E3,$86,$84,$F2,$F2,$E8
 $79B0 DEFB $FD,$1F,$41,$1A,$A9,$CC,$F3,$57
 $79B8 DEFB $C6,$22,$21,$EE,$FF,$EC,$6B,$94
 $79C0 DEFB $A2,$80,$B1,$E0,$BB,$DE,$16,$B7
 $79C8 DEFB $D1,$62,$CD,$27,$89,$28,$02,$C7
 $79D0 DEFB $73,$BC,$2A,$51,$F4,$7E,$1A,$D8
 $79D8 DEFB $72,$77,$FE,$93,$3E,$3C,$9A,$66
 $79E0 DEFB $EF,$4B,$3D,$18,$0C,$9F,$BC,$2F
 $79E8 DEFB $F3,$42,$82,$38,$71,$48,$2D,$2F
 $79F0 DEFB $03,$E5,$1E,$E4,$FA,$81,$14,$E3
 $79F8 DEFB $81,$F9,$13,$B8,$0F,$94,$7D,$B0
 $7A00 DEFB $9A,$4D,$D0,$02,$A6,$C0,$54,$DD
 $7A08 DEFB $E6,$8E,$AE,$FD,$62,$E8,$38,$A1
 $7A10 DEFB $71,$50,$94,$6D,$23,$6E,$6B,$8B
 $7A18 DEFB $F9,$F3,$31,$88,$DC,$9B,$AB,$31
 $7A20 DEFB $79,$BD,$9F,$BC,$45,$63,$0C,$C7
 $7A28 DEFB $68,$A5,$6C,$DE,$43,$AD,$D6,$B6
 $7A30 DEFB $73,$BF,$05,$B1,$DB,$2F,$FF,$DD
 $7A38 DEFB $DF,$68,$BF,$3C,$A7,$2C,$2C,$11
 $7A40 DEFB $15,$6C,$EE,$E5,$49,$82,$3F,$AC
 $7A48 DEFB $A6,$B8,$2F,$EF,$24,$D3,$F2,$F1
 $7A50 DEFB $D2,$8D,$55,$FC,$E9,$76,$A8,$41
 $7A58 DEFB $44,$1B,$31,$89,$60,$3B,$69,$CE
 $7A60 DEFB $9C,$F3,$7A,$E7,$B9,$61,$B2,$57
 $7A68 DEFB $BF,$3F,$83,$8C,$13,$C2,$FA,$71
 $7A70 DEFB $5B,$D7,$0A,$2B,$A9,$9D,$37,$64
 $7A78 DEFB $55,$10,$D5,$A1,$2F,$D4,$55,$0A
 $7A80 DEFB $08,$72,$96,$2D,$5B,$CC,$09,$DD
 $7A88 DEFB $00,$31,$97,$53,$57,$C3,$30,$52
 $7A90 DEFB $3D,$09,$D7,$33,$03,$FE,$AB,$5D
 $7A98 DEFB $85,$32,$BD,$A7,$0D,$13,$B9,$51
 $7AA0 DEFB $E4,$DC,$7E,$2C,$E8,$3D,$17,$E0
 $7AA8 DEFB $BF,$27,$A5,$92,$DB,$39,$D4,$4A
 $7AB0 DEFB $F3,$4B,$FF,$E5,$5C,$16,$AA,$0A
 $7AB8 DEFB $25,$07,$4F,$34,$46,$BC,$3A,$20
 $7AC0 DEFB $6F,$BF,$2D,$73,$C0,$73,$E0,$CE
 $7AC8 DEFB $88,$F1,$DF,$95,$E1,$20,$90,$5C
 $7AD0 DEFB $25,$F5,$E6,$A8,$7D,$C6,$4C,$67
 $7AD8 DEFB $74,$01,$6B,$7F,$74,$06,$CB,$7E
 $7AE0 DEFB $19,$54,$D2,$B9,$61,$70,$08,$61
 $7AE8 DEFB $70,$F2,$F1,$A6,$AD,$C0,$72,$88
 $7AF0 DEFB $0E,$5F,$DE,$1D,$C7,$4F,$59,$43
 $7AF8 DEFB $B2,$61,$95,$AC,$97,$6E,$53,$6C
 $7B00 DEFB $AF,$5B,$D9,$D0,$1A,$C6,$09,$EC
 $7B08 DEFB $35,$9E,$50,$83,$9F,$A7,$2D,$58
 $7B10 DEFB $F1,$AA,$F6,$4F,$4D,$92,$E6,$66
 $7B18 DEFB $01,$88,$E9,$4C,$78,$2C,$0D,$E2
 $7B20 DEFB $4E,$DE,$20,$A2,$AE,$40,$F4,$97
 $7B28 DEFB $66,$02,$9E,$59,$16,$BC,$5D,$40
 $7B30 DEFB $06,$FF,$F1,$CB,$93,$47,$CF,$B8
 $7B38 DEFB $1B,$03,$FA,$4C,$5F,$E0,$E3,$B6
 $7B40 DEFB $6C,$C5,$F7,$83,$AA,$D4,$5A,$95
 $7B48 DEFB $E6,$AC,$6F,$96,$FD,$5D,$89,$39
 $7B50 DEFB $FD,$23,$48,$59,$25,$07,$39,$C4
 $7B58 DEFB $7C,$77,$09,$EC,$4B,$0E,$1A,$C8
 $7B60 DEFB $CF,$DB,$52,$0A,$04,$55,$E7,$E7
 $7B68 DEFB $DB,$56,$69,$03,$F9,$36,$EF,$16
 $7B70 DEFB $9E,$85,$38,$A1,$45,$70,$FF,$E3
 $7B78 DEFB $C2,$07,$22,$28,$D2,$9E,$4F,$57
 $7B80 DEFB $BF,$13,$A3,$F7,$89,$61,$93,$28
 $7B88 DEFB $F8,$B0,$B5,$49,$79,$80,$AF,$5C
 $7B90 DEFB $1B,$20,$79,$94,$9B,$87,$A2,$B3
 $7B98 DEFB $8A,$83,$72,$70,$D9,$A5,$7C,$81
 $7BA0 DEFB $DF,$5A,$5F,$F0,$5A,$72,$84,$C5
 $7BA8 DEFB $D0,$03,$14,$EF,$48,$36,$D8,$90
 $7BB0 DEFB $64,$76,$C3,$3D,$ED,$9A,$3A,$26
 $7BB8 DEFB $27,$7E,$FC,$D5,$8A,$7D,$BA,$B1
 $7BC0 DEFB $0B,$43,$B3,$77,$04,$76,$DC,$9E
 $7BC8 DEFB $87,$90,$61,$6E,$84,$C1,$B2,$54
 $7BD0 DEFB $CE,$70,$D2,$96,$FE,$89,$69,$CE
 $7BD8 DEFB $86,$84,$B0,$A2,$89,$2E,$8E,$A6
 $7BE0 DEFB $AC,$94,$92,$F4,$85,$FE,$76,$D4
 $7BE8 DEFB $63,$29,$04,$61,$82,$44,$0C,$A5
 $7BF0 DEFB $5D,$7E,$F7,$5F,$1B,$0E,$27,$79
 $7BF8 DEFB $9C,$D6,$E5,$2E,$B3,$76,$C3,$27
 $7C00 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $7C08 DEFB $00,$00,$00,$04,$00,$00,$00,$05
 $7C10 DEFB $00,$00,$01,$00,$00,$00,$01,$01
 $7C18 DEFB $00,$00,$01,$04,$00,$00,$01,$05
 $7C20 DEFB $00,$00,$04,$00,$00,$00,$04,$01
 $7C28 DEFB $00,$00,$04,$04,$00,$00,$04,$05
 $7C30 DEFB $00,$00,$05,$00,$00,$00,$05,$01
 $7C38 DEFB $00,$05,$05,$05,$00,$00,$00,$00
 $7C40 DEFB $0C,$0C,$0C,$0C,$0C,$0C,$0C,$00
 $7C48 DEFB $07,$0C,$0C,$0C,$0C,$07,$00,$00
 $7C50 DEFB $0B,$02,$03,$02,$03,$08,$00,$00
 $7C58 DEFB $0C,$00,$08,$00,$0C,$00,$00,$00
 $7C60 DEFB $08,$09,$09,$09,$09,$00,$00,$00
 $7C68 DEFB $0F,$08,$08,$08,$08,$0F,$00,$00
 $7C70 DEFB $03,$03,$03,$03,$03,$03,$03,$00
 $7C78 DEFB $0F,$00,$00,$0C,$00,$00,$0F,$00
 $7C80 DEFB $00,$01,$01,$01,$0F,$0F,$08,$08
 $7C88 DEFB $0F,$0F,$01,$01,$0F,$0F,$03,$03
 $7C90 DEFB $00,$08,$08,$08,$01,$01,$01,$01
 $7C98 DEFB $08,$08,$08,$08,$0F,$0C,$0F,$0F
 $7CA0 DEFB $0F,$08,$0F,$0F,$0F,$06,$0F,$0F
 $7CA8 DEFB $0F,$0B,$0F,$0F,$0F,$0D,$0B,$0F
 $7CB0 DEFB $0F,$0A,$06,$0F,$00,$00,$00,$0F
 $7CB8 DEFB $0F,$00,$00,$0F,$0F,$0C,$0C,$0F
 $7CC0 DEFB $0F,$0F,$0F,$0F,$0B,$0B,$0B,$0B
 $7CC8 DEFB $08,$04,$04,$04,$01,$01,$00,$00
 $7CD0 DEFB $0F,$0B,$01,$00,$0F,$06,$0C,$00
 $7CD8 DEFB $0F,$0F,$00,$00,$0F,$0E,$00,$00
 $7CE0 DEFB $0F,$0B,$07,$00,$0E,$0B,$00,$00
 $7CE8 DEFB $04,$0F,$00,$00,$08,$08,$00,$00
 $7CF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CF8 DEFB $0F,$0B,$0D,$03,$00,$00,$00,$03
 $7D00 DEFB $0F,$08,$07,$08,$00,$07,$08,$00
 $7D08 DEFB $0F,$00,$0F,$00,$00,$0F,$00,$00
 $7D10 DEFB $0F,$04,$0F,$00,$00,$0F,$01,$01
 $7D18 DEFB $00,$00,$08,$0C,$0F,$0E,$05,$0E
 $7D20 DEFB $0E,$02,$0E,$00,$01,$01,$01,$01
 $7D28 DEFB $00,$03,$04,$08,$0F,$03,$0F,$0C
 $7D30 DEFB $00,$0F,$00,$07,$0F,$0F,$0F,$00
 $7D38 DEFB $00,$0F,$00,$0C,$00,$08,$04,$02
 $7D40 DEFB $0F,$09,$0F,$07,$01,$01,$00,$01
 $7D48 DEFB $00,$01,$01,$01,$0F,$0F,$08,$08
 $7D50 DEFB $0F,$0F,$01,$01,$0F,$0F,$03,$03
 $7D58 DEFB $00,$08,$08,$08,$01,$01,$01,$01
 $7D60 DEFB $08,$08,$08,$08,$0F,$0C,$0F,$0F
 $7D68 DEFB $0F,$08,$0F,$0F,$0F,$06,$0F,$0F
 $7D70 DEFB $0F,$0B,$0F,$0F,$0F,$0D,$0B,$0F
 $7D78 DEFB $0F,$0A,$06,$0F,$00,$00,$00,$0F
 $7D80 DEFB $0F,$00,$00,$0F,$0F,$0C,$0C,$0F
 $7D88 DEFB $0F,$0F,$0F,$0F,$0B,$0B,$0B,$0B
 $7D90 DEFB $08,$04,$04,$04,$01,$01,$00,$00
 $7D98 DEFB $0F,$0B,$01,$00,$0F,$06,$0C,$00
 $7DA0 DEFB $0F,$0F,$00,$00,$0F,$0E,$00,$00
 $7DA8 DEFB $0F,$0B,$07,$00,$0E,$0B,$00,$00
 $7DB0 DEFB $04,$0F,$00,$00,$08,$08,$00,$00
 $7DB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DC0 DEFB $0F,$0B,$0D,$03,$00,$00,$00,$03
 $7DC8 DEFB $0F,$08,$07,$08,$00,$07,$08,$00
 $7DD0 DEFB $0F,$00,$0F,$00,$00,$0F,$00,$00
 $7DD8 DEFB $0F,$04,$0F,$00,$00,$0F,$01,$01
 $7DE0 DEFB $00,$00,$08,$0C,$0F,$0E,$05,$0E
 $7DE8 DEFB $0E,$02,$0E,$00,$01,$01,$01,$01
 $7DF0 DEFB $00,$03,$04,$08,$0F,$03,$0F,$0C
 $7DF8 DEFB $00,$0F,$00,$07,$0F,$0F,$0F,$00
 $7E00 DEFB $00,$0F,$00,$0C,$00,$08,$04,$02
 $7E08 DEFB $0F,$09,$0F,$07,$00,$07,$08,$0B
 $7E10 DEFB $09,$07,$00,$00,$00,$01,$02,$03
 $7E18 DEFB $02,$02,$00,$00,$00,$08,$04,$0C
 $7E20 DEFB $04,$04,$00,$00,$00,$0F,$08,$0F
 $7E28 DEFB $01,$0F,$00,$00,$04,$00,$04,$05
 $7E30 DEFB $04,$00,$05,$00,$04,$00,$05,$01
 $7E38 DEFB $04,$00,$05,$04,$04,$00,$05,$05
 $7E40 DEFB $04,$01,$00,$00,$04,$01,$00,$01
 $7E48 DEFB $04,$01,$00,$04,$04,$01,$00,$05
 $7E50 DEFB $04,$01,$01,$00,$04,$01,$01,$01
 $7E58 DEFB $04,$01,$01,$04,$04,$01,$01,$05
 $7E60 DEFB $04,$01,$04,$00,$04,$01,$04,$01
 $7E68 DEFB $04,$01,$04,$04,$04,$01,$04,$05
 $7E70 DEFB $04,$01,$05,$00,$04,$01,$05,$01
 $7E78 DEFB $04,$01,$05,$04,$04,$01,$05,$05
 $7E80 DEFB $04,$04,$00,$00,$04,$04,$00,$01
 $7E88 DEFB $04,$04,$00,$04,$04,$04,$00,$05
 $7E90 DEFB $04,$04,$01,$00,$04,$04,$01,$01
 $7E98 DEFB $04,$04,$01,$04,$04,$04,$01,$05
 $7EA0 DEFB $04,$04,$04,$00,$04,$04,$04,$01
 $7EA8 DEFB $04,$04,$04,$04,$00,$01,$05,$05
 $7EB0 DEFB $00,$04,$05,$05,$01,$01,$01,$01
 $7EB8 DEFB $01,$04,$00,$00,$01,$05,$01,$00
 $7EC0 DEFB $01,$05,$05,$05,$04,$00,$00,$00
 $7EC8 DEFB $04,$05,$00,$04,$04,$05,$00,$05
 $7ED0 DEFB $04,$05,$01,$00,$04,$05,$01,$01
 $7ED8 DEFB $04,$05,$01,$04,$04,$05,$01,$05
 $7EE0 DEFB $04,$05,$04,$00,$04,$05,$04,$01
 $7EE8 DEFB $04,$05,$04,$04,$04,$05,$04,$05
 $7EF0 DEFB $04,$05,$05,$00,$04,$05,$05,$01
 $7EF8 DEFB $04,$05,$05,$04,$04,$05,$05,$05
 $7F00 DEFB $05,$00,$00,$00,$05,$00,$00,$01
 $7F08 DEFB $05,$00,$00,$04,$05,$00,$00,$05
 $7F10 DEFB $05,$00,$01,$00,$05,$00,$01,$01
 $7F18 DEFB $05,$00,$01,$04,$05,$00,$01,$05
 $7F20 DEFB $05,$00,$04,$00,$05,$00,$04,$01
 $7F28 DEFB $05,$00,$04,$04,$05,$00,$04,$05
 $7F30 DEFB $05,$00,$05,$00,$05,$00,$05,$01
 $7F38 DEFB $05,$00,$05,$04,$05,$00,$05,$05
 $7F40 DEFB $05,$01,$00,$00,$05,$01,$00,$01
 $7F48 DEFB $05,$01,$00,$04,$05,$01,$00,$05
 $7F50 DEFB $05,$01,$01,$00,$05,$01,$01,$01
 $7F58 DEFB $05,$01,$01,$04,$05,$01,$01,$05
 $7F60 DEFB $05,$01,$04,$00,$05,$01,$04,$01
 $7F68 DEFB $05,$01,$04,$04,$05,$01,$04,$05
 $7F70 DEFB $05,$01,$05,$00,$05,$01,$05,$01
 $7F78 DEFB $05,$01,$05,$04,$05,$01,$05,$05
 $7F80 DEFB $05,$04,$00,$00,$05,$04,$00,$01
 $7F88 DEFB $05,$04,$00,$04,$05,$04,$00,$05
 $7F90 DEFB $05,$04,$01,$00,$05,$04,$01,$01
 $7F98 DEFB $05,$04,$01,$04,$05,$04,$01,$05
 $7FA0 DEFB $05,$04,$04,$00,$05,$04,$04,$01
 $7FA8 DEFB $05,$04,$04,$04,$05,$04,$04,$05
 $7FB0 DEFB $05,$04,$05,$00,$05,$04,$05,$01
 $7FB8 DEFB $05,$04,$05,$04,$05,$04,$05,$05
 $7FC0 DEFB $05,$05,$00,$00,$05,$05,$00,$01
 $7FC8 DEFB $05,$05,$00,$04,$05,$05,$00,$05
 $7FD0 DEFB $05,$05,$01,$00,$05,$05,$01,$01
 $7FD8 DEFB $05,$05,$01,$04,$05,$05,$01,$05
 $7FE0 DEFB $05,$05,$04,$00,$05,$05,$04,$01
 $7FE8 DEFB $05,$05,$04,$04,$05,$05,$04,$05
 $7FF0 DEFB $05,$05,$05,$00,$05,$05,$05,$01
 $7FF8 DEFB $05,$05,$05,$04,$05,$05,$05,$05

; Graphics Data
b$8000 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; {#UDGARRAY$20,attr=$07,scale=$02;(#PC)-(#PC+$1F){$00,$00,$100,$01}(terrain_line_solid)
 $8008 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $8010 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $8018 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; }
 $8020 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF ; {#UDGARRAY$20,attr=$07,scale=$02;(#PC)-(#PC+$1F){$00,$00,$100,$01}(terrain_line_stripes)
 $8028 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF ;
 $8030 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF ;
 $8038 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF ; }
 $8040 DEFB $00,$00,$D0,$00,$00,$00,$FD,$00 ; {#UDGARRAY$20,attr=$07,scale=$02;(#PC)-(#PC+$1F){$00,$00,$100,$01}(terrain_line_edge1)
 $8048 DEFB $00,$00,$FC,$00,$00,$00,$F8,$00 ;
 $8050 DEFB $00,$07,$FD,$00,$00,$B0,$FD,$00 ;
 $8058 DEFB $07,$FF,$FE,$00,$B0,$FF,$F0,$00 ; }
 $8060 DEFB $BF,$FF,$FD,$00,$0B,$FF,$D0,$00 ; {#UDGARRAY$20,attr=$07,scale=$02;(#PC)-(#PC+$1F){$00,$00,$100,$01}(terrain_line_edge2)
 $8068 DEFB $00,$BF,$FE,$00,$00,$0B,$FE,$00 ;
 $8070 DEFB $00,$00,$D0,$00,$00,$00,$F0,$00 ;
 $8078 DEFB $00,$00,$E0,$00,$00,$00,$F8,$00 ; }
 $8080 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF ; {#UDGARRAY$20,attr=$07,scale=$02;(#PC)-(#PC+$1F){$00,$00,$100,$01}(terrain_line_edge3)
 $8088 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF ;
 $8090 DEFB $00,$07,$FF,$FF,$00,$B0,$FF,$FF ;
 $8098 DEFB $07,$FF,$FF,$FF,$B0,$FF,$FF,$FF ; }
 $80A0 DEFB $BF,$FF,$FF,$FF,$0B,$FF,$FF,$FF ; {#UDGARRAY$20,attr=$07,scale=$02;(#PC)-(#PC+$1F){$00,$00,$100,$01}(terrain_line_edge4)
 $80A8 DEFB $00,$BF,$FF,$FF,$00,$0B,$FF,$FF ;
 $80B0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF ;
 $80B8 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF ; }
 $80C0 DEFB $00,$00,$E8,$00,$00,$00,$C0,$00
 $80C8 DEFB $00,$00,$F5,$00,$00,$00,$FF,$00
 $80D0 DEFB $00,$06,$FE,$00,$00,$AE,$E0,$00
 $80D8 DEFB $06,$00,$FC,$00,$AE,$00,$F0,$00
 $80E0 DEFB $90,$00,$E0,$00,$09,$00,$F4,$00
 $80E8 DEFB $00,$90,$FD,$00,$00,$09,$FF,$00
 $80F0 DEFB $00,$00,$F4,$00,$00,$00,$FC,$00
 $80F8 DEFB $00,$00,$FE,$00,$00,$00,$F8,$00
 $8100 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8108 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8110 DEFB $00,$06,$FF,$FF,$00,$AE,$FF,$FF
 $8118 DEFB $06,$00,$FF,$FF,$AE,$00,$FF,$FF
 $8120 DEFB $90,$00,$FF,$FF,$09,$00,$FF,$FF
 $8128 DEFB $00,$90,$FF,$FF,$00,$09,$FF,$FF
 $8130 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8138 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8140 DEFB $00,$00,$00,$07,$00,$00,$00,$B0
 $8148 DEFB $00,$00,$07,$FF,$00,$00,$B0,$FF
 $8150 DEFB $00,$07,$FF,$FF,$00,$B0,$FF,$FF
 $8158 DEFB $07,$FF,$FF,$FF,$B0,$FF,$FF,$FF
 $8160 DEFB $BF,$FF,$FF,$FF,$0B,$FF,$FF,$FF
 $8168 DEFB $00,$BF,$FF,$FF,$00,$0B,$FF,$FF
 $8170 DEFB $00,$00,$BF,$FF,$00,$00,$0B,$FF
 $8178 DEFB $00,$00,$00,$BF,$00,$00,$00,$0B
 $8180 DEFB $00,$00,$F5,$00,$00,$00,$FE,$00
 $8188 DEFB $00,$00,$FC,$00,$00,$00,$FD,$00
 $8190 DEFB $00,$00,$B8,$00,$00,$00,$09,$00
 $8198 DEFB $00,$00,$00,$90,$00,$00,$00,$09
 $81A0 DEFB $00,$00,$00,$06,$00,$00,$00,$AE
 $81A8 DEFB $00,$00,$06,$00,$00,$00,$AF,$00
 $81B0 DEFB $00,$00,$F5,$00,$00,$00,$FF,$00
 $81B8 DEFB $00,$00,$F0,$00,$00,$00,$F4,$00
 $81C0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $81C8 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $81D0 DEFB $00,$00,$BF,$FF,$00,$00,$0B,$FF
 $81D8 DEFB $00,$00,$00,$BF,$00,$00,$00,$0B
 $81E0 DEFB $00,$00,$00,$07,$00,$00,$00,$B0
 $81E8 DEFB $00,$00,$07,$FF,$00,$00,$B0,$FF
 $81F0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $81F8 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8200 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8208 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8210 DEFB $00,$00,$FF,$FF,$00,$00,$CB,$FF
 $8218 DEFB $00,$00,$C0,$BF,$00,$00,$C0,$0B
 $8220 DEFB $00,$00,$C0,$07,$00,$00,$C0,$B0
 $8228 DEFB $00,$00,$C7,$FF,$00,$00,$FF,$FF
 $8230 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8238 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8240 DEFB $00,$00,$F5,$00,$00,$00,$FE,$00
 $8248 DEFB $00,$00,$FC,$00,$00,$00,$FD,$00
 $8250 DEFB $00,$00,$F4,$00,$00,$00,$C9,$00
 $8258 DEFB $00,$00,$C0,$90,$00,$00,$C0,$09
 $8260 DEFB $00,$00,$C0,$06,$00,$00,$C0,$AE
 $8268 DEFB $00,$00,$C6,$00,$00,$00,$F4,$00
 $8270 DEFB $00,$00,$F5,$00,$00,$00,$FF,$00
 $8278 DEFB $00,$00,$F0,$00,$00,$00,$F4,$00
 $8280 DEFB $D4,$00,$00,$00,$F8,$00,$00,$00
 $8288 DEFB $FD,$00,$00,$00,$FF,$FD,$00,$00
 $8290 DEFB $FF,$FF,$00,$00,$FF,$FF,$D4,$00
 $8298 DEFB $FF,$FF,$FE,$00,$FF,$FF,$F8,$00
 $82A0 DEFB $FF,$FF,$F4,$00,$FF,$FF,$FE,$00
 $82A8 DEFB $FF,$FF,$E8,$00,$FF,$FF,$00,$00
 $82B0 DEFB $FF,$FE,$00,$00,$FE,$00,$00,$00
 $82B8 DEFB $F4,$00,$00,$00,$E8,$00,$00,$00
 $82C0 DEFB $00,$00,$C0,$00,$00,$00,$C0,$00
 $82C8 DEFB $00,$00,$C0,$00,$00,$00,$C0,$00
 $82D0 DEFB $00,$00,$D0,$00,$00,$00,$FC,$00
 $82D8 DEFB $00,$00,$F5,$00,$00,$00,$FA,$00
 $82E0 DEFB $00,$00,$D4,$00,$00,$00,$FF,$00
 $82E8 DEFB $00,$00,$FE,$00,$00,$00,$F8,$00
 $82F0 DEFB $00,$00,$C0,$00,$00,$00,$C0,$00
 $82F8 DEFB $00,$00,$C0,$00,$00,$00,$C0,$00
 $8300 DEFB $00,$00,$FF,$FA,$00,$00,$FF,$F8
 $8308 DEFB $00,$00,$FE,$00,$00,$00,$F8,$00
 $8310 DEFB $00,$07,$FD,$00,$00,$B0,$FD,$00
 $8318 DEFB $07,$FF,$FE,$00,$B0,$FF,$F0,$00
 $8320 DEFB $BF,$FF,$FD,$00,$0B,$FF,$D0,$00
 $8328 DEFB $00,$BF,$FE,$00,$00,$0B,$FE,$00
 $8330 DEFB $00,$00,$FF,$00,$00,$00,$F4,$00
 $8338 DEFB $00,$00,$FF,$D0,$00,$00,$FF,$F5
 $8340 DEFB $FF,$FF,$FF,$F8,$FF,$FF,$FF,$E0
 $8348 DEFB $FF,$FF,$F8,$00,$FF,$FF,$C0,$00
 $8350 DEFB $FF,$F8,$00,$00,$FE,$00,$00,$00
 $8358 DEFB $F4,$00,$00,$00,$E8,$00,$00,$00
 $8360 DEFB $D4,$00,$00,$00,$F8,$00,$00,$00
 $8368 DEFB $FD,$00,$00,$00,$FF,$F4,$00,$00
 $8370 DEFB $FF,$FF,$C0,$00,$FF,$FF,$F4,$00
 $8378 DEFB $FF,$FF,$FF,$D0,$FF,$FF,$FF,$F4
 $8380 DEFB $00,$00,$FF,$FE,$00,$00,$FF,$C0
 $8388 DEFB $00,$00,$FE,$00,$00,$00,$F0,$00
 $8390 DEFB $00,$00,$C0,$00,$00,$00,$C0,$00
 $8398 DEFB $00,$00,$C0,$00,$00,$00,$C0,$00
 $83A0 DEFB $00,$00,$C0,$00,$00,$00,$C0,$00
 $83A8 DEFB $00,$00,$C0,$00,$00,$00,$C0,$00
 $83B0 DEFB $00,$00,$D4,$00,$00,$00,$FF,$00
 $83B8 DEFB $00,$00,$FF,$D0,$00,$00,$FF,$FD
 $83C0 DEFB $BF,$FF,$D5,$00,$0B,$FF,$FE,$00
 $83C8 DEFB $00,$BF,$F0,$00,$00,$0B,$FD,$00
 $83D0 DEFB $00,$00,$B8,$00,$00,$00,$09,$00
 $83D8 DEFB $00,$00,$00,$90,$00,$00,$00,$09
 $83E0 DEFB $00,$00,$00,$06,$00,$00,$00,$AE
 $83E8 DEFB $00,$00,$06,$00,$00,$00,$AF,$00
 $83F0 DEFB $00,$07,$FD,$00,$00,$B0,$FD,$00
 $83F8 DEFB $07,$FF,$FE,$00,$B0,$FF,$F0,$00
 $8400 DEFB $00,$00,$F4,$00,$00,$00,$FA,$00
 $8408 DEFB $00,$00,$E0,$00,$00,$00,$F4,$00
 $8410 DEFB $00,$00,$FF,$00,$00,$00,$FF,$C0
 $8418 DEFB $00,$00,$FF,$D0,$00,$00,$FF,$FD
 $8420 DEFB $00,$00,$FF,$FE,$00,$00,$FF,$C0
 $8428 DEFB $00,$00,$FE,$00,$00,$00,$FE,$00
 $8430 DEFB $00,$00,$F0,$00,$00,$00,$C0,$00
 $8438 DEFB $00,$00,$F8,$00,$00,$00,$E8,$00
 $8440 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8448 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8450 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8458 DEFB $FF,$FF,$FF,$FF,$AA,$AA,$FF,$FF
 $8460 DEFB $AD,$AD,$FF,$FF,$FF,$FF,$FF,$FF
 $8468 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8470 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8478 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8480 DEFB $00,$00,$F4,$00,$00,$00,$E0,$00
 $8488 DEFB $00,$00,$FC,$00,$00,$00,$FF,$00
 $8490 DEFB $00,$00,$FE,$00,$00,$00,$C0,$00
 $8498 DEFB $FF,$FF,$D0,$00,$AA,$AA,$FC,$00
 $84A0 DEFB $AD,$AD,$F4,$00,$FF,$FF,$FC,$00
 $84A8 DEFB $00,$00,$F0,$00,$00,$00,$D0,$00
 $84B0 DEFB $00,$00,$F4,$00,$00,$00,$FC,$00
 $84B8 DEFB $00,$00,$F8,$00,$00,$00,$D0,$00
 $84C0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $84C8 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $84D0 DEFB $00,$00,$FF,$FF,$00,$01,$FF,$FF
 $84D8 DEFB $00,$07,$FF,$FF,$00,$AB,$FF,$FF
 $84E0 DEFB $00,$AC,$FF,$FF,$00,$0B,$FF,$FF
 $84E8 DEFB $00,$02,$FF,$FF,$00,$00,$FF,$FF
 $84F0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $84F8 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8500 DEFB $FF,$FF,$F4,$00,$FF,$FF,$FA,$00
 $8508 DEFB $FF,$FF,$E0,$00,$FF,$FF,$F4,$00
 $8510 DEFB $FF,$FF,$FF,$00,$FF,$FF,$FF,$C0
 $8518 DEFB $FF,$FF,$FF,$D0,$FF,$FF,$FF,$FD
 $8520 DEFB $FF,$FF,$FF,$FE,$FF,$FF,$FF,$C0
 $8528 DEFB $FF,$FF,$FE,$00,$FF,$FF,$FE,$00
 $8530 DEFB $FF,$FF,$F0,$00,$FF,$FF,$C0,$00
 $8538 DEFB $FF,$FF,$F8,$00,$FF,$FF,$E8,$00
 $8540 DEFB $FF,$FF,$C0,$00,$FF,$FF,$FF,$00
 $8548 DEFB $FF,$FF,$F8,$00,$FF,$FF,$FD,$00
 $8550 DEFB $FF,$FF,$FD,$00,$FF,$FF,$F0,$00
 $8558 DEFB $FF,$FF,$FE,$00,$FF,$FF,$F4,$00
 $8560 DEFB $FF,$FF,$F8,$00,$FF,$FF,$E0,$00
 $8568 DEFB $FF,$FF,$D0,$00,$FF,$FF,$F0,$00
 $8570 DEFB $FF,$FF,$FC,$00,$FF,$FF,$F0,$00
 $8578 DEFB $FF,$FF,$D0,$00,$FF,$FF,$D0,$00
 $8580 DEFB $FF,$FF,$F5,$00,$FF,$FF,$FF,$00
 $8588 DEFB $FF,$FF,$F5,$00,$FF,$FF,$FE,$00
 $8590 DEFB $FF,$FF,$E8,$00,$FF,$FF,$E0,$00
 $8598 DEFB $FF,$FF,$F0,$00,$FF,$FF,$D4,$00
 $85A0 DEFB $FF,$FF,$FD,$00,$FF,$FF,$F8,$00
 $85A8 DEFB $FF,$FF,$C0,$00,$FF,$FF,$D0,$00
 $85B0 DEFB $FF,$FF,$FD,$00,$FF,$FF,$FA,$00
 $85B8 DEFB $FF,$FF,$C0,$00,$FF,$FF,$F0,$00
 $85C0 DEFB $00,$00,$F8,$00,$00,$00,$FD,$00
 $85C8 DEFB $00,$00,$F0,$00,$00,$00,$FE,$00
 $85D0 DEFB $00,$00,$FE,$00,$00,$00,$F4,$00
 $85D8 DEFB $00,$00,$FF,$00,$00,$00,$C0,$00
 $85E0 DEFB $00,$00,$E0,$00,$00,$00,$E0,$00
 $85E8 DEFB $00,$00,$F0,$00,$00,$00,$FC,$00
 $85F0 DEFB $00,$00,$F0,$00,$00,$00,$E0,$00
 $85F8 DEFB $00,$00,$D0,$00,$00,$00,$F4,$00
 $8600 DEFB $00,$00,$E8,$00,$00,$00,$F0,$00
 $8608 DEFB $00,$00,$D0,$00,$00,$00,$D4,$00
 $8610 DEFB $00,$00,$FD,$00,$00,$00,$FA,$00
 $8618 DEFB $00,$00,$FF,$00,$00,$00,$FA,$00
 $8620 DEFB $00,$00,$F0,$00,$00,$00,$C0,$00
 $8628 DEFB $00,$00,$F5,$00,$00,$00,$FE,$00
 $8630 DEFB $00,$00,$E0,$00,$00,$00,$C0,$00
 $8638 DEFB $00,$00,$F4,$00,$00,$00,$FE,$00
 $8640 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8648 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8650 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8658 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8660 DEFB $6F,$6F,$E0,$00,$6F,$6F,$E0,$00
 $8668 DEFB $83,$84,$F0,$00,$85,$86,$FC,$00
 $8670 DEFB $87,$88,$F0,$00,$89,$8A,$E0,$00
 $8678 DEFB $6F,$6F,$D0,$00,$6F,$6F,$F4,$00
 $8680 DEFB $00,$00,$FF,$FF,$0F,$0F,$FF,$FF
 $8688 DEFB $18,$19,$FF,$FF,$1A,$1B,$FF,$FF
 $8690 DEFB $1C,$1D,$FF,$FF,$1E,$1F,$FF,$FF
 $8698 DEFB $0F,$0F,$FF,$FF,$00,$00,$FF,$FF
 $86A0 DEFB $00,$00,$FF,$FF,$0F,$0F,$FF,$FF
 $86A8 DEFB $10,$11,$FF,$FF,$12,$13,$FF,$FF
 $86B0 DEFB $14,$15,$FF,$FF,$16,$17,$FF,$FF
 $86B8 DEFB $0F,$0F,$FF,$FF,$00,$00,$FF,$FF
 $86C0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $86C8 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $86D0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $86D8 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $86E0 DEFB $00,$00,$00,$00,$00,$3C,$3C,$3C
 $86E8 DEFB $00,$20,$25,$25,$00,$21,$27,$2D
 $86F0 DEFB $00,$22,$28,$2F,$00,$21,$29,$2E
 $86F8 DEFB $00,$22,$28,$2F,$00,$21,$27,$2E
 $8700 DEFB $00,$22,$2A,$2F,$00,$21,$29,$2E
 $8708 DEFB $00,$22,$28,$30,$00,$21,$2B,$31
 $8710 DEFB $00,$23,$2C,$32,$00,$24,$26,$26
 $8718 DEFB $00,$3C,$3C,$3C,$00,$00,$00,$00
 $8720 DEFB $00,$FF,$FF,$FF,$3C,$FF,$FF,$FF
 $8728 DEFB $33,$FF,$FF,$FF,$36,$FF,$FF,$FF
 $8730 DEFB $34,$FF,$FF,$FF,$35,$FF,$FF,$FF
 $8738 DEFB $36,$FF,$FF,$FF,$36,$FF,$FF,$FF
 $8740 DEFB $36,$FF,$FF,$FF,$37,$FF,$FF,$FF
 $8748 DEFB $38,$FF,$FF,$FF,$39,$FF,$FF,$FF
 $8750 DEFB $3A,$FF,$FF,$FF,$3B,$FF,$FF,$FF
 $8758 DEFB $3C,$FF,$FF,$FF,$00,$FF,$FF,$FF
 $8760 DEFB $00,$FF,$F8,$00,$3C,$FF,$FD,$00
 $8768 DEFB $33,$FF,$F0,$00,$36,$FF,$FE,$00
 $8770 DEFB $34,$FF,$FE,$00,$35,$FF,$F4,$00
 $8778 DEFB $36,$FF,$D0,$00,$36,$FF,$F4,$00
 $8780 DEFB $36,$FF,$F8,$00,$37,$FF,$FD,$00
 $8788 DEFB $38,$FF,$F0,$00,$39,$FF,$FE,$00
 $8790 DEFB $3A,$FF,$FE,$00,$3B,$FF,$F4,$00
 $8798 DEFB $3C,$FF,$D0,$00,$00,$FF,$F4,$00
 $87A0 DEFB $00,$00,$00,$00,$00,$6E,$6E,$6E
 $87A8 DEFB $00,$52,$57,$57,$00,$53,$59,$5F
 $87B0 DEFB $00,$54,$5A,$61,$00,$53,$5B,$60
 $87B8 DEFB $00,$54,$5A,$61,$00,$53,$59,$60
 $87C0 DEFB $00,$54,$5C,$61,$00,$53,$5B,$60
 $87C8 DEFB $00,$54,$5A,$62,$00,$53,$5D,$63
 $87D0 DEFB $00,$55,$5E,$64,$00,$56,$58,$58
 $87D8 DEFB $00,$6E,$6E,$6E,$00,$00,$00,$00
 $87E0 DEFB $00,$FF,$FF,$FF,$6E,$FF,$FF,$FF
 $87E8 DEFB $65,$FF,$FF,$FF,$68,$FF,$FF,$FF
 $87F0 DEFB $66,$FF,$FF,$FF,$67,$FF,$FF,$FF
 $87F8 DEFB $68,$FF,$FF,$FF,$68,$FF,$FF,$FF
 $8800 DEFB $68,$FF,$FF,$FF,$69,$FF,$FF,$FF
 $8808 DEFB $6A,$FF,$FF,$FF,$6B,$FF,$FF,$FF
 $8810 DEFB $6C,$FF,$FF,$FF,$6D,$FF,$FF,$FF
 $8818 DEFB $6E,$FF,$FF,$FF,$00,$FF,$FF,$FF
 $8820 DEFB $00,$FF,$F8,$00,$6E,$FF,$FD,$00
 $8828 DEFB $65,$FF,$F0,$00,$68,$FF,$FE,$00
 $8830 DEFB $66,$FF,$FE,$00,$67,$FF,$F4,$00
 $8838 DEFB $68,$FF,$D0,$00,$68,$FF,$F4,$00
 $8840 DEFB $68,$FF,$F8,$00,$69,$FF,$FD,$00
 $8848 DEFB $6A,$FF,$F0,$00,$6B,$FF,$FE,$00
 $8850 DEFB $6C,$FF,$FE,$00,$6D,$FF,$F4,$00
 $8858 DEFB $6E,$FF,$D0,$00,$00,$FF,$F4,$00
 $8860 DEFB $00,$00,$00,$00,$00,$00,$3D,$3D
 $8868 DEFB $00,$00,$3D,$3E,$00,$00,$3F,$40
 $8870 DEFB $00,$00,$41,$42,$00,$00,$43,$44
 $8878 DEFB $00,$00,$45,$42,$00,$00,$46,$47
 $8880 DEFB $00,$00,$3D,$48,$00,$00,$3D,$49
 $8888 DEFB $00,$00,$4A,$4B,$00,$00,$4C,$4D
 $8890 DEFB $00,$00,$4E,$4D,$00,$00,$4F,$50
 $8898 DEFB $00,$00,$3D,$3D,$00,$00,$00,$00
 $88A0 DEFB $00,$00,$00,$00,$00,$00,$6F,$6F
 $88A8 DEFB $00,$00,$6F,$70,$00,$00,$71,$72
 $88B0 DEFB $00,$00,$73,$74,$00,$00,$75,$76
 $88B8 DEFB $00,$00,$77,$74,$00,$00,$78,$79
 $88C0 DEFB $00,$00,$6F,$7A,$00,$00,$6F,$7B
 $88C8 DEFB $00,$00,$7C,$7D,$00,$00,$7E,$7F
 $88D0 DEFB $00,$00,$80,$7F,$00,$00,$81,$82
 $88D8 DEFB $00,$00,$6F,$6F,$00,$00,$00,$00
 $88E0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $88E8 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $88F0 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $88F8 DEFB $00,$00,$FF,$FF,$00,$0E,$FF,$FF
 $8900 DEFB $00,$0E,$FF,$FF,$00,$00,$FF,$FF
 $8908 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8910 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8918 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8920 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8928 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8930 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8938 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$FF
 $8940 DEFB $00,$00,$D0,$00,$00,$00,$F0,$00
 $8948 DEFB $00,$00,$E0,$00,$00,$00,$F8,$00
 $8950 DEFB $00,$00,$FA,$00,$00,$00,$FC,$00
 $8958 DEFB $00,$00,$F4,$00,$00,$00,$FD,$00

; Data: Level 1
;
; .
;
; .
;
; Page #N($01+(#PC-$8960)/$A0).
@label=Data_Level_1
g$8960 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $8980 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $89A0 DEFB $00,$2B,$2D,$2D,$2D,$2D,$2B,$2B,$2D,$2D,$2C,$2A,$2A,$2B,$2C,$2A,$2B,$2B,$2B,$2A,$2B,$2A,$2B,$2C,$2B,$2D,$2D,$2B,$2B,$2A,$2B,$00
 $89C0 DEFB $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$49,$01,$01,$01,$01,$01,$01,$49,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
 $89E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8A00 DEFB $00,$00,$00,$00,$00,$00,$29,$2C,$2D,$2A,$2B,$28,$00,$00,$00,$29,$2A,$2A,$2C,$2B,$2C,$2B,$2D,$2D,$2A,$2A,$28,$00,$00,$00,$00,$00
 $8A20 DEFB $00,$2D,$2C,$2C,$2D,$15,$0D,$2E,$2F,$30,$31,$0C,$14,$2C,$15,$0F,$01,$01,$1C,$11,$01,$32,$32,$32,$32,$01,$0E,$1B,$00,$00,$00,$00
 $8A40 DEFB $00,$01,$01,$10,$16,$06,$20,$01,$10,$16,$31,$31,$07,$2E,$02,$2B,$2B,$15,$1F,$2A,$2B,$2C,$2B,$2C,$2D,$00,$00,$0B,$14,$2A,$2A,$00
 $8A60 DEFB $00,$00,$00,$00,$05,$01,$0E,$14,$2D,$03,$30,$2F,$2F,$30,$12,$16,$30,$06,$31,$30,$2F,$30,$33,$4A,$24,$2D,$2C,$2B,$03,$30,$01,$00
 $8A80 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$09,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$49,$22,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8AA0 DEFB $00,$00,$2D,$2D,$2C,$2D,$2B,$2F,$2B,$2A,$2C,$2C,$2D,$2A,$2A,$2B,$2D,$2B,$2C,$2C,$2A,$2C,$2D,$2D,$2B,$28,$00,$00,$00,$00,$00,$00
 $8AC0 DEFB $00,$2B,$25,$4A,$30,$20,$10,$16,$30,$2F,$2E,$31,$2E,$2F,$30,$2F,$2E,$31,$31,$2F,$2F,$20,$01,$01,$01,$0E,$14,$2B,$2B,$2C,$2C,$00
 $8AE0 DEFB $00,$01,$10,$1D,$01,$0E,$14,$03,$2E,$2E,$30,$31,$31,$2E,$30,$30,$32,$32,$32,$32,$01,$0E,$1B,$00,$2D,$2A,$03,$17,$11,$01,$01,$00
 $8B00 DEFB $00,$00,$00,$0B,$14,$2B,$03,$30,$30,$2F,$31,$30,$2E,$33,$4A,$24,$2D,$2D,$2B,$2C,$2B,$2B,$1E,$14,$25,$4A,$31,$02,$2A,$2C,$00,$00
 $8B20 DEFB $00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$09,$01,$01,$01,$01,$49,$22,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8B40 DEFB $00,$00,$00,$00,$00,$00,$00,$29,$2D,$2D,$2B,$2B,$2C,$2C,$28,$00,$2A,$2B,$2C,$2B,$2D,$2D,$2A,$2A,$2D,$2B,$2B,$2A,$2C,$2B,$00,$00
 $8B60 DEFB $00,$00,$00,$00,$29,$2D,$15,$0F,$01,$32,$32,$32,$32,$01,$0E,$14,$25,$4A,$30,$33,$31,$2F,$31,$20,$10,$16,$30,$20,$49,$22,$00,$00
 $8B80 DEFB $00,$00,$00,$1A,$0F,$01,$18,$2B,$2A,$2B,$2D,$2D,$2A,$2C,$2B,$03,$30,$2F,$31,$2E,$2E,$31,$31,$0E,$14,$03,$2F,$0C,$14,$2D,$2D,$00
 $8BA0 DEFB $00,$2C,$15,$1F,$2A,$15,$0D,$2E,$2E,$2F,$2E,$30,$12,$16,$31,$30,$30,$17,$11,$01,$01,$49,$22,$00,$05,$01,$01,$01,$09,$01,$01,$00
 $8BC0 DEFB $00,$01,$08,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$09,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8BE0 DEFB $00,$00,$00,$00,$00,$2C,$2A,$2B,$2C,$2D,$2D,$2C,$2B,$2A,$2C,$2C,$2B,$2D,$2C,$2C,$2A,$2C,$2B,$2B,$2A,$2D,$28,$00,$00,$00,$00,$00
 $8C00 DEFB $00,$00,$00,$29,$2D,$25,$4A,$20,$01,$01,$01,$01,$01,$01,$01,$32,$32,$32,$32,$01,$01,$21,$2E,$17,$11,$01,$0E,$14,$2B,$2A,$2C,$00
 $8C20 DEFB $00,$2A,$15,$0D,$30,$30,$30,$0C,$14,$2A,$2A,$2B,$2C,$00,$29,$2C,$2C,$2D,$2D,$2B,$15,$0D,$20,$04,$00,$00,$00,$05,$01,$01,$01,$00
 $8C40 DEFB $00,$01,$08,$01,$10,$16,$31,$31,$07,$30,$33,$4A,$24,$15,$0F,$01,$32,$32,$32,$32,$08,$01,$0E,$14,$2C,$2D,$2D,$2C,$2B,$00,$00,$00
 $8C60 DEFB $00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$49,$22,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8C80 DEFB $00,$00,$00,$00,$00,$00,$29,$2A,$2B,$2C,$2D,$2B,$2C,$2B,$2A,$28,$00,$2A,$2B,$2B,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $8CA0 DEFB $00,$00,$00,$00,$00,$1A,$0F,$21,$2E,$2F,$2F,$30,$2F,$30,$20,$0E,$1B,$23,$49,$01,$0E,$14,$2A,$2A,$2B,$2C,$2B,$2D,$2A,$2C,$2B,$00
 $8CC0 DEFB $00,$2C,$2D,$2C,$15,$1F,$15,$0F,$01,$32,$32,$32,$32,$01,$0E,$1B,$0B,$14,$2C,$2D,$2B,$03,$2E,$33,$2F,$31,$17,$11,$01,$01,$01,$00
 $8CE0 DEFB $00,$01,$10,$16,$06,$2F,$02,$2A,$2C,$2D,$2B,$2C,$2A,$2D,$2D,$1E,$14,$03,$31,$30,$32,$32,$32,$32,$01,$01,$04,$00,$00,$00,$00,$00
 $8D00 DEFB $00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$09,$01,$49,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8D20 DEFB $00,$00,$00,$00,$29,$2C,$2D,$2A,$2B,$2A,$2C,$2A,$2B,$2D,$00,$00,$00,$00,$00,$29,$2B,$2D,$2C,$2D,$2B,$2A,$2A,$2D,$2C,$2A,$00,$00
 $8D40 DEFB $00,$2A,$2D,$15,$0D,$2F,$30,$01,$1C,$11,$21,$33,$4A,$24,$2A,$2C,$2D,$2B,$15,$0F,$1C,$11,$01,$32,$32,$32,$32,$01,$49,$22,$00,$00
 $8D60 DEFB $00,$01,$30,$06,$2F,$4A,$24,$15,$1F,$15,$0F,$01,$32,$32,$32,$32,$01,$21,$02,$15,$0A,$00,$29,$2C,$2D,$2B,$2A,$2C,$2B,$2C,$2D,$00
 $8D80 DEFB $00,$00,$23,$49,$01,$01,$01,$08,$01,$02,$2D,$2A,$2C,$2B,$2A,$2A,$15,$0D,$2F,$02,$2B,$15,$0D,$2E,$30,$2F,$30,$2F,$2E,$01,$01,$00
 $8DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$49,$01,$01,$01,$01,$01,$08,$01,$01,$01,$01,$08,$01,$01,$01,$01,$01,$49,$22,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8DC0 DEFB $00,$2B,$2D,$2A,$2B,$2B,$2A,$2D,$2C,$2D,$2D,$2B,$2A,$2C,$2C,$2D,$2A,$2B,$2A,$2C,$2D,$2A,$2B,$2C,$2D,$2B,$2C,$28,$00,$00,$00,$00
 $8DE0 DEFB $00,$23,$49,$21,$12,$16,$2E,$2F,$30,$31,$2E,$32,$32,$32,$32,$2F,$2E,$31,$2F,$2E,$30,$2F,$30,$31,$2E,$2E,$2F,$0C,$14,$2B,$2C,$00
 $8E00 DEFB $00,$2C,$15,$0D,$30,$07,$30,$2F,$2E,$4A,$24,$2C,$2B,$2B,$2D,$23,$49,$21,$2F,$31,$2E,$30,$2E,$2F,$30,$17,$11,$01,$09,$01,$01,$00
 $8E20 DEFB $00,$01,$08,$01,$01,$01,$10,$16,$30,$2E,$2F,$31,$33,$4A,$24,$2C,$15,$0F,$01,$32,$32,$32,$32,$01,$01,$04,$00,$00,$00,$00,$00,$00
 $8E40 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8E60 DEFB $00,$00,$00,$29,$2C,$2A,$2D,$2B,$2D,$2C,$2A,$28,$00,$00,$00,$00,$00,$00,$29,$2B,$2A,$2C,$2D,$2A,$2B,$2D,$00,$00,$00,$00,$00,$00
 $8E80 DEFB $00,$2A,$15,$0D,$20,$01,$32,$32,$32,$32,$01,$0E,$14,$2C,$2B,$2D,$2A,$15,$0F,$21,$2F,$31,$2E,$33,$4A,$24,$2C,$28,$00,$00,$00,$00
 $8EA0 DEFB $00,$01,$08,$01,$0E,$14,$2D,$2B,$2A,$2A,$2D,$28,$05,$32,$32,$32,$32,$04,$1A,$0F,$2F,$2E,$31,$30,$2E,$2F,$31,$0C,$14,$2D,$2A,$00
 $8EC0 DEFB $00,$00,$00,$00,$00,$05,$32,$32,$32,$32,$01,$0E,$14,$2C,$2B,$2D,$2C,$15,$0A,$00,$23,$49,$01,$01,$32,$32,$32,$32,$09,$01,$01,$00
 $8EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8F00 DEFB $00,$00,$00,$00,$00,$29,$2C,$2D,$2B,$2D,$2B,$2A,$2C,$2D,$2B,$2C,$2A,$00,$29,$2B,$2D,$2C,$2B,$2A,$2D,$28,$00,$00,$00,$00,$00,$00
 $8F20 DEFB $00,$2B,$2C,$2A,$15,$0F,$01,$01,$32,$32,$32,$32,$01,$21,$33,$4A,$24,$15,$0F,$21,$31,$2F,$30,$2E,$2F,$0C,$14,$2C,$2C,$2A,$2D,$00
 $8F40 DEFB $00,$01,$10,$16,$02,$28,$00,$2B,$2A,$2C,$2D,$2A,$15,$0F,$01,$21,$2F,$02,$15,$0F,$01,$32,$32,$32,$32,$01,$07,$2E,$2F,$30,$01,$00
 $8F60 DEFB $00,$00,$00,$05,$01,$0E,$14,$25,$4A,$31,$30,$2F,$02,$2B,$15,$0D,$30,$31,$02,$2D,$2A,$2B,$2D,$2C,$2A,$15,$0F,$01,$49,$22,$00,$00
 $8F80 DEFB $00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $8FA0 DEFB $00,$00,$00,$00,$00,$29,$2C,$2B,$2D,$2B,$2C,$2D,$2A,$2C,$2B,$2D,$2C,$2A,$2D,$2C,$2B,$2D,$2A,$2C,$2D,$28,$00,$00,$00,$00,$00,$00
 $8FC0 DEFB $00,$00,$00,$00,$1A,$0F,$01,$01,$01,$01,$21,$2F,$2E,$30,$31,$2F,$2E,$30,$31,$30,$20,$10,$1D,$01,$01,$0E,$14,$2C,$2D,$2C,$00,$00
 $8FE0 DEFB $00,$2A,$2B,$15,$1F,$2D,$2B,$2A,$2C,$15,$0F,$01,$32,$32,$32,$32,$01,$1C,$11,$01,$0E,$14,$1E,$14,$2B,$2A,$03,$01,$4A,$24,$2B,$00
 $9000 DEFB $00,$01,$01,$08,$01,$01,$01,$01,$01,$02,$2C,$2B,$2C,$2A,$2D,$2A,$15,$1F,$2D,$2B,$2D,$03,$31,$07,$33,$4A,$24,$15,$0F,$01,$01,$00
 $9020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$49,$01,$01,$01,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $9040 DEFB $00,$00,$00,$29,$2B,$2A,$2C,$2D,$2C,$2A,$2D,$2B,$2A,$2D,$2A,$2A,$2C,$2D,$2B,$2C,$2A,$2D,$00,$00,$00,$00,$00,$29,$2B,$2C,$00,$00
 $9060 DEFB $00,$2B,$15,$0F,$01,$1C,$11,$01,$10,$16,$2F,$31,$2E,$30,$2E,$17,$11,$21,$30,$33,$4A,$24,$2D,$2C,$2D,$2B,$15,$0F,$49,$22,$00,$00
 $9080 DEFB $00,$01,$02,$2B,$15,$1F,$28,$00,$00,$05,$21,$30,$2F,$31,$31,$02,$15,$0F,$01,$32,$32,$32,$32,$01,$12,$16,$02,$28,$00,$00,$00,$00
 $90A0 DEFB $00,$00,$23,$49,$08,$01,$0E,$14,$2A,$15,$0F,$01,$32,$32,$32,$32,$02,$2C,$2D,$2A,$2B,$2D,$2A,$15,$0F,$09,$01,$0E,$14,$2B,$2A,$00
 $90C0 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$01,$04,$00,$00,$00,$00,$00,$00,$23,$49,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$05,$01,$01,$00
; Page #N($01+(#PC-$8960)/$A0).
 $90E0 DEFB $00,$00,$00,$29,$2B,$2D,$2C,$2A,$2B,$2D,$2B,$2A,$2C,$2E,$2D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $9100 DEFB $00,$2B,$15,$0D,$2F,$30,$31,$12,$16,$2E,$33,$20,$01,$49,$22,$2C,$2B,$2C,$2D,$2A,$2D,$2B,$2A,$2B,$2A,$2C,$2A,$2D,$2B,$2D,$2C,$00
 $9120 DEFB $00,$01,$08,$01,$10,$16,$2F,$2E,$07,$31,$2E,$0C,$14,$2B,$28,$23,$49,$01,$1C,$11,$01,$32,$32,$32,$32,$01,$01,$1C,$11,$01,$01,$00
 $9140 DEFB $00,$00,$00,$00,$00,$05,$01,$32,$32,$32,$32,$01,$09,$01,$0E,$14,$2A,$15,$1F,$2B,$2C,$2A,$2B,$2D,$2A,$2C,$15,$0A,$00,$00,$00,$00
 $9160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$08,$01,$01,$01,$49,$22,$23,$49,$01,$04,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $9180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$29,$2A,$2A,$2B,$2B,$2C,$2C,$2D,$2D,$2B,$28,$00,$2D,$2B,$2A,$28,$00,$00,$00,$00,$00
 $91A0 DEFB $00,$00,$00,$00,$29,$2C,$2B,$2A,$2D,$2A,$15,$0D,$30,$2E,$31,$2F,$2E,$30,$2F,$2E,$01,$0E,$14,$25,$4A,$01,$0E,$1B,$00,$00,$00,$00
 $91C0 DEFB $00,$00,$00,$1A,$0F,$01,$32,$32,$32,$32,$08,$01,$10,$16,$30,$2E,$30,$33,$4A,$24,$2A,$28,$05,$4A,$24,$2B,$2A,$1E,$14,$2C,$2D,$00
 $91E0 DEFB $00,$2B,$15,$1F,$2B,$2D,$2C,$2A,$2D,$2B,$2A,$00,$00,$05,$32,$32,$32,$32,$01,$01,$01,$0E,$14,$25,$4A,$17,$11,$01,$09,$01,$01,$00
 $9200 DEFB $00,$01,$08,$01,$01,$01,$01,$01,$01,$49,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$04,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $9220 DEFB $00,$00,$00,$00,$29,$2B,$2B,$2A,$2C,$2C,$2D,$2A,$2A,$2B,$2D,$2D,$2C,$2B,$2A,$2D,$2B,$2C,$2A,$2B,$2D,$2A,$2A,$00,$00,$00,$00,$00
 $9240 DEFB $00,$2D,$2B,$15,$0D,$20,$01,$32,$32,$32,$32,$01,$30,$2F,$2F,$2E,$2E,$31,$30,$2F,$30,$33,$31,$2E,$2E,$4A,$24,$28,$00,$00,$00,$00
 $9260 DEFB $00,$01,$01,$08,$01,$0E,$14,$2B,$2C,$2B,$2A,$2C,$25,$4A,$2E,$2F,$31,$30,$01,$2F,$2E,$31,$30,$2E,$30,$31,$2F,$0C,$14,$2A,$2C,$00
 $9280 DEFB $00,$00,$00,$00,$00,$00,$05,$01,$01,$10,$16,$30,$31,$2F,$31,$2F,$4A,$24,$2A,$25,$4A,$17,$11,$01,$32,$32,$32,$32,$09,$01,$01,$00
 $92A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$8960)/$A0).
 $92C0 DEFB $00,$00,$00,$00,$00,$2B,$2D,$2A,$2C,$2B,$2A,$2D,$2A,$2A,$2C,$2B,$2B,$2C,$2D,$2D,$2C,$2A,$2A,$2D,$2A,$2A,$2D,$2B,$2B,$2C,$00,$00
 $92E0 DEFB $00,$00,$00,$2B,$2D,$25,$4A,$31,$2E,$2F,$12,$16,$31,$31,$2F,$2F,$30,$30,$2E,$2E,$31,$30,$2E,$2F,$30,$2F,$31,$2E,$4A,$24,$00,$00
 $9300 DEFB $00,$2B,$28,$23,$49,$2F,$2E,$2F,$17,$13,$2F,$07,$30,$2E,$2F,$01,$21,$30,$31,$2F,$2E,$30,$31,$01,$21,$30,$17,$11,$49,$22,$00,$00
 $9320 DEFB $00,$01,$0E,$14,$2C,$25,$4A,$31,$06,$30,$12,$16,$2E,$4A,$24,$15,$0F,$31,$2E,$30,$33,$4A,$24,$15,$0D,$30,$02,$2B,$2D,$2A,$2C,$00
 $9340 DEFB $00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$09,$01,$01,$01,$04,$00,$23,$49,$01,$01,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$00

; Data: Level 2
;
; .
;
; .
;
; Page #N($01+(#PC-$9360)/$A0).
@label=Data_Level_2
g$9360 DEFB $00,$00,$2A,$2C,$2D,$2A,$2B,$2D,$2C,$2A,$2D,$2B,$2A,$2D,$2B,$2A,$2A,$2C,$2C,$2C,$2D,$2D,$2A,$2B,$2B,$28,$00,$00,$00,$00,$00,$00
 $9380 DEFB $00,$00,$23,$4A,$2F,$2E,$30,$31,$2E,$2F,$33,$31,$31,$2E,$2E,$30,$30,$2F,$31,$30,$2F,$2E,$31,$2F,$30,$0C,$14,$2C,$2D,$2C,$00,$00
 $93A0 DEFB $00,$2A,$15,$0F,$01,$32,$32,$32,$32,$01,$01,$32,$32,$32,$32,$01,$01,$32,$32,$32,$32,$01,$1C,$11,$01,$01,$09,$01,$49,$22,$00,$00
 $93C0 DEFB $00,$01,$04,$00,$00,$00,$00,$00,$00,$00,$2A,$2D,$2C,$2B,$2D,$2A,$2D,$2C,$2A,$2B,$2D,$15,$1F,$2D,$2B,$2C,$2A,$2A,$2D,$2D,$2B,$00
 $93E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$49,$01,$01,$01,$01,$01,$01,$01,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9400 DEFB $00,$00,$00,$00,$00,$29,$2A,$2A,$2D,$2D,$2B,$2C,$2B,$2C,$2A,$2A,$28,$00,$00,$00,$29,$2B,$2A,$2D,$2C,$28,$00,$00,$00,$00,$00,$00
 $9420 DEFB $00,$00,$00,$00,$1A,$0F,$01,$32,$32,$32,$32,$01,$10,$1D,$01,$01,$0E,$14,$2C,$15,$0D,$31,$30,$2F,$2E,$0C,$14,$2D,$2C,$2C,$2D,$00
 $9440 DEFB $00,$2A,$2A,$15,$0A,$00,$00,$2D,$2C,$2B,$2C,$2B,$2A,$1E,$14,$2B,$2B,$03,$2E,$06,$31,$31,$17,$11,$01,$21,$07,$17,$11,$01,$01,$00
 $9460 DEFB $00,$01,$30,$02,$2C,$2D,$2A,$25,$4A,$33,$30,$2F,$30,$31,$07,$30,$17,$13,$30,$2F,$2F,$30,$02,$2D,$15,$0F,$01,$04,$00,$00,$00,$00
 $9480 DEFB $00,$00,$23,$49,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $94A0 DEFB $00,$00,$00,$00,$00,$00,$29,$2B,$2D,$2D,$2C,$2A,$2C,$2C,$2B,$2D,$2B,$2A,$2A,$2D,$2C,$2C,$2A,$2B,$2F,$2B,$2D,$2C,$2D,$2D,$00,$00
 $94C0 DEFB $00,$2C,$2C,$2B,$2B,$15,$0F,$01,$01,$01,$21,$2F,$2F,$31,$31,$2E,$2F,$30,$2F,$2E,$31,$2E,$2F,$30,$17,$11,$21,$30,$4A,$24,$2B,$00
 $94E0 DEFB $00,$01,$01,$10,$16,$02,$2A,$2D,$00,$1A,$0F,$01,$32,$32,$32,$32,$30,$30,$2E,$31,$31,$30,$2E,$2E,$02,$15,$0F,$01,$1C,$11,$01,$00
 $9500 DEFB $00,$00,$2C,$2A,$03,$31,$4A,$24,$15,$1F,$2B,$2B,$2C,$2B,$2D,$2D,$25,$4A,$33,$2E,$30,$31,$2F,$30,$30,$02,$2B,$15,$0A,$00,$00,$00
 $9520 DEFB $00,$00,$23,$49,$01,$01,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9540 DEFB $00,$00,$2B,$2C,$2A,$2B,$2B,$2D,$2A,$2A,$2D,$2D,$2B,$2C,$2B,$2A,$00,$29,$2C,$2C,$2B,$2B,$2D,$2D,$28,$00,$00,$00,$00,$00,$00,$00
 $9560 DEFB $00,$00,$23,$49,$21,$30,$17,$11,$21,$31,$2F,$31,$33,$30,$4A,$24,$15,$0F,$01,$32,$32,$32,$32,$01,$0E,$14,$2D,$28,$00,$00,$00,$00
 $9580 DEFB $00,$2D,$2D,$15,$0D,$2F,$02,$15,$0F,$31,$31,$2E,$2E,$31,$2F,$30,$02,$2B,$2C,$2A,$2D,$2D,$2B,$2A,$2B,$19,$01,$0E,$1B,$00,$00,$00
 $95A0 DEFB $00,$01,$01,$08,$01,$01,$01,$04,$00,$23,$49,$01,$01,$10,$16,$30,$30,$31,$17,$13,$30,$2E,$2F,$2E,$2E,$0C,$14,$2A,$1E,$14,$2C,$00
 $95C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$09,$01,$01,$09,$01,$00
; Page #N($01+(#PC-$9360)/$A0).
 $95E0 DEFB $00,$00,$00,$00,$00,$29,$2D,$2A,$2B,$2B,$2C,$2A,$2C,$2C,$2D,$2B,$2C,$2C,$2A,$2B,$2C,$2D,$2D,$2C,$2B,$2A,$2C,$00,$00,$00,$00,$00
 $9600 DEFB $00,$2C,$2A,$2B,$15,$0F,$01,$10,$16,$2E,$20,$01,$01,$32,$32,$32,$32,$01,$01,$01,$01,$01,$01,$01,$21,$4A,$24,$2D,$28,$00,$00,$00
 $9620 DEFB $00,$01,$01,$01,$04,$00,$00,$00,$05,$21,$0C,$14,$2B,$2D,$2D,$2C,$2C,$28,$00,$2C,$2B,$2A,$2A,$15,$0D,$30,$30,$30,$0C,$14,$2A,$00
 $9640 DEFB $00,$00,$00,$2B,$2C,$2D,$2D,$2C,$15,$0F,$01,$09,$32,$32,$32,$32,$01,$0E,$14,$25,$4A,$33,$30,$06,$31,$31,$17,$11,$01,$09,$01,$00
 $9660 DEFB $00,$00,$00,$23,$49,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$29,$2B,$2B,$2A,$00,$29,$2A,$2B,$2C,$2B,$2D,$2C,$2B,$2A,$28,$00,$00,$00,$00,$00,$00
 $96A0 DEFB $00,$2B,$2C,$2A,$2D,$2B,$2C,$2B,$2A,$2A,$15,$0F,$01,$49,$22,$1A,$0F,$21,$30,$2F,$30,$2F,$2F,$2E,$20,$0E,$1B,$00,$00,$00,$00,$00
 $96C0 DEFB $00,$01,$01,$01,$10,$16,$31,$2F,$33,$2E,$02,$2B,$2D,$2C,$15,$0A,$1A,$0F,$01,$32,$32,$32,$32,$01,$0E,$14,$1E,$14,$2C,$2D,$2C,$00
 $96E0 DEFB $00,$00,$00,$00,$00,$05,$01,$01,$32,$32,$32,$32,$30,$31,$02,$15,$1F,$2D,$2D,$2A,$2C,$2B,$2D,$2C,$2A,$03,$2F,$07,$17,$11,$01,$00
 $9700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$49,$01,$08,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9720 DEFB $00,$00,$2A,$2C,$2D,$2A,$2A,$2B,$2D,$2C,$2D,$2B,$28,$00,$00,$00,$00,$00,$2D,$2B,$2A,$2C,$2A,$2B,$2A,$2D,$2C,$28,$00,$00,$00,$00
 $9740 DEFB $00,$00,$23,$49,$01,$32,$32,$32,$32,$01,$10,$1D,$0E,$14,$2B,$2D,$2C,$2A,$25,$4A,$33,$20,$10,$1D,$01,$30,$2F,$0C,$14,$2D,$2A,$00
 $9760 DEFB $00,$2D,$2C,$2B,$2C,$2A,$2B,$2D,$2C,$28,$00,$0B,$14,$03,$20,$01,$32,$32,$32,$32,$01,$0E,$14,$1E,$14,$25,$4A,$2F,$07,$30,$01,$00
 $9780 DEFB $00,$01,$01,$2E,$2F,$30,$2F,$30,$2E,$0C,$14,$2B,$03,$2F,$0C,$14,$2A,$2A,$2B,$2C,$2A,$2D,$03,$01,$09,$01,$01,$01,$49,$22,$00,$00
 $97A0 DEFB $00,$00,$00,$23,$49,$01,$01,$01,$01,$01,$09,$01,$01,$01,$01,$09,$01,$01,$01,$01,$01,$49,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $97C0 DEFB $00,$00,$00,$00,$29,$2C,$2B,$2D,$2C,$2B,$2A,$2D,$2C,$2A,$2B,$2A,$2D,$2C,$2C,$2A,$2B,$2D,$2D,$2C,$2D,$2A,$2B,$2B,$2A,$2D,$00,$00
 $97E0 DEFB $00,$2C,$2B,$15,$0D,$2F,$2E,$2E,$31,$30,$2F,$30,$2E,$2F,$31,$2E,$2F,$32,$32,$32,$32,$2E,$31,$30,$2F,$2E,$17,$13,$4A,$22,$00,$00
 $9800 DEFB $00,$01,$01,$08,$01,$10,$16,$30,$2F,$2E,$30,$2E,$31,$2F,$20,$49,$22,$2D,$2B,$2B,$2C,$25,$4A,$2E,$2F,$30,$06,$30,$0C,$14,$2C,$00
 $9820 DEFB $00,$00,$00,$00,$00,$00,$05,$01,$01,$32,$32,$32,$32,$01,$0E,$14,$2C,$25,$4A,$33,$31,$2F,$2E,$30,$17,$11,$01,$01,$01,$09,$01,$00
 $9840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9860 DEFB $00,$00,$00,$00,$00,$00,$2D,$2B,$2A,$2D,$2C,$2A,$2B,$28,$00,$00,$00,$00,$00,$00,$29,$2A,$2C,$2D,$2B,$2D,$2A,$2C,$28,$00,$00,$00
 $9880 DEFB $00,$00,$00,$00,$29,$2C,$25,$4A,$33,$2E,$31,$2F,$20,$0E,$14,$2A,$2D,$2B,$2C,$15,$0F,$01,$32,$32,$32,$32,$01,$21,$0C,$14,$2A,$00
 $98A0 DEFB $00,$2A,$2D,$15,$0D,$31,$2F,$2E,$30,$31,$2E,$2F,$0E,$1B,$05,$32,$32,$32,$32,$04,$29,$2D,$2A,$2A,$2B,$2D,$15,$0F,$01,$09,$01,$00
 $98C0 DEFB $00,$01,$01,$08,$32,$32,$32,$32,$01,$01,$49,$22,$00,$0B,$14,$2C,$2D,$2B,$2C,$15,$0F,$01,$32,$32,$32,$32,$04,$00,$00,$00,$00,$00
 $98E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9900 DEFB $00,$00,$00,$00,$00,$00,$29,$2D,$2A,$2B,$2C,$2D,$2B,$28,$00,$2A,$2C,$2B,$2D,$2C,$2A,$2B,$2D,$2B,$2D,$2C,$28,$00,$00,$00,$00,$00
 $9920 DEFB $00,$2D,$2A,$2C,$2C,$15,$0D,$2F,$2E,$30,$2F,$31,$20,$0E,$14,$25,$4A,$33,$20,$01,$32,$32,$32,$32,$01,$01,$0E,$14,$2A,$2C,$2B,$00
 $9940 DEFB $00,$01,$30,$2F,$2E,$06,$01,$32,$32,$32,$32,$01,$0E,$14,$03,$2F,$20,$01,$0E,$14,$2A,$2D,$2C,$2A,$2B,$00,$29,$03,$17,$11,$01,$00
 $9960 DEFB $00,$00,$23,$49,$01,$0E,$14,$2A,$2C,$2D,$2B,$2A,$2D,$03,$31,$30,$0C,$14,$2B,$03,$2F,$30,$31,$4A,$24,$15,$0F,$01,$04,$00,$00,$00
 $9980 DEFB $00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$09,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $99A0 DEFB $00,$00,$00,$00,$00,$00,$29,$2D,$2C,$2A,$2D,$2B,$2C,$2D,$2A,$2C,$2D,$2B,$2C,$2A,$2D,$2C,$2B,$2D,$2B,$2C,$28,$00,$00,$00,$00,$00
 $99C0 DEFB $00,$2C,$2C,$2D,$2C,$15,$0F,$01,$01,$1C,$11,$21,$30,$31,$30,$2E,$2F,$31,$30,$2E,$2F,$20,$01,$01,$01,$01,$0E,$1B,$00,$00,$00,$00
 $99E0 DEFB $00,$25,$4A,$20,$01,$02,$2A,$2B,$15,$1F,$15,$0F,$01,$10,$1D,$01,$32,$32,$32,$32,$01,$0E,$14,$2C,$2A,$2B,$2D,$1E,$14,$2B,$2A,$00
 $9A00 DEFB $00,$01,$01,$0E,$14,$25,$4A,$33,$06,$31,$02,$2D,$2B,$2D,$1E,$14,$2A,$2D,$2A,$2C,$2B,$2C,$03,$01,$01,$01,$01,$01,$09,$01,$01,$00
 $9A20 DEFB $00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$09,$01,$01,$01,$01,$01,$49,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9A40 DEFB $00,$00,$2C,$2B,$28,$00,$00,$00,$00,$00,$2D,$2A,$2C,$2B,$2D,$2C,$2A,$2A,$2D,$2A,$2B,$2D,$2A,$2C,$2D,$2C,$2A,$2B,$28,$00,$00,$00
 $9A60 DEFB $00,$00,$23,$49,$0E,$14,$2B,$2D,$2C,$2D,$25,$4A,$33,$30,$20,$10,$16,$2E,$30,$2E,$31,$2F,$17,$11,$01,$10,$1D,$01,$0E,$14,$2B,$00
 $9A80 DEFB $00,$00,$00,$00,$29,$03,$17,$13,$01,$32,$32,$32,$32,$01,$0E,$14,$03,$31,$31,$2F,$30,$20,$04,$00,$00,$29,$1E,$14,$2B,$03,$01,$00
 $9AA0 DEFB $00,$2A,$2B,$15,$0F,$01,$08,$0E,$14,$2A,$2D,$2B,$2A,$2D,$2C,$03,$32,$32,$32,$32,$01,$0E,$14,$2A,$15,$0F,$01,$09,$49,$22,$00,$00
 $9AC0 DEFB $00,$01,$01,$04,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$49,$22,$00,$00,$00,$00,$00,$00,$05,$01,$04,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$2D,$2E,$2C,$2A,$2B,$2D,$2B,$2A,$2C,$2D,$2B,$28,$00,$00,$00
 $9B00 DEFB $00,$2C,$2D,$2B,$2D,$2A,$2C,$2A,$2B,$2A,$2B,$2D,$2A,$2D,$2C,$2B,$2C,$23,$49,$01,$21,$33,$2E,$17,$13,$31,$30,$2F,$0C,$14,$2B,$00
 $9B20 DEFB $00,$01,$01,$10,$1D,$01,$01,$32,$32,$32,$32,$01,$10,$1D,$01,$49,$22,$29,$2B,$15,$0D,$2E,$31,$06,$2E,$2F,$17,$11,$01,$09,$01,$00
 $9B40 DEFB $00,$00,$00,$00,$0B,$14,$2C,$2A,$2D,$2B,$2A,$2C,$2B,$1E,$14,$2A,$15,$0F,$01,$08,$01,$32,$32,$32,$32,$01,$04,$00,$00,$00,$00,$00
 $9B60 DEFB $00,$00,$00,$00,$00,$05,$01,$49,$22,$23,$49,$01,$01,$01,$09,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9B80 DEFB $00,$00,$00,$00,$00,$29,$2A,$2B,$2D,$00,$29,$2B,$2D,$2D,$2C,$2C,$2B,$2B,$2A,$2A,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $9BA0 DEFB $00,$00,$00,$00,$1A,$0F,$01,$4A,$24,$15,$0F,$01,$2E,$2F,$30,$2E,$2F,$31,$2E,$30,$0C,$14,$2A,$2D,$2A,$2B,$2C,$28,$00,$00,$00,$00
 $9BC0 DEFB $00,$2D,$2C,$15,$1F,$2A,$2B,$25,$4A,$04,$29,$2A,$25,$4A,$33,$30,$2E,$30,$17,$11,$01,$09,$32,$32,$32,$32,$01,$0E,$1B,$00,$00,$00
 $9BE0 DEFB $00,$01,$01,$08,$01,$10,$16,$4A,$24,$15,$0F,$01,$01,$01,$32,$32,$32,$32,$04,$00,$00,$2A,$2B,$2D,$2A,$2C,$2D,$2B,$1E,$14,$2B,$00
 $9C00 DEFB $00,$00,$00,$00,$00,$00,$05,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$49,$01,$01,$01,$01,$01,$01,$09,$01,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9C20 DEFB $00,$00,$00,$00,$00,$2A,$2A,$2D,$2B,$2A,$2C,$2B,$2D,$2A,$2B,$2C,$2D,$2D,$2B,$2A,$2A,$2D,$2C,$2C,$2A,$2B,$2B,$28,$00,$00,$00,$00
 $9C40 DEFB $00,$00,$00,$00,$29,$25,$4A,$2E,$2E,$31,$33,$30,$2F,$30,$31,$2E,$2E,$2F,$2F,$30,$01,$32,$32,$32,$32,$01,$21,$0C,$14,$2B,$2D,$00
 $9C60 DEFB $00,$2C,$2A,$15,$0D,$2F,$31,$30,$2E,$30,$31,$2E,$2F,$01,$30,$31,$2F,$2E,$4A,$24,$2C,$2A,$2B,$2C,$2B,$15,$0F,$01,$09,$01,$01,$00
 $9C80 DEFB $00,$01,$01,$08,$32,$32,$32,$32,$01,$10,$16,$4A,$24,$2A,$25,$4A,$2F,$31,$2F,$31,$30,$17,$11,$01,$01,$04,$00,$00,$00,$00,$00,$00
 $9CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; Page #N($01+(#PC-$9360)/$A0).
 $9CC0 DEFB $00,$00,$2C,$2B,$2B,$2D,$2A,$2A,$2D,$2A,$2A,$2C,$2D,$2D,$2C,$2B,$2B,$2C,$2A,$2A,$2D,$2A,$2B,$2C,$2A,$2D,$2B,$00,$00,$00,$00,$00
 $9CE0 DEFB $00,$00,$25,$4A,$2E,$31,$2F,$30,$2F,$2E,$30,$31,$2E,$2E,$30,$30,$2F,$2F,$31,$31,$17,$13,$2F,$2E,$31,$4A,$24,$2D,$2B,$00,$00,$00
 $9D00 DEFB $00,$00,$23,$49,$10,$16,$30,$20,$01,$31,$30,$2E,$2F,$31,$30,$20,$01,$2F,$2E,$30,$06,$2F,$12,$16,$2F,$2E,$2F,$49,$22,$29,$2B,$00
 $9D20 DEFB $00,$2C,$2A,$2D,$2B,$03,$30,$0C,$14,$25,$4A,$33,$30,$2E,$31,$0E,$14,$25,$4A,$2E,$17,$13,$30,$07,$31,$4A,$24,$2C,$15,$0F,$01,$00
 $9D40 DEFB $00,$01,$01,$01,$01,$01,$01,$01,$09,$01,$01,$01,$01,$49,$22,$00,$05,$01,$01,$01,$08,$01,$01,$01,$01,$01,$01,$01,$04,$00,$00,$00
 $9D60 DEFB $00,$00,$00,$00,$00,$00,$29,$2B
 $9D68 DEFB $2B,$2A,$2D,$2D,$2C,$2C,$2C,$2A
 $9D70 DEFB $2A,$2B,$2D,$2A,$2B,$2D,$2A,$2C
 $9D78 DEFB $2D,$2B,$2A,$2D,$2C,$2A,$00,$00
 $9D80 DEFB $00,$00,$2C,$2D,$2C,$15,$0D,$30
 $9D88 DEFB $2F,$31,$2E,$2F,$30,$31,$2F,$30
 $9D90 DEFB $30,$2E,$2E,$31,$31,$33,$2F,$2E
 $9D98 DEFB $31,$30,$2E,$2F,$4A,$22,$00,$00
 $9DA0 DEFB $00,$00,$23,$49,$01,$08,$01,$01
 $9DA8 DEFB $10,$1D,$01,$32,$32,$32,$32,$01
 $9DB0 DEFB $01,$32,$32,$32,$32,$01,$01,$32
 $9DB8 DEFB $32,$32,$32,$01,$0E,$14,$2A,$00
 $9DC0 DEFB $00,$2B,$2D,$2D,$2A,$2A,$2C,$2B
 $9DC8 DEFB $2D,$1E,$14,$2D,$2B,$2A,$2C,$2D
 $9DD0 DEFB $2A,$2D,$2B,$2C,$2D,$2A,$00,$00
 $9DD8 DEFB $00,$00,$00,$00,$00,$05,$01,$00
 $9DE0 DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $9DE8 DEFB $01,$01,$09,$01,$01,$01,$01,$01
 $9DF0 DEFB $01,$01,$01,$01,$49,$22,$00,$00
 $9DF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Level Buffer
;
; #N$20 columns x #N$50 rows, organised as #N$10 pages of #N$A0 bytes
; each (each page is #N$05 rows x #N$20 columns).
;
; .
;
; Page #N($01+(#PC-$9E00)/$A0).
@label=LevelBuffer
g$9E00 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9E20 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9E40 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9E60 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9E80 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $9EA0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$3D,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9EC0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9EE0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9F00 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9F20 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $9F40 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9F60 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9F80 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9FA0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$3E,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $9FC0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $9FE0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A000 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A020 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A040 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A060 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A080 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A0A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$3F,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A0C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A0E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A100 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A120 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A140 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A160 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A180 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A1A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$40,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A1C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A1E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A200 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A220 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A240 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A260 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A280 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A2A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$41,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A2C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A2E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A300 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A320 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A340 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A360 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A380 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A3A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$42,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A3C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A3E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A400 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A420 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A440 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A460 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A480 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A4A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$43,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A4C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A4E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A500 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A520 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A540 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A560 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A580 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A5A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$44,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A5C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A5E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A600 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A620 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A640 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A660 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A680 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A6A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$45,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A6C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A6E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A700 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A720 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A740 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
; Page #N($01+(#PC-$9E00)/$A0).
 $A760 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A780 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A7A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$0D,$00,$46,$FC,$00,$EA,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A7C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
 $A7E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78

; Messaging: Start Screen
@label=Messaging_StartScreen
t$A800 DEFM " PRESS TOP ROW (KEYS 1-0) FOR A " ; "#STR(#PC,$04,$20)".
 $A820 DEFM "          DEMONSTRATION         " ; "#STR(#PC,$04,$20)".
 $A840 DEFM " PRESS 2ND ROW (Q-P) FOR PLAYING" ; "#STR(#PC,$04,$20)".
 $A860 DEFM "          INSTRUCTIONS          " ; "#STR(#PC,$04,$20)".
 $A880 DEFM " PRESS 3RD ROW (A-ENTER) TO SET " ; "#STR(#PC,$04,$20)".
 $A8A0 DEFM "     KEYBOARD/JOYSTICK MODE     " ; "#STR(#PC,$04,$20)".
 $A8C0 DEFM " PRESS BOTTOM ROW (CAPS-SPACE)  " ; "#STR(#PC,$04,$20)".
 $A8E0 DEFM "            TO PLAY             " ; "#STR(#PC,$04,$20)".

; Start Page Footer
;
; #SCR$02,$00,$00,$20,$08,$A900,$B100(footer)
@label=Footer_StartScreen
b$A900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $A920 DEFB $00,$00,$00,$0F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$00,$00 ;
 $A940 DEFB $00,$00,$04,$08,$84,$80,$00,$0C,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FC,$30,$00,$01,$21,$10,$20,$00,$00 ;
 $A960 DEFB $00,$00,$E4,$02,$30,$00,$00,$00,$1F,$00,$07,$00,$07,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$F8,$00,$00,$00,$0C,$40,$27,$00,$00 ;
 $A980 DEFB $00,$90,$84,$48,$85,$00,$00,$00,$07,$FF,$01,$8D,$8C,$3F,$F9,$FF,$1F,$F1,$C0,$1C,$FF,$80,$FF,$E0,$00,$00,$00,$A1,$12,$21,$09,$00 ;
 $A9A0 DEFB $00,$08,$88,$71,$4A,$48,$00,$00,$00,$1F,$00,$70,$70,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$F8,$00,$00,$00,$12,$52,$8E,$11,$10,$00 ;
 $A9C0 DEFB $00,$0B,$D3,$80,$02,$85,$00,$00,$00,$00,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$00,$00,$00,$00,$A1,$40,$01,$CB,$D0,$00 ;
 $A9E0 DEFB $00,$00,$00,$00,$00,$12,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$48,$00,$00,$00,$00,$00 ;
 $AA00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AA20 DEFB $00,$00,$00,$10,$40,$00,$00,$1F,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$F8,$00,$00,$02,$08,$00,$00,$00 ;
 $AA40 DEFB $00,$00,$08,$07,$34,$80,$00,$0F,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F0,$F0,$00,$01,$2C,$E0,$10,$00,$00 ;
 $AA60 DEFB $00,$00,$88,$0D,$C8,$00,$00,$00,$0F,$00,$07,$00,$07,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$F0,$00,$00,$00,$13,$B0,$11,$00,$00 ;
 $AA80 DEFB $00,$88,$F8,$08,$C3,$80,$00,$00,$03,$FF,$01,$DD,$DC,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FF,$C0,$00,$00,$01,$C3,$10,$1F,$11,$00 ;
 $AAA0 DEFB $00,$13,$C8,$71,$46,$28,$00,$00,$00,$0F,$00,$70,$70,$38,$39,$FF,$9F,$F9,$FF,$9C,$FF,$C0,$F0,$00,$00,$00,$14,$62,$8E,$13,$C8,$00 ;
 $AAC0 DEFB $00,$0B,$12,$00,$02,$85,$00,$00,$00,$00,$3F,$FF,$FF,$E0,$00,$00,$00,$00,$07,$FF,$FF,$FC,$00,$00,$00,$00,$A1,$40,$00,$48,$D0,$00 ;
 $AAE0 DEFB $00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$42,$42,$10,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$00,$00,$00 ;
 $AB00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AB20 DEFB $00,$00,$00,$20,$40,$00,$00,$7F,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FE,$00,$00,$02,$04,$00,$00,$00 ;
 $AB40 DEFB $00,$07,$10,$00,$CB,$80,$00,$07,$E7,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E7,$E0,$00,$01,$D3,$00,$08,$E0,$00 ;
 $AB60 DEFB $00,$00,$80,$74,$08,$00,$00,$00,$03,$00,$03,$00,$06,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$C0,$00,$00,$00,$10,$2E,$01,$00,$00 ;
 $AB80 DEFB $00,$6F,$88,$F0,$44,$80,$00,$00,$01,$FF,$01,$DD,$DC,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FF,$80,$00,$00,$01,$22,$0F,$11,$F6,$00 ;
 $ABA0 DEFB $00,$14,$CC,$21,$CE,$24,$00,$00,$00,$0F,$00,$70,$70,$38,$39,$FF,$9F,$F9,$FF,$9C,$FF,$C0,$F0,$00,$00,$00,$24,$73,$84,$33,$28,$00 ;
 $ABC0 DEFB $00,$09,$14,$00,$01,$45,$00,$00,$00,$00,$1F,$FF,$FF,$80,$00,$00,$00,$00,$01,$FF,$FF,$F8,$00,$00,$00,$00,$A2,$80,$00,$28,$90,$00 ;
 $ABE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$99,$66,$00,$1C,$1C,$38,$38,$78,$40,$38,$1C,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AC00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AC20 DEFB $00,$00,$00,$20,$40,$00,$00,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$00,$00,$02,$04,$00,$00,$00 ;
 $AC40 DEFB $00,$04,$7F,$FF,$10,$00,$00,$03,$F3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$CF,$C0,$00,$00,$08,$FF,$FE,$20,$00 ;
 $AC60 DEFB $00,$00,$A4,$82,$3E,$00,$00,$00,$00,$00,$03,$80,$0E,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$00,$00,$00,$00,$7C,$41,$25,$00,$00 ;
 $AC80 DEFB $00,$10,$88,$FE,$A8,$40,$00,$00,$00,$FF,$01,$DD,$DC,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FF,$00,$00,$00,$02,$15,$7F,$11,$08,$00 ;
 $ACA0 DEFB $00,$14,$44,$0E,$87,$14,$00,$00,$00,$07,$00,$70,$70,$38,$39,$FF,$9F,$F9,$FF,$9C,$FF,$C0,$E0,$00,$00,$00,$28,$E1,$70,$22,$28,$00 ;
 $ACC0 DEFB $00,$05,$24,$00,$01,$45,$00,$00,$00,$00,$0F,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$00,$00,$00,$00,$A2,$80,$00,$24,$A0,$00 ;
 $ACE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A1,$5A,$30,$20,$20,$44,$40,$44,$78,$44,$20,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AD00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AD20 DEFB $00,$00,$00,$2E,$80,$00,$00,$7F,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FF,$FE,$00,$00,$01,$74,$00,$00,$00 ;
 $AD40 DEFB $00,$04,$F0,$41,$E0,$00,$00,$01,$FF,$00,$07,$00,$07,$38,$39,$FF,$9F,$F9,$C0,$1C,$FF,$C0,$00,$FF,$80,$00,$00,$07,$82,$0F,$20,$00 ;
 $AD60 DEFB $00,$01,$C5,$07,$C0,$80,$00,$00,$3C,$00,$03,$80,$0E,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$3C,$00,$00,$01,$03,$E0,$A3,$80,$00 ;
 $AD80 DEFB $00,$20,$84,$FE,$A8,$20,$00,$00,$00,$7F,$00,$D8,$D8,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FE,$00,$00,$00,$04,$15,$7F,$21,$04,$00 ;
 $ADA0 DEFB $00,$14,$44,$7E,$87,$12,$00,$00,$00,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$00,$00,$00,$48,$E1,$7E,$22,$28,$00 ;
 $ADC0 DEFB $00,$04,$C4,$00,$00,$A5,$00,$00,$00,$00,$03,$FF,$F0,$00,$00,$00,$00,$00,$00,$0F,$FF,$C0,$00,$00,$00,$00,$A5,$00,$00,$23,$20,$00 ;
 $ADE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A1,$42,$10,$20,$20,$44,$38,$44,$44,$78,$20,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AE00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AE20 DEFB $00,$00,$00,$28,$40,$00,$00,$0F,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$02,$14,$00,$00,$00 ;
 $AE40 DEFB $00,$03,$9F,$C2,$10,$00,$00,$00,$FF,$00,$07,$00,$07,$38,$39,$FF,$9F,$F9,$C0,$1C,$FF,$C0,$00,$FF,$00,$00,$00,$08,$43,$F9,$C0,$00 ;
 $AE60 DEFB $00,$1E,$42,$0C,$81,$00,$00,$00,$3F,$00,$03,$80,$0E,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$FC,$00,$00,$00,$81,$30,$42,$78,$00 ;
 $AE80 DEFB $00,$2F,$84,$7D,$1B,$A0,$00,$00,$00,$3F,$00,$D8,$D8,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FC,$00,$00,$00,$05,$D8,$BE,$21,$F4,$00 ;
 $AEA0 DEFB $00,$14,$79,$80,$87,$CA,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$00,$00,$53,$E1,$01,$9E,$28,$00 ;
 $AEC0 DEFB $00,$02,$08,$00,$00,$95,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A9,$00,$00,$10,$40,$00 ;
 $AEE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$99,$42,$10,$20,$20,$44,$04,$78,$44,$40,$20,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AF00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $AF20 DEFB $00,$00,$00,$D3,$A0,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$05,$CB,$00,$00,$00 ;
 $AF40 DEFB $00,$00,$91,$02,$10,$00,$00,$00,$7F,$00,$07,$00,$07,$38,$39,$FF,$9F,$F9,$C0,$1C,$FF,$C0,$00,$FE,$00,$00,$00,$08,$40,$89,$00,$00 ;
 $AF60 DEFB $00,$10,$82,$39,$76,$00,$00,$00,$1F,$00,$03,$87,$0E,$3F,$F9,$FF,$1F,$F1,$C0,$1C,$FF,$80,$00,$F8,$00,$00,$00,$6E,$9C,$41,$08,$00 ;
 $AF80 DEFB $00,$30,$84,$79,$1A,$90,$00,$00,$00,$3F,$00,$D8,$D8,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$FC,$00,$00,$00,$09,$58,$9E,$21,$0C,$00 ;
 $AFA0 DEFB $00,$14,$32,$01,$85,$0A,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$00,$00,$50,$A1,$80,$4C,$28,$00 ;
 $AFC0 DEFB $00,$01,$10,$00,$00,$49,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$92,$00,$00,$08,$80,$00 ;
 $AFE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$42,$38,$1C,$20,$38,$78,$40,$44,$3C,$20,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B020 DEFB $00,$00,$03,$08,$5B,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$DA,$10,$C0,$00,$00 ;
 $B040 DEFB $00,$00,$92,$02,$10,$00,$00,$00,$3F,$00,$07,$00,$07,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$00,$FC,$00,$00,$00,$08,$40,$49,$00,$00 ;
 $B060 DEFB $00,$70,$84,$65,$09,$00,$00,$00,$0F,$00,$01,$87,$0C,$3F,$F9,$FF,$1F,$F1,$C0,$1C,$FF,$80,$00,$F0,$00,$00,$00,$90,$A6,$21,$0E,$00 ;
 $B080 DEFB $00,$07,$84,$79,$DA,$50,$00,$00,$00,$1F,$00,$F8,$F8,$38,$39,$C0,$1C,$01,$C0,$1C,$E0,$00,$F8,$00,$00,$00,$0A,$5B,$9E,$21,$E0,$00 ;
 $B0A0 DEFB $00,$16,$F2,$7E,$02,$89,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$91,$40,$7E,$4F,$68,$00 ;
 $B0C0 DEFB $00,$00,$E0,$00,$00,$11,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$00,$07,$00,$00 ;
 $B0E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $B100 DEFB $18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18 ; {Attributes.
 $B120 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $B140 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $B160 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$38,$38,$10,$10,$10,$10,$10,$10,$10,$10,$10,$38,$38,$38,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $B180 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$38,$28,$28,$28,$28,$28,$28,$28,$28,$28,$38,$38,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $B1A0 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $B1C0 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ;
 $B1E0 DEFB $18,$18,$18,$18,$18,$18,$18,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$18,$18,$18,$18,$18,$18,$18 ; }

; Shadow Buffer?
@label=ShadowBuffer
b$B200 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B208 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B210 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B218 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B220 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B228 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B230 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B238 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B240 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B248 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B250 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B258 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B260 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B268 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B270 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B278 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B280 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B288 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B290 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B298 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2A8 DEFB $78,$78,$0D,$00,$51,$FC,$00,$EA
 $B2B0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2B8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2C8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2D0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2D8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2E8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2F0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B2F8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B300 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B308 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B310 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B318 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B320 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B328 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B330 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B338 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B340 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B348 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B350 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B358 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B360 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B368 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B370 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B378 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B380 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B388 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B390 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B398 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3A8 DEFB $78,$78,$0D,$00,$52,$FC,$00,$EA
 $B3B0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3B8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3C0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3C8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3D0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3D8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3E0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3E8 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3F0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B3F8 DEFB $78,$78,$78,$78,$78,$78,$78,$78

; Data block at B400
b$B400 DEFB $2C,$01,$00,$00 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B404 DEFB $2D,$01,$00,$00 ;
 $B408 DEFB $2A,$01,$00,$00 ; }
 $B40C DEFB $28,$0E,$00,$00 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B410 DEFB $00,$14,$05,$00 ;
 $B414 DEFB $00,$2C,$01,$00 ; }
 $B418 DEFB $28,$0E,$00,$00 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B41C DEFB $00,$1B,$0B,$00 ;
 $B420 DEFB $00,$00,$14,$05 ; }
 $B424 DEFB $00,$15,$04,$00 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B428 DEFB $29,$0F,$00,$00 ;
 $B42C DEFB $2C,$01,$00,$00 ; }
 $B430 DEFB $00,$2B,$01,$00 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B434 DEFB $00,$2D,$01,$00 ;
 $B438 DEFB $00,$2C,$01,$00 ; }
 $B43C DEFB $00,$28,$0E,$00 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B440 DEFB $00,$00,$14,$05 ;
 $B444 DEFB $00,$00,$2A,$01 ; }
 $B448 DEFB $00,$00,$15,$04 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B44C DEFB $00,$1A,$0A,$00 ;
 $B450 DEFB $29,$0F,$00,$00 ; }
 $B454 DEFB $00,$00,$15,$04 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B458 DEFB $00,$29,$0F,$00 ;
 $B45C DEFB $00,$2B,$01,$00 ; }
 $B460 DEFB $00,$00,$2A,$01 ; {#UDGTABLE #TILES(#PC,$04,$03) TABLE#
 $B464 DEFB $00,$00,$2D,$01 ;
 $B468 DEFB $00,$00,$2A,$01 ; }

; Terrain Data
;
; .
;
; .
;
; Terrain object #N($01+(#PC-$B46C)/$06).
@label=Data_Terrain_01
g$B46C DEFB $49,$47,$48,$49
; Vertical component: #MAP(#PEEK(#PC))(Yes,0:No).
 $B470 DEFB $00,$00
; Terrain object #N($01+(#PC-$B46C)/$06).
@label=Data_Terrain_02
 $B472 DEFB $34,$36,$36,$35
; Vertical component: #MAP(#PEEK(#PC))(Yes,0:No).
 $B476 DEFB $00,$00
; Terrain object #N($01+(#PC-$B46C)/$06).
@label=Data_Terrain_03
 $B478 DEFB $26,$37,$38,$27
; Vertical component: #MAP(#PEEK(#PC))(Yes,0:No).
 $B47C DEFB $39,$3A
; Terrain object #N($01+(#PC-$B46C)/$06).
@label=Data_Terrain_04
 $B47E DEFB $26,$3D,$3E,$27
; Vertical component: #MAP(#PEEK(#PC))(Yes,0:No).
 $B482 DEFB $3F,$40
; Terrain object #N($01+(#PC-$B46C)/$06).
@label=Data_Terrain_05
 $B484 DEFB $26,$37,$38,$27
; Vertical component: #MAP(#PEEK(#PC))(Yes,0:No).
 $B488 DEFB $39,$3A
; Terrain object #N($01+(#PC-$B46C)/$06).
@label=Data_Terrain_06
 $B48A DEFB $26,$3D,$3E,$27
; Vertical component: #MAP(#PEEK(#PC))(Yes,0:No).
 $B48E DEFB $3F,$40
; Terrain object #N($01+(#PC-$B46C)/$06).
@label=Data_Terrain_07
 $B490 DEFB $26,$43,$44,$27
; Vertical component: #MAP(#PEEK(#PC))(Yes,0:No).
 $B494 DEFB $00,$00
; Terrain object #N($01+(#PC-$B46C)/$06).
@label=Data_Terrain_08
 $B496 DEFB $26,$45,$46,$27
; Vertical component: #MAP(#PEEK(#PC))(Yes,0:No).
 $B49A DEFB $00,$00

; Table: Speedometer Attributes
;
; Used by the routine at #R$6880.
;
; .
;
; These attribute bytes are copied to the attribute buffer using #R$6893.
; The idea is that, #N$0C bytes are copied to represent the speed gauge, but
; where they start from is determined by a calculation on the speed.
; .
; The absolute minimum speed is #N$80 for right movement and #N$7F for left
; movement, so aftter the calculation will use a starting address of #N$B4A7 to
; copy the #N$0C bytes.
; .
; The maximum speeds are #N$96 for right movement and #N$69 for left movement,
; these both use a starting address of #N$B49C to copy the #N$0C bytes.
@label=Table_SpeedometerAttributes
g$B49C DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B49D DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B49E DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B49F DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A0 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A1 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A2 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A3 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A4 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A5 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A6 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A7 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A8 DEFB $12      ; Attribute: "#INK(#PEEK(#PC))".
 $B4A9 DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4AA DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4AB DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4AC DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4AD DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4AE DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4AF DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4B0 DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4B1 DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".
 $B4B2 DEFB $00      ; Attribute: "#INK(#PEEK(#PC))".

; Game status buffer entry at B4B3
g$B4B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B4BB DEFB $00

; Game status buffer entry at B4BC
g$B4BC DEFB $A7,$A6,$A5,$A4,$A3,$A2,$A1,$A0
 $B4C4 DEFB $9F,$A5,$A4,$A3,$A2,$A1,$A0,$9F
 $B4CC DEFB $9E,$A3,$A2,$A1,$A0,$9F,$9E,$9D
 $B4D4 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Actions Jump Table
;
; Used by the routine at #R$6A27.
@label=JumpTable_Actions
g$B4DC DEFW $6F4A    ; #D(#PEEK(#PC)+#PEEK(#PC+$01)*$0100).
 $B4DE DEFW $6FFD    ; #D(#PEEK(#PC)+#PEEK(#PC+$01)*$0100).
 $B4E0 DEFW $6FC0    ; #D(#PEEK(#PC)+#PEEK(#PC+$01)*$0100).
 $B4E2 DEFW $6F99    ; #D(#PEEK(#PC)+#PEEK(#PC+$01)*$0100).
 $B4E4 DEFW $6F7D    ; #D(#PEEK(#PC)+#PEEK(#PC+$01)*$0100).
 $B4E6 DEFW $7048    ; #D(#PEEK(#PC)+#PEEK(#PC+$01)*$0100).
 $B4E8 DEFW $751A    ; #D(#PEEK(#PC)+#PEEK(#PC+$01)*$0100).

; Data block at B4EA
b$B4EA DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B4F2 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $B4FA DEFB $78,$78,$78,$78,$78,$78,$00,$00
 $B502 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B50A DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B512 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B51A DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B522 DEFB $01,$01,$02,$02,$02,$02,$02,$02
 $B52A DEFB $02,$02,$02,$03,$03,$03,$03,$03
 $B532 DEFB $03,$03,$03,$03,$04,$04,$04,$04
 $B53A DEFB $04,$04,$04,$04,$04,$05,$05,$05
 $B542 DEFB $05,$05,$05,$05,$05,$05,$02,$02
 $B54A DEFB $02,$02,$02,$02,$02,$02,$02,$03
 $B552 DEFB $03,$03,$03,$03,$03,$03,$03,$03
 $B55A DEFB $04,$04,$04,$04,$04,$04,$04,$04
 $B562 DEFB $04,$05,$05,$05,$05,$05,$05,$05
 $B56A DEFB $05,$05,$00,$00,$02,$00,$00,$02
 $B572 DEFB $00,$00,$02,$01,$01,$01,$01,$01
 $B57A DEFB $01,$03,$03,$03,$00,$00,$00,$00
 $B582 DEFB $00,$00,$04,$04,$04,$01,$01,$05
 $B58A DEFB $01,$01,$05,$01,$01,$05,$00,$00
 $B592 DEFB $02,$00,$00,$02,$00,$00,$02,$01
 $B59A DEFB $01,$01,$01,$01,$01,$03,$03,$03
 $B5A2 DEFB $00,$00,$00,$00,$00,$00,$04,$04
 $B5AA DEFB $04,$01,$01,$05,$01,$01,$05,$01
 $B5B2 DEFB $01,$05,$06,$06,$06,$06,$06,$06
 $B5BA DEFB $06,$06,$06,$07,$07,$07,$07,$07
 $B5C2 DEFB $07,$07,$07,$07,$08,$08,$08,$08
 $B5CA DEFB $08,$08,$08,$08,$08,$09,$09,$09
 $B5D2 DEFB $09,$09,$09,$09,$09,$09,$0A,$0A
 $B5DA DEFB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0B
 $B5E2 DEFB $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
 $B5EA DEFB $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
 $B5F2 DEFB $0C,$0D,$0D,$0D,$0D,$0D,$0D,$0D
 $B5FA DEFB $0D,$0D,$0A,$0A,$0A,$0A,$0A,$0A
 $B602 DEFB $0A,$0A,$0A,$0B,$0B,$0B,$0B,$0B
 $B60A DEFB $0B,$0B,$0B,$0B,$0C,$0C,$0C,$0C
 $B612 DEFB $0C,$0C,$0C,$0C,$0C,$0D,$0D,$0D
 $B61A DEFB $0D,$0D,$0D,$0D,$0D,$0D,$0A,$00
 $B622 DEFB $00,$0A,$00,$00,$0A,$00,$00,$0B
 $B62A DEFB $0B,$0B,$01,$01,$01,$01,$01,$01
 $B632 DEFB $0C,$0C,$0C,$00,$00,$00,$00,$00
 $B63A DEFB $00,$0D,$01,$01,$0D,$01,$01,$0D
 $B642 DEFB $01,$01,$0A,$00,$00,$0A,$00,$00
 $B64A DEFB $0A,$00,$00,$0B,$0B,$0B,$01,$01
 $B652 DEFB $01,$01,$01,$01,$0C,$0C,$0C,$00
 $B65A DEFB $00,$00,$00,$00,$00,$0D,$01,$01
 $B662 DEFB $0D,$01,$01,$0D,$01,$01,$00,$00
 $B66A DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B672 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B67A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B682 DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B68A DEFB $01,$01,$00,$00,$00,$00,$00,$00
 $B692 DEFB $00,$00,$00,$01,$01,$01,$01,$01
 $B69A DEFB $01,$01,$01,$01,$00,$00,$00,$00
 $B6A2 DEFB $00,$00,$00,$00,$00,$01,$01,$01
 $B6AA DEFB $01,$01,$01,$01,$01,$01,$02,$02
 $B6B2 DEFB $02,$02,$02,$02,$02,$02,$02,$03
 $B6BA DEFB $03,$03,$03,$03,$03,$03,$03,$03
 $B6C2 DEFB $04,$04,$04,$04,$04,$04,$04,$04
 $B6CA DEFB $04,$05,$05,$05,$05,$05,$05,$05
 $B6D2 DEFB $05,$05,$00,$00,$00,$00,$00,$00
 $B6DA DEFB $00,$00,$00,$01,$01,$01,$01,$01
 $B6E2 DEFB $01,$01,$01,$01,$00,$00,$00,$00
 $B6EA DEFB $00,$00,$00,$00,$00,$01,$01,$01
 $B6F2 DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $B6FA DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B702 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B70A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B712 DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B71A DEFB $01,$01,$08,$08,$08,$08,$08,$08
 $B722 DEFB $08,$08,$08,$09,$09,$09,$09,$09
 $B72A DEFB $09,$09,$09,$09,$06,$06,$06,$06
 $B732 DEFB $06,$06,$06,$06,$06,$07,$07,$07
 $B73A DEFB $07,$07,$07,$07,$07,$07,$00,$00
 $B742 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B74A DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B752 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B75A DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B762 DEFB $01,$01,$0E,$0E,$0E,$0E,$0E,$0E
 $B76A DEFB $0E,$0E,$0E,$0F,$0F,$0F,$0F,$0F
 $B772 DEFB $0F,$0F,$0F,$0F,$10,$10,$10,$10
 $B77A DEFB $10,$10,$10,$10,$10,$11,$11,$11
 $B782 DEFB $11,$11,$11,$11,$11,$11,$0E,$0E
 $B78A DEFB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0F
 $B792 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
 $B79A DEFB $10,$10,$10,$10,$10,$10,$10,$10
 $B7A2 DEFB $10,$11,$11,$11,$11,$11,$11,$11
 $B7AA DEFB $11,$11,$12,$12,$12,$12,$12,$12
 $B7B2 DEFB $12,$12,$12,$13,$13,$13,$13,$13
 $B7BA DEFB $13,$13,$13,$13,$14,$14,$14,$14
 $B7C2 DEFB $14,$14,$14,$14,$14,$15,$15,$15
 $B7CA DEFB $15,$15,$15,$15,$15,$15,$00,$00
 $B7D2 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B7DA DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B7E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B7EA DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B7F2 DEFB $01,$01,$00,$00,$00,$00,$00,$00
 $B7FA DEFB $00,$00,$00,$01,$01,$01,$01,$01
 $B802 DEFB $01,$01,$01,$01,$00,$00,$00,$00
 $B80A DEFB $00,$00,$00,$00,$00,$01,$01,$01
 $B812 DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $B81A DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B822 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B82A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B832 DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B83A DEFB $01,$01,$00,$00,$00,$00,$00,$00
 $B842 DEFB $00,$00,$00,$01,$01,$01,$01,$01
 $B84A DEFB $01,$01,$01,$01,$00,$00,$00,$00
 $B852 DEFB $00,$00,$00,$00,$00,$01,$01,$01
 $B85A DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $B862 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B86A DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B872 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B87A DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B882 DEFB $01,$01,$00,$00,$00,$00,$00,$00
 $B88A DEFB $00,$00,$00,$01,$01,$01,$01,$01
 $B892 DEFB $01,$01,$01,$01,$22,$22,$22,$22
 $B89A DEFB $22,$22,$22,$22,$22,$23,$23,$23
 $B8A2 DEFB $23,$23,$23,$23,$23,$23,$00,$00
 $B8AA DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B8B2 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B8BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B8C2 DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B8CA DEFB $01,$01,$16,$16,$16,$16,$16,$16
 $B8D2 DEFB $16,$16,$16,$17,$17,$17,$17,$17
 $B8DA DEFB $17,$17,$17,$17,$18,$18,$18,$18
 $B8E2 DEFB $18,$18,$18,$18,$18,$19,$19,$19
 $B8EA DEFB $19,$19,$19,$19,$19,$19,$1A,$1A
 $B8F2 DEFB $1A,$1A,$1A,$1A,$1A,$1A,$1A,$1B
 $B8FA DEFB $1B,$1B,$1B,$1B,$1B,$1B,$1B,$1B
 $B902 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B90A DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B912 DEFB $01,$01,$00,$00,$00,$00,$00,$00
 $B91A DEFB $00,$00,$00,$01,$01,$01,$01,$01
 $B922 DEFB $01,$01,$01,$01,$00,$00,$00,$00
 $B92A DEFB $00,$00,$00,$00,$00,$01,$01,$01
 $B932 DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $B93A DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B942 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B94A DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $B952 DEFB $18,$19,$19,$19,$19,$19,$19,$19
 $B95A DEFB $19,$19,$1A,$1A,$1A,$1A,$1A,$1A
 $B962 DEFB $1A,$1A,$1A,$1B,$1B,$1B,$1B,$1B
 $B96A DEFB $1B,$1B,$1B,$1B,$00,$00,$00,$00
 $B972 DEFB $00,$00,$00,$00,$00,$01,$01,$01
 $B97A DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $B982 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B98A DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $B992 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B99A DEFB $00,$01,$01,$01,$01,$01,$01,$01
 $B9A2 DEFB $01,$01,$00,$00,$00,$00,$00,$00
 $B9AA DEFB $00,$00,$00,$01,$01,$01,$01,$01
 $B9B2 DEFB $01,$01,$01,$01,$18,$18,$18,$18
 $B9BA DEFB $18,$18,$18,$18,$18,$19,$19,$19
 $B9C2 DEFB $19,$19,$19,$19,$19,$19,$1A,$1A
 $B9CA DEFB $1A,$1A,$1A,$1A,$1A,$1A,$1A,$1B
 $B9D2 DEFB $1B,$1B,$1B,$1B,$1B,$1B,$1B,$1B
 $B9DA DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $B9E2 DEFB $18,$19,$19,$19,$19,$19,$19,$19
 $B9EA DEFB $19,$19,$1A,$1A,$1A,$1A,$1A,$1A
 $B9F2 DEFB $1A,$1A,$1A,$1B,$1B,$1B,$1B,$1B
 $B9FA DEFB $1B,$1B,$1B,$1B,$1C,$1C,$1C,$1C
 $BA02 DEFB $1C,$1C,$1C,$1C,$1C,$1D,$1D,$1D
 $BA0A DEFB $1D,$1D,$1D,$1D,$1D,$1D,$1E,$1E
 $BA12 DEFB $1E,$1E,$1E,$1E,$1E,$1E,$1E,$1F
 $BA1A DEFB $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
 $BA22 DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $BA2A DEFB $20,$21,$21,$21,$21,$21,$21,$21
 $BA32 DEFB $21,$21,$20,$20,$20,$20,$20,$20
 $BA3A DEFB $20,$20,$20,$21,$21,$21,$21,$21
 $BA42 DEFB $21,$21,$21,$21

; Messaging: Game Over
@label=Messaging_GameOver
t$BA46 DEFM "GAME OVER-PRESS KEY TO TRY AGAIN" ; "#STR(#PC,$04,$20)".

; Messaging: Demo Mode
@label=Messaging_DemoMode
t$BA66 DEFM " DEMO MODE-PRESS A KEY TO PLAY  " ; "#STR(#PC,$04,$20)".

; Messaging: Out Of Fuel
@label=Messaging_OutOfFuel
t$BA86 DEFM "          OUT OF FUEL           " ; "#STR(#PC,$04,$20)".

; Messaging: The Race Is On
@label=Messaging_RaceIsOn
t$BAA6 DEFM "         THE RACE IS ON!        " ; "#STR(#PC,$04,$20)".

; Messaging: New Code
@label=Messaging_NewCode
t$BAC6 DEFM "NEW CODE ABCDE-PRESS KEY TO PLAY" ; "#STR(#PC,$04,$20)".
 $BAE6 DEFM "-------------"                    ; "#STR(#PC,$04,$0D)".

; Unused
u$BAF3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BAFB DEFB $00,$00,$00,$00,$00

; Data block at BB00
b$BB00 DEFB $00,$00,$01,$8F,$01,$08,$00,$70
 $BB08 DEFB $02,$10,$83,$8F,$03,$18,$02,$70
 $BB10 DEFB $04,$20,$05,$8F,$05,$28,$84,$70
 $BB18 DEFB $06,$30,$87,$8F,$07,$38,$46,$70
 $BB20 DEFB $08,$40,$49,$8F,$09,$48,$88,$70
 $BB28 DEFB $0A,$50,$4B,$8F,$0B,$58,$0A,$70
 $BB30 DEFB $0C,$60,$0D,$8F,$0D,$68,$4C,$70
 $BB38 DEFB $0E,$70,$0F,$7F,$01,$08,$0E,$7F
 $BB40 DEFB $00,$00,$11,$80,$0F,$78,$10,$80
 $BB48 DEFB $16,$80,$13,$93,$17,$88,$12,$70
 $BB50 DEFB $18,$90,$15,$8F,$19,$98,$14,$6C
 $BB58 DEFB $1A,$00,$17,$8F,$1B,$08,$16,$70
 $BB60 DEFB $1C,$A0,$19,$8F,$1D,$A8,$18,$70
 $BB68 DEFB $1E,$B0,$1B,$8F,$1F,$B8,$1A,$70
 $BB70 DEFB $20,$C0,$1D,$93,$21,$C8,$1C,$70
 $BB78 DEFB $22,$D0,$1F,$8F,$23,$D8,$1E,$6C
 $BB80 DEFB $00,$00,$21,$80,$01,$08,$20,$7F
 $BB88 DEFB $24,$00,$01,$8F,$25,$08,$00,$70
 $BB90 DEFB $0E,$70,$0E,$7F,$0E,$78,$01,$01
 $BB98 DEFB $01,$01,$01,$01,$01,$7F,$01,$0E

; Messaging: Level Names
;
; Used by the routine at #R$74DC.
;
; .
;
; Level 1.
@label=Messaging_Level1
t$BBA0 DEFB $42         ; Attribute #COLOUR(#PEEK(#PC)).
 $BBA1 DEFM "   THE   " ; {#UDGTABLE(default,centre)
 $BBAA DEFM "BOUNCING " ; { #FONT:(   THE   )$3D00,attr=$42(level-01-01) }
 $BBB3 DEFM "HEDGEHOGS" ; { #FONT:(BOUNCING )$3D00,attr=$42(level-01-02) }
                        ; { #FONT:(HEDGEHOGS)$3D00,attr=$42(level-01-03) }
                        ; UDGTABLE#}
; Level 2.
@label=Messaging_Level2
 $BBBC DEFB $45         ; Attribute #COLOUR(#PEEK(#PC)).
 $BBBD DEFM "   THE   " ; {#UDGTABLE(default,centre)
 $BBC6 DEFM "  WILY   " ; { #FONT:(   THE   )$3D00,attr=$45(level-02-01) }
 $BBCF DEFM "WALLABIES" ; { #FONT:(  WILY   )$3D00,attr=$45(level-02-02) }
                        ; { #FONT:(WALLABIES)$3D00,attr=$45(level-02-03) }
                        ; UDGTABLE#}
; Level 3.
@label=Messaging_Level3
 $BBD8 DEFB $46         ; Attribute #COLOUR(#PEEK(#PC)).
 $BBD9 DEFM "   THE   " ; {#UDGTABLE(default,centre)
 $BBE2 DEFM " KILLER  " ; { #FONT:(   THE   )$3D00,attr=$46(level-03-01) }
 $BBEB DEFM "  BEES   " ; { #FONT:( KILLER  )$3D00,attr=$46(level-03-02) }
                        ; { #FONT:(  BEES   )$3D00,attr=$46(level-03-03) }
                        ; UDGTABLE#}
; Level 4.
@label=Messaging_Level4
 $BBF4 DEFB $50         ; Attribute #COLOUR(#PEEK(#PC)).
 $BBF5 DEFM "   ALL   " ; {#UDGTABLE(default,centre)
 $BBFE DEFM "  THAT   " ; { #FONT:(   ALL   )$3D00,attr=$50(level-04-01) }
 $BC07 DEFM " BOUNCES " ; { #FONT:(  THAT   )$3D00,attr=$50(level-04-02) }
                        ; { #FONT:( BOUNCES )$3D00,attr=$50(level-04-03) }
                        ; UDGTABLE#}
; Level 5.
@label=Messaging_Level5
 $BC10 DEFB $70         ; Attribute #COLOUR(#PEEK(#PC)).
 $BC11 DEFM "   THE   " ; {#UDGTABLE(default,centre)
 $BC1A DEFM "  SWARM  " ; { #FONT:(   THE   )$3D00,attr=$70(level-05-01) }
 $BC23 DEFM "         " ; { #FONT:(  SWARM  )$3D00,attr=$70(level-05-02) }
                        ; { #FONT:(         )$3D00,attr=$70(level-05-03) }
                        ; UDGTABLE#}
; Level 6.
@label=Messaging_Level6
 $BC2C DEFB $56         ; Attribute #COLOUR(#PEEK(#PC)).
 $BC2D DEFM " SPRING  " ; {#UDGTABLE(default,centre)
 $BC36 DEFM "   AND   " ; { #FONT:( SPRING  )$3D00,attr=$56(level-06-01) }
 $BC3F DEFM "  STING  " ; { #FONT:(   AND   )$3D00,attr=$56(level-06-02) }
                        ; { #FONT:(  STING  )$3D00,attr=$56(level-06-03) }
                        ; UDGTABLE#}
; Level 7.
@label=Messaging_Level7
 $BC48 DEFB $44         ; Attribute #COLOUR(#PEEK(#PC)).
 $BC49 DEFM "NIGHTMARE" ; {#UDGTABLE(default,centre)
 $BC52 DEFM "  PARK   " ; { #FONT:(NIGHTMARE)$3D00,attr=$44(level-07-01) }
 $BC5B DEFM "         " ; { #FONT:(  PARK   )$3D00,attr=$44(level-07-02) }
                        ; { #FONT:(         )$3D00,attr=$44(level-07-03) }
                        ; UDGTABLE#}
; Level 8.
@label=Messaging_Level8
 $BC64 DEFB $D6         ; Attribute #COLOUR(#PEEK(#PC)).
 $BC65 DEFM " ABANDON " ; {#UDGTABLE(default,centre)
 $BC6E DEFM "   ALL   " ; { #FONT:( ABANDON )$3D00,attr=$D6(level-08-01) }
 $BC77 DEFM "  HOPE!  " ; { #FONT:(   ALL   )$3D00,attr=$D6(level-08-02) }
                        ; { #FONT:(  HOPE!  )$3D00,attr=$D6(level-08-03) }
                        ; UDGTABLE#}

; Data block at BC80
b$BC80 DEFB $06,$87,$25,$08,$24,$08,$25,$09
 $BC88 DEFB $06,$09,$27,$4A,$08,$0C,$FB,$46
 $BC90 DEFB $87,$65,$08,$64,$08,$65,$09,$46
 $BC98 DEFB $09,$67,$4A,$48,$0C,$F6

; Data block at BC9E
b$BC9E DEFB $08,$22,$07,$22,$07,$22,$06,$23
 $BCA6 DEFB $25,$64,$25,$24,$10,$25,$31,$66
 $BCAE DEFB $12,$47,$13,$4F,$FC,$08,$22,$07
 $BCB6 DEFB $22,$07,$22,$06,$23,$06,$23,$25
 $BCBE DEFB $64,$25,$24,$10,$24,$30,$64,$14
 $BCC6 DEFB $25,$34,$65,$35,$66,$15,$26,$16
 $BCCE DEFB $66,$36,$66,$17,$66,$18,$69,$F8
 $BCD6 DEFB $48,$12,$47,$12,$47,$12,$46,$13
 $BCDE DEFB $65,$54,$65,$14,$50,$15,$71,$56
 $BCE6 DEFB $52,$47,$53,$4F,$F4,$48,$12,$47
 $BCEE DEFB $12,$47,$12,$46,$13,$46,$13,$65
 $BCF6 DEFB $54,$65,$14,$50,$14,$70,$54,$54
 $BCFE DEFB $15,$74,$55,$75,$56,$55,$16,$56
 $BD06 DEFB $56,$76,$56,$57,$56,$58,$57,$F8

; Data block at BD0E
b$BD0E DEFB $06,$87,$19,$47,$1A,$08,$1B,$08
 $BD16 DEFB $1C,$09,$1D,$09,$1E,$0A,$1F,$0B
 $BD1E DEFB $80,$0F,$FF
 $BD21 DEFB $46,$87,$59,$47,$5A,$08,$5B,$08
 $BD29 DEFB $5C,$09,$5D,$09,$5E,$0A,$5F,$0B
 $BD31 DEFB $C0,$0F,$F1

; Data block at BD34
b$BD34 DEFB $0C,$21,$2C,$21,$0C,$A1,$2D,$21
 $BD3C DEFB $0E,$A1,$2E,$21,$2F,$22,$2F,$22
 $BD44 DEFB $2F,$23,$0F,$23,$0F,$25,$81,$26
 $BD4C DEFB $81,$27,$83,$28,$A3,$69,$82,$29
 $BD54 DEFB $82,$2A,$F4,$0C,$24,$2C,$24,$0B
 $BD5C DEFB $A4,$2A,$25,$09,$A5,$08,$25,$07
 $BD64 DEFB $26,$06,$26,$19,$42,$1A,$02,$1B
 $BD6C DEFB $26,$1C,$26,$84,$27,$85,$28,$86
 $BD74 DEFB $2F,$FD,$4C,$11,$6C,$11,$4C,$91
 $BD7C DEFB $6D,$11,$4E,$91,$6E,$11,$6F,$12
 $BD84 DEFB $6F,$12,$6F,$13,$4F,$13,$4F,$15
 $BD8C DEFB $C1,$16,$C1,$17,$C3,$18,$E3,$59
 $BD94 DEFB $C2,$19,$C2,$1A,$FC,$4C,$14,$6C
 $BD9C DEFB $14,$4B,$94,$6A,$15,$49,$95,$48
 $BDA4 DEFB $15,$47,$16,$46,$16,$59,$42,$5A
 $BDAC DEFB $02,$5B,$16,$5C,$16,$C4,$17,$C5
 $BDB4 DEFB $18,$C6,$1F,$F3

; Data block at BDB8
b$BDB8 DEFB $88,$23,$89,$24,$8A,$25,$8B,$26
 $BDC0 DEFB $8C,$28,$8D,$2A,$8E,$2A,$F9,$C8
 $BDC8 DEFB $13,$C9,$14,$CA,$15,$CB,$16,$CC
 $BDD0 DEFB $18,$CD,$1A,$CE,$1A,$F7,$00,$00
 $BDD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Game status buffer entry at BE00
g$BE00 DEFW $D977                           ; #N((#PC-$BE00)/$02).
 $BE02 DEFW $D9CC                           ; #N((#PC-$BE00)/$02).
 $BE04 DEFW $C594                           ; #N((#PC-$BE00)/$02).
 $BE06 DEFW $C5DE                           ; #N((#PC-$BE00)/$02).
 $BE08 DEFW $C620                           ; #N((#PC-$BE00)/$02).
 $BE0A DEFW $C662                           ; #N((#PC-$BE00)/$02).
 $BE0C DEFW $C6A4                           ; #N((#PC-$BE00)/$02).
 $BE0E DEFW $C6F1                           ; #N((#PC-$BE00)/$02).
 $BE10 DEFW $C73E                           ; #N((#PC-$BE00)/$02).
 $BE12 DEFW $C783                           ; #N((#PC-$BE00)/$02).
 $BE14 DEFW $C7D8                           ; #N((#PC-$BE00)/$02).
 $BE16 DEFW $C825                           ; #N((#PC-$BE00)/$02).
 $BE18 DEFW $C867                           ; #N((#PC-$BE00)/$02).
 $BE1A DEFW $C8B1                           ; #N((#PC-$BE00)/$02).
 $BE1C DEFW $C8FB                           ; #N((#PC-$BE00)/$02).
 $BE1E DEFW $C93D                           ; #N((#PC-$BE00)/$02).
 $BE20 DEFW $CE0E                           ; #N((#PC-$BE00)/$02).
 $BE22 DEFW $CE58                           ; #N((#PC-$BE00)/$02).
 $BE24 DEFW $CEA2                           ; #N((#PC-$BE00)/$02).
 $BE26 DEFW $CEF7                           ; #N((#PC-$BE00)/$02).
 $BE28 DEFW $CF3C                           ; #N((#PC-$BE00)/$02).
 $BE2A DEFW $CF86                           ; #N((#PC-$BE00)/$02).
 $BE2C DEFW $CFD0                           ; #N((#PC-$BE00)/$02).
 $BE2E DEFW $D01A                           ; #N((#PC-$BE00)/$02).
 $BE30 DEFW $D077                           ; #N((#PC-$BE00)/$02).
 $BE32 DEFW $D0CF                           ; #N((#PC-$BE00)/$02).
 $BE34 DEFW $D111                           ; #N((#PC-$BE00)/$02).
 $BE36 DEFW $D16E                           ; #N((#PC-$BE00)/$02).
 $BE38 DEFW $D1DC                           ; #N((#PC-$BE00)/$02).
 $BE3A DEFW $D242                           ; #N((#PC-$BE00)/$02).
 $BE3C DEFW $D2C8                           ; #N((#PC-$BE00)/$02).
 $BE3E DEFW $D323                           ; #N((#PC-$BE00)/$02).
 $BE40 DEFW $C500                           ; #N((#PC-$BE00)/$02).
 $BE42 DEFW $C54A                           ; #N((#PC-$BE00)/$02).
 $BE44 DEFW $C594                           ; #N((#PC-$BE00)/$02).
 $BE46 DEFW $C5DE                           ; #N((#PC-$BE00)/$02).
 $BE48 DEFW $C620                           ; #N((#PC-$BE00)/$02).
 $BE4A DEFW $C662                           ; #N((#PC-$BE00)/$02).
 $BE4C DEFW $C6A4                           ; #N((#PC-$BE00)/$02).
 $BE4E DEFW $C6F1                           ; #N((#PC-$BE00)/$02).
 $BE50 DEFW $C73E                           ; #N((#PC-$BE00)/$02).
 $BE52 DEFW $C783                           ; #N((#PC-$BE00)/$02).
 $BE54 DEFW $C7D8                           ; #N((#PC-$BE00)/$02).
 $BE56 DEFW $C825                           ; #N((#PC-$BE00)/$02).
 $BE58 DEFW $C867                           ; #N((#PC-$BE00)/$02).
 $BE5A DEFW $C8B1                           ; #N((#PC-$BE00)/$02).
 $BE5C DEFW $C8FB                           ; #N((#PC-$BE00)/$02).
 $BE5E DEFW $C93D                           ; #N((#PC-$BE00)/$02).
 $BE60 DEFW $CE0E                           ; #N((#PC-$BE00)/$02).
 $BE62 DEFW $CE58                           ; #N((#PC-$BE00)/$02).
 $BE64 DEFW $CEA2                           ; #N((#PC-$BE00)/$02).
 $BE66 DEFW $CEF7                           ; #N((#PC-$BE00)/$02).
 $BE68 DEFW $CF3C                           ; #N((#PC-$BE00)/$02).
 $BE6A DEFW $CF86                           ; #N((#PC-$BE00)/$02).
 $BE6C DEFW $CFD0                           ; #N((#PC-$BE00)/$02).
 $BE6E DEFW $D01A                           ; #N((#PC-$BE00)/$02).
 $BE70 DEFW $D077                           ; #N((#PC-$BE00)/$02).
 $BE72 DEFW $D0CF                           ; #N((#PC-$BE00)/$02).
 $BE74 DEFW $D111                           ; #N((#PC-$BE00)/$02).
 $BE76 DEFW $D16E                           ; #N((#PC-$BE00)/$02).
 $BE78 DEFW $D1DC                           ; #N((#PC-$BE00)/$02).
 $BE7A DEFW $D242                           ; #N((#PC-$BE00)/$02).
 $BE7C DEFW $D2C8                           ; #N((#PC-$BE00)/$02).
 $BE7E DEFW $D323                           ; #N((#PC-$BE00)/$02).
 $BE80 DEFW $D929                           ; #N((#PC-$BE00)/$02).
 $BE82 DEFW $D950                           ; #N((#PC-$BE00)/$02).
 $BE84 DEFW $CA1B                           ; #N((#PC-$BE00)/$02).
 $BE86 DEFW $CA65                           ; #N((#PC-$BE00)/$02).
 $BE88 DEFW $CAA7                           ; #N((#PC-$BE00)/$02).
 $BE8A DEFW $CAE9                           ; #N((#PC-$BE00)/$02).
 $BE8C DEFW $CB2B                           ; #N((#PC-$BE00)/$02).
 $BE8E DEFW $CB78                           ; #N((#PC-$BE00)/$02).
 $BE90 DEFW $CBC5                           ; #N((#PC-$BE00)/$02).
 $BE92 DEFW $CC0A                           ; #N((#PC-$BE00)/$02).
 $BE94 DEFW $CC5F                           ; #N((#PC-$BE00)/$02).
 $BE96 DEFW $CCAC                           ; #N((#PC-$BE00)/$02).
 $BE98 DEFW $CCEE                           ; #N((#PC-$BE00)/$02).
 $BE9A DEFW $CD38                           ; #N((#PC-$BE00)/$02).
 $BE9C DEFW $CD82                           ; #N((#PC-$BE00)/$02).
 $BE9E DEFW $CDC4                           ; #N((#PC-$BE00)/$02).
 $BEA0 DEFW $DA21                           ; #N((#PC-$BE00)/$02).
 $BEA2 DEFW $DA6B                           ; #N((#PC-$BE00)/$02).
 $BEA4 DEFW $DAB5                           ; #N((#PC-$BE00)/$02).
 $BEA6 DEFW $DB0A                           ; #N((#PC-$BE00)/$02).
 $BEA8 DEFW $DB4F                           ; #N((#PC-$BE00)/$02).
 $BEAA DEFW $DB99                           ; #N((#PC-$BE00)/$02).
 $BEAC DEFW $DBE3                           ; #N((#PC-$BE00)/$02).
 $BEAE DEFW $DC2D                           ; #N((#PC-$BE00)/$02).
 $BEB0 DEFW $DC8A                           ; #N((#PC-$BE00)/$02).
 $BEB2 DEFW $DCE2                           ; #N((#PC-$BE00)/$02).
 $BEB4 DEFW $DD24                           ; #N((#PC-$BE00)/$02).
 $BEB6 DEFW $DD81                           ; #N((#PC-$BE00)/$02).
 $BEB8 DEFW $DDEF                           ; #N((#PC-$BE00)/$02).
 $BEBA DEFW $DE55                           ; #N((#PC-$BE00)/$02).
 $BEBC DEFW $DEDB                           ; #N((#PC-$BE00)/$02).
 $BEBE DEFW $DF36                           ; #N((#PC-$BE00)/$02).
 $BEC0 DEFW $C987                           ; #N((#PC-$BE00)/$02).
 $BEC2 DEFW $C9D1                           ; #N((#PC-$BE00)/$02).
 $BEC4 DEFW $CA1B                           ; #N((#PC-$BE00)/$02).
 $BEC6 DEFW $CA65                           ; #N((#PC-$BE00)/$02).
 $BEC8 DEFW $CAA7                           ; #N((#PC-$BE00)/$02).
 $BECA DEFW $CAE9                           ; #N((#PC-$BE00)/$02).
 $BECC DEFW $CB2B                           ; #N((#PC-$BE00)/$02).
 $BECE DEFW $CB78                           ; #N((#PC-$BE00)/$02).
 $BED0 DEFW $CBC5                           ; #N((#PC-$BE00)/$02).
 $BED2 DEFW $CC0A                           ; #N((#PC-$BE00)/$02).
 $BED4 DEFW $CC5F                           ; #N((#PC-$BE00)/$02).
 $BED6 DEFW $CCAC                           ; #N((#PC-$BE00)/$02).
 $BED8 DEFW $CCEE                           ; #N((#PC-$BE00)/$02).
 $BEDA DEFW $CD38                           ; #N((#PC-$BE00)/$02).
 $BEDC DEFW $CD82                           ; #N((#PC-$BE00)/$02).
 $BEDE DEFW $CDC4                           ; #N((#PC-$BE00)/$02).
 $BEE0 DEFW $DA21                           ; #N((#PC-$BE00)/$02).
 $BEE2 DEFW $DA6B                           ; #N((#PC-$BE00)/$02).
 $BEE4 DEFW $DAB5                           ; #N((#PC-$BE00)/$02).
 $BEE6 DEFW $DB0A                           ; #N((#PC-$BE00)/$02).
 $BEE8 DEFW $DB4F                           ; #N((#PC-$BE00)/$02).
 $BEEA DEFW $DB99                           ; #N((#PC-$BE00)/$02).
 $BEEC DEFW $DBE3                           ; #N((#PC-$BE00)/$02).
 $BEEE DEFW $DC2D                           ; #N((#PC-$BE00)/$02).
 $BEF0 DEFW $DC8A                           ; #N((#PC-$BE00)/$02).
 $BEF2 DEFW $DCE2                           ; #N((#PC-$BE00)/$02).
 $BEF4 DEFW $DD24                           ; #N((#PC-$BE00)/$02).
 $BEF6 DEFW $DD81                           ; #N((#PC-$BE00)/$02).
 $BEF8 DEFW $DDEF                           ; #N((#PC-$BE00)/$02).
 $BEFA DEFW $DE55                           ; #N((#PC-$BE00)/$02).
 $BEFC DEFW $DEDB                           ; #N((#PC-$BE00)/$02).
 $BEFE DEFW $DF36                           ; #N((#PC-$BE00)/$02).
 $BF00 DEFW $D386                           ; #N((#PC-$BE00)/$02).
 $BF02 DEFW $D3DC                           ; #N((#PC-$BE00)/$02).
 $BF04 DEFW $D426                           ; #N((#PC-$BE00)/$02).
 $BF06 DEFW $D47B                           ; #N((#PC-$BE00)/$02).
 $BF08 DEFW $D4C5                           ; #N((#PC-$BE00)/$02).
 $BF0A DEFW $D525                           ; #N((#PC-$BE00)/$02).
 $BF0C DEFW $D585                           ; #N((#PC-$BE00)/$02).
 $BF0E DEFW $D5CA                           ; #N((#PC-$BE00)/$02).
 $BF10 DEFW $D617                           ; #N((#PC-$BE00)/$02).
 $BF12 DEFW $D63E                           ; #N((#PC-$BE00)/$02).
 $BF14 DEFW $D652                           ; #N((#PC-$BE00)/$02).
 $BF16 DEFW $D679                           ; #N((#PC-$BE00)/$02).
 $BF18 DEFW $D6A0                           ; #N((#PC-$BE00)/$02).
 $BF1A DEFW $D6D2                           ; #N((#PC-$BE00)/$02).
 $BF1C DEFW $D704                           ; #N((#PC-$BE00)/$02).
 $BF1E DEFW $D741                           ; #N((#PC-$BE00)/$02).
 $BF20 DEFW $D760                           ; #N((#PC-$BE00)/$02).
 $BF22 DEFW $D787                           ; #N((#PC-$BE00)/$02).
 $BF24 DEFW $D7A6                           ; #N((#PC-$BE00)/$02).
 $BF26 DEFW $D7CD                           ; #N((#PC-$BE00)/$02).
 $BF28 DEFW $D7E4                           ; #N((#PC-$BE00)/$02).
 $BF2A DEFW $D7FB                           ; #N((#PC-$BE00)/$02).
 $BF2C DEFW $D822                           ; #N((#PC-$BE00)/$02).
 $BF2E DEFW $D849                           ; #N((#PC-$BE00)/$02).
 $BF30 DEFW $D87B                           ; #N((#PC-$BE00)/$02).
 $BF32 DEFW $D8B5                           ; #N((#PC-$BE00)/$02).
 $BF34 DEFW $D8EF                           ; #N((#PC-$BE00)/$02).
 $BF36 DEFW $C500                           ; #N((#PC-$BE00)/$02).
 $BF38 DEFW $C517                           ; #N((#PC-$BE00)/$02).
 $BF3A DEFW $C52E                           ; #N((#PC-$BE00)/$02).
 $BF3C DEFW $C54D                           ; #N((#PC-$BE00)/$02).
 $BF3E DEFW $C500                           ; #N((#PC-$BE00)/$02).
 $BF40 DEFW $D386                           ; #N((#PC-$BE00)/$02).
 $BF42 DEFW $D3DC                           ; #N((#PC-$BE00)/$02).
 $BF44 DEFW $D426                           ; #N((#PC-$BE00)/$02).
 $BF46 DEFW $D47B                           ; #N((#PC-$BE00)/$02).
 $BF48 DEFW $D4C5                           ; #N((#PC-$BE00)/$02).
 $BF4A DEFW $D525                           ; #N((#PC-$BE00)/$02).
 $BF4C DEFW $D585                           ; #N((#PC-$BE00)/$02).
 $BF4E DEFW $D5CA                           ; #N((#PC-$BE00)/$02).
 $BF50 DEFW $D617                           ; #N((#PC-$BE00)/$02).
 $BF52 DEFW $D63E                           ; #N((#PC-$BE00)/$02).
 $BF54 DEFW $D652                           ; #N((#PC-$BE00)/$02).
 $BF56 DEFW $D679                           ; #N((#PC-$BE00)/$02).
 $BF58 DEFW $D6A0                           ; #N((#PC-$BE00)/$02).
 $BF5A DEFW $D6D2                           ; #N((#PC-$BE00)/$02).
 $BF5C DEFW $D704                           ; #N((#PC-$BE00)/$02).
 $BF5E DEFW $D741                           ; #N((#PC-$BE00)/$02).
 $BF60 DEFW $D760                           ; #N((#PC-$BE00)/$02).
 $BF62 DEFW $D787                           ; #N((#PC-$BE00)/$02).
 $BF64 DEFW $D7A6                           ; #N((#PC-$BE00)/$02).
 $BF66 DEFW $D7CD                           ; #N((#PC-$BE00)/$02).
 $BF68 DEFW $D7E4                           ; #N((#PC-$BE00)/$02).
 $BF6A DEFW $D7FB                           ; #N((#PC-$BE00)/$02).
 $BF6C DEFW $D822                           ; #N((#PC-$BE00)/$02).
 $BF6E DEFW $D849                           ; #N((#PC-$BE00)/$02).
 $BF70 DEFW $D87B                           ; #N((#PC-$BE00)/$02).
 $BF72 DEFW $D8B5                           ; #N((#PC-$BE00)/$02).
 $BF74 DEFW $D8EF                           ; #N((#PC-$BE00)/$02).
 $BF76 DEFW $D929                           ; #N((#PC-$BE00)/$02).
 $BF78 DEFW $D950                           ; #N((#PC-$BE00)/$02).
 $BF7A DEFW $D977                           ; #N((#PC-$BE00)/$02).
 $BF7C DEFW $D9CC                           ; #N((#PC-$BE00)/$02).
 $BF7E DEFW $C500                           ; #N((#PC-$BE00)/$02).
 $BF80 DEFW $DF99                           ; #N((#PC-$BE00)/$02).
 $BF82 DEFW $DFEF                           ; #N((#PC-$BE00)/$02).
 $BF84 DEFW $E039                           ; #N((#PC-$BE00)/$02).
 $BF86 DEFW $E08E                           ; #N((#PC-$BE00)/$02).
 $BF88 DEFW $E0D8                           ; #N((#PC-$BE00)/$02).
 $BF8A DEFW $E138                           ; #N((#PC-$BE00)/$02).
 $BF8C DEFW $E198                           ; #N((#PC-$BE00)/$02).
 $BF8E DEFW $E1DD                           ; #N((#PC-$BE00)/$02).
 $BF90 DEFW $E22A                           ; #N((#PC-$BE00)/$02).
 $BF92 DEFW $E251                           ; #N((#PC-$BE00)/$02).
 $BF94 DEFW $E265                           ; #N((#PC-$BE00)/$02).
 $BF96 DEFW $E28C                           ; #N((#PC-$BE00)/$02).
 $BF98 DEFW $E2B3                           ; #N((#PC-$BE00)/$02).
 $BF9A DEFW $E2E5                           ; #N((#PC-$BE00)/$02).
 $BF9C DEFW $E317                           ; #N((#PC-$BE00)/$02).
 $BF9E DEFW $E354                           ; #N((#PC-$BE00)/$02).
 $BFA0 DEFW $E373                           ; #N((#PC-$BE00)/$02).
 $BFA2 DEFW $E39A                           ; #N((#PC-$BE00)/$02).
 $BFA4 DEFW $E3B9                           ; #N((#PC-$BE00)/$02).
 $BFA6 DEFW $E3E0                           ; #N((#PC-$BE00)/$02).
 $BFA8 DEFW $E3F7                           ; #N((#PC-$BE00)/$02).
 $BFAA DEFW $E40E                           ; #N((#PC-$BE00)/$02).
 $BFAC DEFW $E435                           ; #N((#PC-$BE00)/$02).
 $BFAE DEFW $E45C                           ; #N((#PC-$BE00)/$02).
 $BFB0 DEFW $E48E                           ; #N((#PC-$BE00)/$02).
 $BFB2 DEFW $E4C8                           ; #N((#PC-$BE00)/$02).
 $BFB4 DEFW $E502                           ; #N((#PC-$BE00)/$02).
 $BFB6 DEFW $C987                           ; #N((#PC-$BE00)/$02).
 $BFB8 DEFW $C99E                           ; #N((#PC-$BE00)/$02).
 $BFBA DEFW $C9B5                           ; #N((#PC-$BE00)/$02).
 $BFBC DEFW $C9D4                           ; #N((#PC-$BE00)/$02).
 $BFBE DEFW $C500                           ; #N((#PC-$BE00)/$02).
 $BFC0 DEFB $99,$DF,$EF,$DF,$39,$E0,$8E,$E0
 $BFC8 DEFB $D8,$E0,$38,$E1,$98,$E1,$DD,$E1
 $BFD0 DEFB $2A,$E2,$51,$E2,$65,$E2,$8C,$E2
 $BFD8 DEFB $B3,$E2,$E5,$E2,$17,$E3,$54,$E3
 $BFE0 DEFB $73,$E3,$9A,$E3,$B9,$E3,$E0,$E3
 $BFE8 DEFB $F7,$E3,$0E,$E4,$35,$E4,$5C,$E4
 $BFF0 DEFB $8E,$E4,$C8,$E4,$02,$E5,$00,$C5
 $BFF8 DEFB $00,$C5,$00,$C5,$00,$C5,$00,$C5
 $C000 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $C008 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $C010 DEFB $48,$00,$48,$00,$48,$00,$48,$00
 $C018 DEFB $48,$00,$48,$00,$48,$00,$48,$00
 $C020 DEFB $09,$00,$0A,$00,$0B,$00,$0C,$0A
 $C028 DEFB $2C,$0A,$0C,$02,$2C,$0A,$0C,$02
 $C030 DEFB $48,$00,$48,$00,$48,$00,$48,$00
 $C038 DEFB $67,$06,$46,$00,$64,$06,$44,$0A
 $C040 DEFB $04,$0E,$24,$06,$06,$00,$27,$06
 $C048 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $C050 DEFB $4C,$02,$6C,$0E,$4C,$02,$6C,$0E
 $C058 DEFB $4C,$0E,$4B,$00,$4A,$00,$49,$00
 $C060 DEFB $2C,$0A,$0C,$02,$2C,$0A,$0C,$02
 $C068 DEFB $2C,$0A,$0C,$02,$2C,$0A,$0C,$02
 $C070 DEFB $64,$06,$44,$0A,$64,$06,$44,$0A
 $C078 DEFB $64,$06,$44,$0A,$64,$06,$44,$0A
 $C080 DEFB $04,$0E,$24,$06,$04,$0E,$24,$06
 $C088 DEFB $04,$0E,$24,$06,$04,$0E,$24,$06
 $C090 DEFB $4C,$02,$6C,$0E,$4C,$02,$6C,$0E
 $C098 DEFB $4C,$02,$6C,$0E,$4C,$02,$6C,$0E
 $C0A0 DEFB $08,$00,$07,$00,$06,$00,$05,$30
 $C0A8 DEFB $04,$0E,$24,$06,$04,$0E,$24,$06
 $C0B0 DEFB $48,$00,$48,$00,$48,$00,$48,$00
 $C0B8 DEFB $49,$02,$6A,$0E,$4B,$02,$6C,$0E
 $C0C0 DEFB $2C,$0A,$0B,$02,$2A,$0A,$09,$02
 $C0C8 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $C0D0 DEFB $64,$06,$44,$0A,$64,$06,$44,$0A
 $C0D8 DEFB $45,$30,$46,$00,$47,$00,$48,$00
 $C0E0 DEFB $08,$00,$27,$10,$08,$00,$08,$00
 $C0E8 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $C0F0 DEFB $48,$00,$48,$00,$48,$00,$48,$00
 $C0F8 DEFB $48,$00,$48,$00,$67,$10,$48,$00
 $C100 DEFB $08,$00,$08,$00,$08,$00,$06,$0E
 $C108 DEFB $05,$00,$04,$0F,$23,$07,$24,$06
 $C110 DEFB $08,$00,$08,$00,$08,$00,$08,$30
 $C118 DEFB $06,$00,$04,$0F,$23,$07,$24,$06
 $C120 DEFB $48,$00,$48,$00,$49,$00,$6A,$01
 $C128 DEFB $4B,$02,$6C,$0E,$4C,$02,$6C,$0E
 $C130 DEFB $2C,$0A,$0C,$02,$2C,$0A,$0B,$02
 $C138 DEFB $2A,$01,$09,$00,$08,$00,$08,$00
 $C140 DEFB $64,$06,$63,$07,$44,$0B,$45,$00
 $C148 DEFB $46,$0A,$48,$00,$48,$00,$48,$00
 $C150 DEFB $64,$06,$63,$07,$44,$0B,$46,$00
 $C158 DEFB $48,$30,$48,$00,$48,$00,$48,$00
 $C160 DEFB $08,$00,$08,$00,$09,$00,$0A,$00
 $C168 DEFB $0B,$50,$0C,$D1,$2C,$01,$0C,$03
 $C170 DEFB $48,$00,$48,$00,$48,$00,$48,$00
 $C178 DEFB $47,$07,$46,$01,$66,$07,$46,$01
 $C180 DEFB $06,$01,$26,$07,$06,$01,$27,$07
 $C188 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $C190 DEFB $4C,$03,$6C,$01,$4C,$D1,$4B,$50
 $C198 DEFB $4A,$00,$49,$00,$48,$00,$48,$00
 $C1A0 DEFB $08,$70,$08,$70,$08,$70,$08,$D0
 $C1A8 DEFB $08,$70,$08,$70,$08,$70,$08,$70
 $C1B0 DEFB $48,$70,$48,$70,$48,$D0,$48,$70
 $C1B8 DEFB $48,$70,$48,$70,$48,$70,$48,$70
 $C1C0 DEFB $2C,$01,$0B,$03,$0B,$01,$2A,$0B
 $C1C8 DEFB $2A,$01,$29,$01,$29,$0B,$29,$01
 $C1D0 DEFB $47,$01,$67,$0F,$67,$01,$67,$01
 $C1D8 DEFB $68,$01,$68,$0F,$68,$01,$68,$01
 $C1E0 DEFB $28,$01,$28,$01,$28,$0B,$28,$01
 $C1E8 DEFB $27,$01,$27,$01,$27,$0B,$07,$01
 $C1F0 DEFB $69,$01,$69,$0F,$69,$01,$6A,$01
 $C1F8 DEFB $6A,$0F,$4B,$01,$4B,$03,$6C,$01
 $C200 DEFB $08,$00,$08,$00,$08,$90,$0A,$01
 $C208 DEFB $0A,$D1,$0A,$01,$29,$01,$09,$03
 $C210 DEFB $48,$00,$48,$00,$48,$00,$48,$00
 $C218 DEFB $48,$00,$67,$07,$47,$01,$48,$01
 $C220 DEFB $08,$01,$07,$01,$27,$07,$08,$00
 $C228 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $C230 DEFB $49,$03,$69,$01,$4A,$D1,$4A,$01
 $C238 DEFB $4A,$01,$48,$90,$48,$00,$48,$00
 $C240 DEFB $08,$B0,$08,$00,$08,$00,$08,$00
 $C248 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $C250 DEFB $48,$00,$48,$00,$48,$00,$48,$00
 $C258 DEFB $48,$00,$48,$00,$48,$00,$48,$B0
 $C260 DEFB $03,$81,$03,$81,$01,$01,$01,$01
 $C268 DEFB $47,$05,$47,$05,$05,$05,$05,$05
 $C270 DEFB $01,$01,$01,$21,$21,$21,$21,$21
 $C278 DEFB $25,$25,$25,$25,$25,$05,$05,$05
 $C280 DEFB $01,$01,$01,$01,$01,$01,$03,$81
 $C288 DEFB $05,$05,$05,$05,$05,$05,$47,$05
 $C290 DEFB $01,$43,$01,$01,$01,$01,$01,$01
 $C298 DEFB $85,$07,$05,$05,$05,$05,$05,$05
 $C2A0 DEFB $03,$81,$01,$03,$03,$03,$03,$03
 $C2A8 DEFB $45,$05,$05,$07,$07,$07,$07,$07
 $C2B0 DEFB $03,$03,$03,$03,$03,$01,$01,$43
 $C2B8 DEFB $07,$07,$07,$07,$07,$05,$85,$07
 $C2C0 DEFB $01,$01,$01,$01,$01,$03,$81,$01
 $C2C8 DEFB $05,$05,$05,$05,$05,$47,$05,$05
 $C2D0 DEFB $01,$01,$43,$01,$01,$01,$01,$01
 $C2D8 DEFB $05,$85,$07,$05,$05,$05,$05,$05
 $C2E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C2E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C2F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C2F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C300 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $C308 DEFB $05,$05,$05,$05,$05,$05,$05,$05
 $C310 DEFB $01,$01,$01,$01,$03,$81,$03,$81
 $C318 DEFB $05,$05,$05,$05,$47,$05,$47,$05
 $C320 DEFB $01,$43,$01,$43,$01,$01,$01,$01
 $C328 DEFB $85,$07,$85,$07,$05,$05,$05,$05
 $C330 DEFB $03,$81,$03,$81,$03,$81,$03,$81
 $C338 DEFB $47,$05,$47,$05,$47,$05,$47,$05
 $C340 DEFB $01,$43,$01,$43,$01,$43,$01,$43
 $C348 DEFB $85,$07,$85,$07,$85,$07,$85,$07
 $C350 DEFB $01,$01,$01,$01,$01,$43,$01,$43
 $C358 DEFB $05,$05,$05,$05,$85,$07,$85,$07
 $C360 DEFB $03,$81,$03,$81,$01,$01,$01,$01
 $C368 DEFB $47,$05,$47,$05,$05,$05,$05,$05
 $C370 DEFB $01,$01,$01,$21,$21,$21,$21,$21
 $C378 DEFB $25,$25,$25,$25,$25,$05,$05,$05
 $C380 DEFB $01,$01,$01,$01,$01,$01,$03,$81
 $C388 DEFB $05,$05,$05,$05,$05,$05,$47,$05
 $C390 DEFB $01,$43,$01,$01,$01,$01,$01,$01
 $C398 DEFB $85,$07,$05,$05,$05,$05,$05,$05
 $C3A0 DEFB $03,$81,$01,$03,$03,$03,$03,$03
 $C3A8 DEFB $45,$05,$05,$07,$07,$07,$07,$07
 $C3B0 DEFB $03,$03,$03,$03,$03,$01,$01,$43
 $C3B8 DEFB $07,$07,$07,$07,$07,$05,$85,$07
 $C3C0 DEFB $01,$01,$01,$01,$01,$03,$81,$01
 $C3C8 DEFB $05,$05,$05,$05,$05,$47,$05,$05
 $C3D0 DEFB $01,$01,$43,$01,$01,$01,$01,$01
 $C3D8 DEFB $05,$85,$07,$05,$05,$05,$05,$05

; Messaging: MPH
@label=Messaging_MPH
t$C3E0 DEFM "MPH "   ; "#STR(#PC,$04,$04)".

; Graphics: Arrow Top
;
; #UDGTABLE(default,centre)
; { #UDGARRAY$02,attr=$06,scale=$04,step=$01;$786C-$7874-$08(arrow-top) }
; UDGTABLE#
@label=Graphics_ArrowTop
b$C3E4 DEFB $6C      ; See #R$786C.
 $C3E5 DEFB $74      ; See #R$7874.

; Messaging: Fuel
@label=Messaging_Fuel
t$C3E6 DEFM "FUEL"   ; "#STR(#PC,$04,$04)".

; Graphics: Arrow Middle
;
; #UDGTABLE(default,centre)
; { #UDGARRAY$02,attr=$06,scale=$04,step=$01;$787C-$7884-$08(arrow-middle) }
; UDGTABLE#
@label=Graphics_ArrowMiddle
b$C3EA DEFB $7C      ; See #R$787C.
 $C3EB DEFB $84      ; See #R$7884.

; Messaging: RPM
@label=Messaging_RPM
t$C3EC DEFM "RPM "   ; "#STR(#PC,$04,$04)".

; Graphics: Arrow Bottom
;
; #UDGTABLE(default,centre)
; { #UDGARRAY$02,attr=$06,scale=$04,step=$01;$788C-$7894-$08(arrow-bottom) }
; UDGTABLE#
@label=Graphics_ArrowBottom
b$C3F0 DEFB $8C      ; See #R$788C.
 $C3F1 DEFB $94      ; See #R$7894.

; Messaging: Score
@label=Messaging_Score
t$C3F2 DEFM "SCORE-" ; "#STR(#PC,$04,$06)".

; Messaging: Target
@label=Messaging_Target
t$C3F8 DEFM "TARGET-" ; "#STR(#PC,$04,$07)".
 $C3FF DEFM "-"

; Data block at C400
b$C400 DEFB $0C,$21,$2C,$21,$0C,$A1,$2D,$21
 $C408 DEFB $0E,$A1,$0E,$21,$0F,$22,$2F,$62
 $C410 DEFB $2F,$23,$0F,$23,$0F,$25,$81,$26
 $C418 DEFB $81,$27,$83,$28,$A3,$69,$82,$29
 $C420 DEFB $82,$2A,$F4,$0C,$24,$2C,$24,$0B
 $C428 DEFB $A4,$2A,$25,$09,$A5,$08,$25,$27
 $C430 DEFB $66,$06,$26,$19,$42,$1A,$02,$1B
 $C438 DEFB $26,$1C,$26,$84,$27,$85,$28,$86
 $C440 DEFB $2F,$FD,$4C,$11,$6C,$11,$4C,$91
 $C448 DEFB $6D,$11,$4E,$91,$4E,$11,$4F,$12
 $C450 DEFB $6F,$54,$6F,$13,$4F,$13,$4F,$15
 $C458 DEFB $C1,$16,$C1,$17,$C3,$18,$E3,$59
 $C460 DEFB $C2,$19,$C2,$1A,$FC,$4C,$14,$6C
 $C468 DEFB $14,$4B,$94,$6A,$15,$49,$95,$48
 $C470 DEFB $15,$67,$56,$46,$16,$59,$42,$5A
 $C478 DEFB $02,$5B,$16,$5C,$16,$C4,$17,$C5
 $C480 DEFB $18,$C6,$1F,$F3,$00,$00,$00,$00
 $C488 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C490 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C498 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C4F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Sprite Animation Data
;
; .
;
; .
;
; Sprite #N$01, Frame #N$01.
@label=SpriteAnimationData
b$C500 DEFB $00,$FE                         ; X/ Y position offsets.
 $C502 DEFB $66,$99,$8C,$42,$C1,$B0,$AE,$7F ; #UDGTABLE(default,centre) {
                                            ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;(#PC)-(#PC+$08)-$08(graphic-(#PC))
                                            ; } TABLE#
 $C50A DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$01, Frame #N$02 ($04 bytes).
 $C50B DEFB $01,$00                         ; X/ Y position offsets.
 $C50D DEFB $00,$00                         ; Pixel/ control data.
 $C50F DEFB $80                             ; Animation sequence terminator.
 $C510 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$03, Frame #N$01 ($04 bytes).
 $C511 DEFB $E0,$70                         ; X/ Y position offsets.
 $C513 DEFB $F0,$20                         ; Pixel/ control data.
 $C515 DEFB $FF                             ; Frame #N$01 terminator.
 $C516 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$04, Frame #N$01.
 $C517 DEFB $00,$FE                         ; X/ Y position offsets.
 $C519 DEFB $06,$09,$08,$04,$0C,$0B,$0A,$07 ; #UDGTABLE(default,centre) {
                                            ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;(#PC)-(#PC+$08)-$08(graphic-(#PC))
                                            ; } TABLE#
 $C521 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$04, Frame #N$02.
 $C522 DEFB $01,$00                         ; X/ Y position offsets.
 $C524 DEFB $60,$90,$C8,$28,$1E,$07,$EF,$F2 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $C52C DEFB $FF                             ; Frame #N$02 terminator.
 $C52D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$05, Frame #N$01 ($12 bytes).
 $C52E DEFB $00,$FE                         ; X/ Y position offsets.
 $C530 DEFB $0E,$09,$78,$B7,$B5,$96,$7D,$09 ; {Pixel/ control data.
 $C538 DEFB $11,$22,$22,$1C,$00,$00,$00,$00 ; }
 $C540 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$05, Frame #N$02 (control byte).
 $C541 DEFB $01                             ; Control data.
 $C542 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$05, Frame #N$03 (position only).
 $C543 DEFB $00,$00                         ; X/ Y position offsets.
 $C545 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$06, Frame #N$01 ($05 bytes).
 $C546 DEFB $E0,$70                         ; X/ Y position offsets.
 $C548 DEFB $F0,$A0,$00                     ; Pixel/ control data.
 $C54B DEFB $FF                             ; Frame #N$01 terminator.
 $C54C DEFB $80                             ; Animation sequence terminator.
; Sprite #N$07, Frame #N$01 ($12 bytes).
 $C54D DEFB $00,$FE                         ; X/ Y position offsets.
 $C54F DEFB $00,$00,$07,$0B,$0B,$09,$07,$00 ; {Pixel/ control data.
 $C557 DEFB $01,$02,$02,$01,$00,$00,$00,$00 ; }
 $C55F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$07, Frame #N$02 (control byte).
 $C560 DEFB $01                             ; Control data.
 $C561 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$07, Frame #N$03 ($10 bytes).
 $C562 DEFB $E0,$90                         ; X/ Y position offsets.
 $C564 DEFB $88,$7E,$57,$6F,$DA,$90,$10,$20 ; {Pixel/ control data.
 $C56C DEFB $20,$C0,$00,$00,$00,$00         ; }
 $C572 DEFB $FF                             ; Frame #N$03 terminator.
 $C573 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$08, Frame #N$01 ($0B bytes).
 $C574 DEFB $A4,$9F                         ; X/ Y position offsets.
 $C576 DEFB $8F,$40,$40,$A0,$20,$39,$02,$88 ; {Pixel/ control data.
 $C57E DEFB $70                             ; }
 $C57F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$08, Frame #N$02 (control byte).
 $C580 DEFB $01                             ; Control data.
 $C581 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$08, Frame #N$03 (control byte).
 $C582 DEFB $00                             ; Control data.
 $C583 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$09, Frame #N$01 ($07 bytes).
 $C584 DEFB $40,$30                         ; X/ Y position offsets.
 $C586 DEFB $88,$28,$A0,$C0,$40             ; Pixel/ control data.
 $C58B DEFB $80                             ; Animation sequence terminator.
 $C58C DEFB $80                             ; Animation sequence terminator.
 $C58D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$0C, Frame #N$01 ($04 bytes).
 $C58E DEFB $00,$00                         ; X/ Y position offsets.
 $C590 DEFB $00,$00                         ; Pixel/ control data.
 $C592 DEFB $FF                             ; Frame #N$01 terminator.
 $C593 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$0D, Frame #N$01 ($12 bytes).
 $C594 DEFB $00,$00                         ; X/ Y position offsets.
 $C596 DEFB $00,$07,$08,$10,$12,$13,$09,$07 ; {Pixel/ control data.
 $C59E DEFB $03,$01,$01,$01,$00,$00,$00,$00 ; }
 $C5A6 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$0D, Frame #N$02 (control byte).
 $C5A7 DEFB $01                             ; Control data.
 $C5A8 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$0D, Frame #N$03 ($18 bytes).
 $C5A9 DEFB $20,$60                         ; X/ Y position offsets.
 $C5AB DEFB $F0,$70,$78,$56,$B1,$D4,$37,$C6 ; {Pixel/ control data.
 $C5B3 DEFB $26,$17,$8F,$40,$20,$20,$10,$1C ;
 $C5BB DEFB $27,$24,$20,$11,$0E,$00         ; }
 $C5C1 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$0D, Frame #N$04 ($09 bytes).
 $C5C2 DEFB $01,$FE                         ; X/ Y position offsets.
 $C5C4 DEFB $00,$00,$00,$00,$00,$00,$00     ; Pixel/ control data.
 $C5CB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$0E, Frame #N$01 ($04 bytes).
 $C5CC DEFB $70,$0C                         ; X/ Y position offsets.
 $C5CE DEFB $C4,$34                         ; Pixel/ control data.
 $C5D0 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$0F, Frame #N$01 ($06 bytes).
 $C5D1 DEFB $60,$20                         ; X/ Y position offsets.
 $C5D3 DEFB $20,$20,$40,$40                 ; Pixel/ control data.
 $C5D7 DEFB $80                             ; Animation sequence terminator.
 $C5D8 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$11, Frame #N$01 ($03 bytes).
 $C5D9 DEFB $00,$00                         ; X/ Y position offsets.
 $C5DB DEFB $00                             ; Pixel/ control data.
 $C5DC DEFB $FF                             ; Frame #N$01 terminator.
 $C5DD DEFB $80                             ; Animation sequence terminator.
; Sprite #N$12, Frame #N$01.
 $C5DE DEFB $00,$00                         ; X/ Y position offsets.
 $C5E0 DEFB $00,$07,$08,$10,$12,$13,$09,$07 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $C5E8 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$12, Frame #N$02 ($1A bytes).
 $C5E9 DEFB $01,$00                         ; X/ Y position offsets.
 $C5EB DEFB $40,$E0,$E0,$70,$7E,$59,$88,$58 ; {Pixel/ control data.
 $C5F3 DEFB $64,$50,$48,$24,$23,$10,$08,$04 ;
 $C5FB DEFB $02,$09,$09,$08,$04,$03,$00,$00 ; }
 $C603 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$12, Frame #N$03 ($17 bytes).
 $C604 DEFB $01,$FE                         ; X/ Y position offsets.
 $C606 DEFB $00,$00,$00,$00,$00,$C0,$30,$0C ; {Pixel/ control data.
 $C60E DEFB $C2,$82,$88,$40,$F8,$08,$08,$08 ;
 $C616 DEFB $10,$E0,$00,$20,$40             ; }
 $C61B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$13, Frame #N$01 (position only).
 $C61C DEFB $00,$00                         ; X/ Y position offsets.
 $C61E DEFB $FF                             ; Frame #N$01 terminator.
 $C61F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$14, Frame #N$01.
 $C620 DEFB $00,$00                         ; X/ Y position offsets.
 $C622 DEFB $00,$07,$08,$10,$12,$13,$09,$07 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $C62A DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$14, Frame #N$02 ($1A bytes).
 $C62B DEFB $01,$00                         ; X/ Y position offsets.
 $C62D DEFB $40,$E0,$FE,$73,$60,$51,$BA,$CB ; {Pixel/ control data.
 $C635 DEFB $31,$2F,$21,$10,$08,$04,$03,$01 ;
 $C63D DEFB $01,$01,$00,$00,$00,$00,$00,$00 ; }
 $C645 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$14, Frame #N$03.
 $C646 DEFB $01,$FE                         ; X/ Y position offsets.
 $C648 DEFB $00,$00,$00,$E0,$18,$06,$02,$0A ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $C650 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$15, Frame #N$01 ($0F bytes).
 $C651 DEFB $DC,$E4                         ; X/ Y position offsets.
 $C653 DEFB $04,$04,$04,$08,$F4,$24,$04,$88 ; {Pixel/ control data.
 $C65B DEFB $70,$00,$00,$00,$00             ; }
 $C660 DEFB $FF                             ; Frame #N$01 terminator.
 $C661 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$16, Frame #N$01 (control byte).
 $C662 DEFB $00                             ; Control data.
 $C663 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$16, Frame #N$02 ($10 bytes).
 $C664 DEFB $00,$00                         ; X/ Y position offsets.
 $C666 DEFB $00,$00,$00,$00,$00,$01,$00,$07 ; {Pixel/ control data.
 $C66E DEFB $08,$10,$13,$10,$08,$07         ; }
 $C674 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$16, Frame #N$03 ($12 bytes).
 $C675 DEFB $01,$00                         ; X/ Y position offsets.
 $C677 DEFB $C0,$6F,$F0,$78,$78,$E4,$BC,$32 ; {Pixel/ control data.
 $C67F DEFB $09,$04,$02,$01,$00,$00,$00,$00 ; }
 $C687 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$16, Frame #N$04 (control byte).
 $C688 DEFB $01                             ; Control data.
 $C689 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$16, Frame #N$05 ($18 bytes).
 $C68A DEFB $00,$C0                         ; X/ Y position offsets.
 $C68C DEFB $3E,$01,$E1,$84,$44,$FA,$F1,$01 ; {Pixel/ control data.
 $C694 DEFB $01,$81,$62,$1C,$49,$41,$22,$1C ;
 $C69C DEFB $00,$00,$00,$00,$00,$00         ; }
 $C6A2 DEFB $FF                             ; Frame #N$05 terminator.
 $C6A3 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$17, Frame #N$01 (control byte).
 $C6A4 DEFB $00                             ; Control data.
 $C6A5 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$17, Frame #N$02 ($10 bytes).
 $C6A6 DEFB $00,$00                         ; X/ Y position offsets.
 $C6A8 DEFB $00,$00,$00,$00,$00,$03,$01,$07 ; {Pixel/ control data.
 $C6B0 DEFB $08,$10,$13,$13,$08,$07         ; }
 $C6B6 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$17, Frame #N$03 ($12 bytes).
 $C6B7 DEFB $01,$00                         ; X/ Y position offsets.
 $C6B9 DEFB $CF,$F0,$D1,$68,$70,$CC,$F3,$0C ; {Pixel/ control data.
 $C6C1 DEFB $03,$00,$00,$00,$00,$00,$00,$00 ; }
 $C6C9 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$17, Frame #N$04 ($1A bytes).
 $C6CA DEFB $01,$FE                         ; X/ Y position offsets.
 $C6CC DEFB $00,$00,$00,$00,$00,$00,$00,$0C ; {Pixel/ control data.
 $C6D4 DEFB $F2,$00,$1C,$8C,$72,$E2,$C1,$01 ;
 $C6DC DEFB $01,$E2,$1C,$24,$20,$11,$0E,$00 ; }
 $C6E4 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$17, Frame #N$05 ($04 bytes).
 $C6E5 DEFB $01,$00                         ; X/ Y position offsets.
 $C6E7 DEFB $00,$00                         ; Pixel/ control data.
 $C6E9 DEFB $80                             ; Animation sequence terminator.
 $C6EA DEFB $80                             ; Animation sequence terminator.
 $C6EB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$1A, Frame #N$01 ($03 bytes).
 $C6EC DEFB $00,$00                         ; X/ Y position offsets.
 $C6EE DEFB $00                             ; Pixel/ control data.
 $C6EF DEFB $FF                             ; Frame #N$01 terminator.
 $C6F0 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$1B, Frame #N$01 (control byte).
 $C6F1 DEFB $00                             ; Control data.
 $C6F2 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$1B, Frame #N$02 ($10 bytes).
 $C6F3 DEFB $00,$00                         ; X/ Y position offsets.
 $C6F5 DEFB $00,$00,$00,$00,$00,$07,$03,$07 ; {Pixel/ control data.
 $C6FD DEFB $08,$10,$13,$10,$08,$07         ; }
 $C703 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$1B, Frame #N$03 (control byte).
 $C704 DEFB $01                             ; Control data.
 $C705 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$1B, Frame #N$04 ($10 bytes).
 $C706 DEFB $00,$00                         ; X/ Y position offsets.
 $C708 DEFB $00,$00,$00,$03,$1C,$60,$C2,$E1 ; {Pixel/ control data.
 $C710 DEFB $FC,$67,$CD,$7C,$83,$00         ; }
 $C716 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$1B, Frame #N$05 (control byte).
 $C717 DEFB $01                             ; Control data.
 $C718 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$1B, Frame #N$06 ($18 bytes).
 $C719 DEFB $00,$00                         ; X/ Y position offsets.
 $C71B DEFB $00,$30,$C8,$00,$50,$0C,$AA,$71 ; {Pixel/ control data.
 $C723 DEFB $B0,$20,$C0,$01,$FE,$04,$20,$11 ;
 $C72B DEFB $0E,$00,$00,$00,$00,$00         ; }
 $C731 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$1B, Frame #N$07 (control byte).
 $C732 DEFB $01                             ; Control data.
 $C733 DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$1B, Frame #N$08 (position only).
 $C734 DEFB $00,$00                         ; X/ Y position offsets.
 $C736 DEFB $80                             ; Animation sequence terminator.
 $C737 DEFB $80                             ; Animation sequence terminator.
 $C738 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$1E, Frame #N$01 (control byte).
 $C739 DEFB $00                             ; Control data.
 $C73A DEFB $80                             ; Animation sequence terminator.
 $C73B DEFB $80                             ; Animation sequence terminator.
 $C73C DEFB $FF                             ; Frame #N$01 terminator.
 $C73D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$21, Frame #N$01 (control byte).
 $C73E DEFB $00                             ; Control data.
 $C73F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$21, Frame #N$02 ($10 bytes).
 $C740 DEFB $00,$00                         ; #UDGTABLE(default,centre) {
                                            ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;$C740-$C748-$08(player-01)
                                            ; } TABLE#
 $C742 DEFB $00,$00,$00,$00,$00,$0F,$0F,$07 ; {Pixel/ control data.
 $C74A DEFB $08,$11,$13,$10,$08,$07         ; }
 $C750 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$21, Frame #N$03 (control byte).
 $C751 DEFB $01                             ; Control data.
 $C752 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$21, Frame #N$04 ($0E bytes).
 $C753 DEFB $00,$00                         ; #UDGTABLE(default,centre) {
                                            ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;$C753-$C75B-$08(player-02)
                                            ; } TABLE#
 $C755 DEFB $00,$03,$0C,$32,$44,$C3,$F1,$4C ; {Pixel/ control data.
 $C75D DEFB $89,$57,$FC,$43                 ; }
 $C761 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$22, Frame #N$01 (control byte).
 $C762 DEFB $00                             ; Control data.
 $C763 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$22, Frame #N$02 (control byte).
 $C764 DEFB $01                             ; Control data.
 $C765 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$22, Frame #N$03 ($10 bytes).
 $C766 DEFB $00,$C0                         ; #UDGTABLE(default,centre) {
                                            ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;$C766-$C76E-$08(player-03)
                                            ; } TABLE#
 $C768 DEFB $A0,$00,$60,$18,$F6,$F1,$F0,$E0 ; {Pixel/ control data.
 $C770 DEFB $40,$87,$3A,$D0,$08,$07         ; }
 $C776 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$22, Frame #N$04 (position only).
 $C777 DEFB $01,$00                         ; #UDGTABLE(default,centre) {
                                            ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;$C777-$C77F-$08{$00,$00,$20,$28}(player-04)
                                            ; } TABLE#
 $C779 DEFB $80                             ; Animation sequence terminator.
 $C77A DEFB $80                             ; Animation sequence terminator.
 $C77B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$25, Frame #N$01 ($03 bytes).
 $C77C DEFB $40,$40                         ; X/ Y position offsets.
 $C77E DEFB $40                             ; Pixel/ control data.
 $C77F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$26, Frame #N$01 (control byte).
 $C780 DEFB $00                             ; Control data.
 $C781 DEFB $FF                             ; Frame #N$01 terminator.
 $C782 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$27, Frame #N$01 (control byte).
 $C783 DEFB $00                             ; Control data.
 $C784 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$27, Frame #N$02 ($10 bytes).
 $C785 DEFB $00,$00                         ; #UDGTABLE(default,centre) {
                                            ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;$C785-$C78D-$08(graphic-32)
                                            ; } TABLE#
 $C787 DEFB $00,$00,$00,$00,$03,$0F,$1E,$17 ; {Pixel/ control data.
 $C78F DEFB $08,$11,$13,$10,$08,$07         ; }
 $C795 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$27, Frame #N$03 ($10 bytes).
 $C796 DEFB $01,$FE                         ; #UDGTABLE(default,centre) {
                                            ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;$C796-$C7AE-$08{$00,$00,$20,$68}(graphic-33)
                                            ; } TABLE#
 $C798 DEFB $00,$00,$00,$00,$00,$00,$03,$04 ; {Pixel/ control data.
 $C7A0 DEFB $05,$08,$12,$20,$44,$87         ; }
 $C7A6 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$28, Frame #N$01 ($07 bytes).
 $C7A7 DEFB $F8,$D3                         ; X/ Y position offsets.
 $C7A9 DEFB $2C,$D7,$E0,$40,$40             ; Pixel/ control data.
 $C7AE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$29, Frame #N$01 (control byte).
 $C7AF DEFB $00                             ; Control data.
 $C7B0 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$29, Frame #N$02 (control byte).
 $C7B1 DEFB $01                             ; Control data.
 $C7B2 DEFB $FF                             ; Frame #N$02 terminator.
 $C7B3 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$2A, Frame #N$01 ($0F bytes).
 $C7B4 DEFB $60,$DC                         ; X/ Y position offsets.
 $C7B6 DEFB $C2,$C1,$E0,$C2,$82,$0E,$30,$C8 ; {Pixel/ control data.
 $C7BE DEFB $07,$00,$00,$00,$00             ; }
 $C7C3 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$2A, Frame #N$02 (control byte).
 $C7C4 DEFB $01                             ; Control data.
 $C7C5 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$2A, Frame #N$03 ($06 bytes).
 $C7C6 DEFB $00,$00                         ; X/ Y position offsets.
 $C7C8 DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $C7CC DEFB $80                             ; Animation sequence terminator.
; Sprite #N$2B, Frame #N$01 ($03 bytes).
 $C7CD DEFB $40,$40                         ; X/ Y position offsets.
 $C7CF DEFB $40                             ; Pixel/ control data.
 $C7D0 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$2C, Frame #N$01 ($05 bytes).
 $C7D1 DEFB $00,$00                         ; X/ Y position offsets.
 $C7D3 DEFB $00,$00,$00                     ; Pixel/ control data.
 $C7D6 DEFB $FF                             ; Frame #N$01 terminator.
 $C7D7 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$2D, Frame #N$01 (control byte).
 $C7D8 DEFB $00                             ; Control data.
 $C7D9 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$2D, Frame #N$02 ($10 bytes).
 $C7DA DEFB $00,$00                         ; X/ Y position offsets.
 $C7DC DEFB $00,$00,$01,$01,$02,$0F,$3E,$1F ; {Pixel/ control data.
 $C7E4 DEFB $08,$11,$13,$10,$08,$07         ; }
 $C7EA DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$2D, Frame #N$03 ($18 bytes).
 $C7EB DEFB $01,$FE                         ; X/ Y position offsets.
 $C7ED DEFB $00,$00,$00,$00,$00,$1C,$10,$24 ; {Pixel/ control data.
 $C7F5 DEFB $25,$29,$4A,$A6,$3E,$7E,$02,$E4 ;
 $C7FD DEFB $A8,$51,$D2,$FC,$60,$40         ; }
 $C803 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$2E, Frame #N$01 (control byte).
 $C804 DEFB $00                             ; Control data.
 $C805 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$2E, Frame #N$02 (control byte).
 $C806 DEFB $01                             ; Control data.
 $C807 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$2E, Frame #N$03 ($10 bytes).
 $C808 DEFB $E0,$18                         ; X/ Y position offsets.
 $C80A DEFB $06,$09,$08,$0C,$10,$31,$CE,$00 ; {Pixel/ control data.
 $C812 DEFB $00,$00,$00,$00,$00,$00         ; }
 $C818 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$2E, Frame #N$04 (control byte).
 $C819 DEFB $01                             ; Control data.
 $C81A DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$2E, Frame #N$05 ($04 bytes).
 $C81B DEFB $00,$00                         ; X/ Y position offsets.
 $C81D DEFB $00,$00                         ; Pixel/ control data.
 $C81F DEFB $80                             ; Animation sequence terminator.
 $C820 DEFB $80                             ; Animation sequence terminator.
 $C821 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$31, Frame #N$01 (control byte).
 $C822 DEFB $00                             ; Control data.
 $C823 DEFB $FF                             ; Frame #N$01 terminator.
 $C824 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$32, Frame #N$01 (control byte).
 $C825 DEFB $00                             ; Control data.
 $C826 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$32, Frame #N$02 ($10 bytes).
 $C827 DEFB $00,$01                         ; X/ Y position offsets.
 $C829 DEFB $01,$01,$02,$02,$03,$07,$1E,$3F ; {Pixel/ control data.
 $C831 DEFB $08,$11,$13,$10,$08,$07         ; }
 $C837 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$32, Frame #N$03 ($14 bytes).
 $C838 DEFB $01,$FE                         ; X/ Y position offsets.
 $C83A DEFB $00,$00,$00,$00,$30,$40,$4B,$82 ; {Pixel/ control data.
 $C842 DEFB $82,$26,$3A,$02,$02,$24,$C8,$51 ;
 $C84A DEFB $26,$78                         ; }
 $C84C DEFB $80                             ; Animation sequence terminator.
; Sprite #N$33, Frame #N$01 ($03 bytes).
 $C84D DEFB $C0,$40                         ; X/ Y position offsets.
 $C84F DEFB $40                             ; Pixel/ control data.
 $C850 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$34, Frame #N$01 (control byte).
 $C851 DEFB $00                             ; Control data.
 $C852 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$34, Frame #N$02 ($12 bytes).
 $C853 DEFB $01,$FE                         ; X/ Y position offsets.
 $C855 DEFB $00,$00,$00,$00,$00,$00,$C0,$20 ; {Pixel/ control data.
 $C85D DEFB $14,$12,$11,$19,$21,$42,$9C,$00 ; }
 $C865 DEFB $FF                             ; Frame #N$02 terminator.
 $C866 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$35, Frame #N$01 ($1A bytes).
 $C867 DEFB $00,$FE                         ; X/ Y position offsets.
 $C869 DEFB $00,$00,$00,$00,$01,$01,$02,$02 ; {Pixel/ control data.
 $C871 DEFB $04,$04,$04,$05,$08,$08,$08,$0D ;
 $C879 DEFB $1E,$3F,$18,$11,$13,$10,$08,$07 ; }
 $C881 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$35, Frame #N$02 ($18 bytes).
 $C882 DEFB $01,$FE                         ; X/ Y position offsets.
 $C884 DEFB $00,$00,$00,$00,$C0,$1F,$50,$10 ; {Pixel/ control data.
 $C88C DEFB $08,$18,$38,$78,$F0,$11,$D2,$A4 ;
 $C894 DEFB $B8,$40,$C0,$C0,$40,$40         ; }
 $C89A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$36, Frame #N$01 (control byte).
 $C89B DEFB $00                             ; Control data.
 $C89C DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$36, Frame #N$02 ($0E bytes).
 $C89D DEFB $01,$FE                         ; X/ Y position offsets.
 $C89F DEFB $00,$00,$00,$00,$00,$70,$88,$44 ; {Pixel/ control data.
 $C8A7 DEFB $64,$44,$48,$F0                 ; }
 $C8AB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$37, Frame #N$01 ($03 bytes).
 $C8AC DEFB $00,$00                         ; X/ Y position offsets.
 $C8AE DEFB $00                             ; Pixel/ control data.
 $C8AF DEFB $FF                             ; Frame #N$01 terminator.
 $C8B0 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$38, Frame #N$01 ($1A bytes).
 $C8B1 DEFB $00,$FE                         ; X/ Y position offsets.
 $C8B3 DEFB $00,$00,$00,$06,$08,$09,$08,$08 ; {Pixel/ control data.
 $C8BB DEFB $0A,$12,$13,$10,$10,$11,$16,$0E ;
 $C8C3 DEFB $1F,$3F,$29,$52,$12,$10,$08,$07 ; }
 $C8CB DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$38, Frame #N$02 ($14 bytes).
 $C8CC DEFB $01,$FE                         ; X/ Y position offsets.
 $C8CE DEFB $00,$00,$00,$3C,$42,$81,$41,$61 ; {Pixel/ control data.
 $C8D6 DEFB $62,$E2,$64,$24,$48,$90,$A0,$C0 ;
 $C8DE DEFB $C0,$00                         ; }
 $C8E0 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$39, Frame #N$01 ($03 bytes).
 $C8E1 DEFB $40,$40                         ; X/ Y position offsets.
 $C8E3 DEFB $40                             ; Pixel/ control data.
 $C8E4 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$3A, Frame #N$01 (control byte).
 $C8E5 DEFB $00                             ; Control data.
 $C8E6 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$3A, Frame #N$02 ($12 bytes).
 $C8E7 DEFB $01,$FE                         ; X/ Y position offsets.
 $C8E9 DEFB $00,$00,$00,$C0,$20,$10,$90,$10 ; {Pixel/ control data.
 $C8F1 DEFB $40,$C0,$00,$00,$00,$00,$00,$00 ; }
 $C8F9 DEFB $FF                             ; Frame #N$02 terminator.
 $C8FA DEFB $80                             ; Animation sequence terminator.
; Sprite #N$3B, Frame #N$01 ($1A bytes).
 $C8FB DEFB $00,$FE                         ; X/ Y position offsets.
 $C8FD DEFB $00,$00,$00,$00,$23,$4C,$4C,$2A ; {Pixel/ control data.
 $C905 DEFB $23,$23,$25,$28,$20,$21,$25,$1A ;
 $C90D DEFB $16,$3F,$39,$73,$53,$10,$08,$07 ; }
 $C915 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$3B, Frame #N$02 ($11 bytes).
 $C916 DEFB $01,$FE                         ; X/ Y position offsets.
 $C918 DEFB $00,$00,$0E,$E1,$10,$0C,$08,$09 ; {Pixel/ control data.
 $C920 DEFB $16,$90,$90,$A0,$A0,$40,$40     ; }
 $C927 DEFB $80                             ; Animation sequence terminator.
 $C928 DEFB $80                             ; Animation sequence terminator.
 $C929 DEFB $80                             ; Animation sequence terminator.
 $C92A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$3F, Frame #N$01 ($03 bytes).
 $C92B DEFB $40,$40                         ; X/ Y position offsets.
 $C92D DEFB $40                             ; Pixel/ control data.
 $C92E DEFB $80                             ; Animation sequence terminator.
; Sprite #N$40, Frame #N$01 (control byte).
 $C92F DEFB $00                             ; Control data.
 $C930 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$40, Frame #N$02 ($06 bytes).
 $C931 DEFB $01,$FE                         ; X/ Y position offsets.
 $C933 DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $C937 DEFB $80                             ; Animation sequence terminator.
 $C938 DEFB $80                             ; Animation sequence terminator.
 $C939 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$43, Frame #N$01 (control byte).
 $C93A DEFB $00                             ; Control data.
 $C93B DEFB $FF                             ; Frame #N$01 terminator.
 $C93C DEFB $80                             ; Animation sequence terminator.
 $C93D DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$44, Frame #N$02 ($11 bytes).
 $C93E DEFB $FE,$00                         ; X/ Y position offsets.
 $C940 DEFB $00,$00,$00,$00,$00,$02,$04,$04 ; {Pixel/ control data.
 $C948 DEFB $02,$02,$01,$01,$00,$00,$00     ; }
 $C94F DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$44, Frame #N$03 (control byte).
 $C950 DEFB $01                             ; Control data.
 $C951 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$44, Frame #N$04 ($18 bytes).
 $C952 DEFB $00,$00                         ; X/ Y position offsets.
 $C954 DEFB $0E,$11,$20,$40,$60,$98,$3C,$92 ; {Pixel/ control data.
 $C95C DEFB $2A,$16,$24,$8F,$8B,$89,$5D,$7F ;
 $C964 DEFB $3A,$72,$72,$50,$08,$07         ; }
 $C96A DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$44, Frame #N$05 ($0B bytes).
 $C96B DEFB $01,$FE                         ; X/ Y position offsets.
 $C96D DEFB $00,$00,$E0,$10,$88,$C8,$88,$90 ; {Pixel/ control data.
 $C975 DEFB $A0                             ; }
 $C976 DEFB $80                             ; Animation sequence terminator.
 $C977 DEFB $80                             ; Animation sequence terminator.
 $C978 DEFB $80                             ; Animation sequence terminator.
 $C979 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$48, Frame #N$01 ($05 bytes).
 $C97A DEFB $00,$00                         ; X/ Y position offsets.
 $C97C DEFB $00,$00,$00                     ; Pixel/ control data.
 $C97F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$49, Frame #N$01 ($03 bytes).
 $C980 DEFB $40,$40                         ; X/ Y position offsets.
 $C982 DEFB $40                             ; Pixel/ control data.
 $C983 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$4A, Frame #N$01 (control byte).
 $C984 DEFB $00                             ; Control data.
 $C985 DEFB $FF                             ; Frame #N$01 terminator.
 $C986 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$4B, Frame #N$01.
 $C987 DEFB $00,$FE                         ; X/ Y position offsets.
 $C989 DEFB $66,$99,$31,$42,$83,$0D,$75,$FE ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $C991 DEFB $FF                             ; Frame #N$01 terminator.
 $C992 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$4B, Frame #N$03 ($09 bytes).
 $C993 DEFB $00,$00                         ; X/ Y position offsets.
 $C995 DEFB $00,$01,$01,$07,$0E,$0F,$04     ; Pixel/ control data.
 $C99C DEFB $FF                             ; Frame #N$03 terminator.
 $C99D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$4C, Frame #N$01.
 $C99E DEFB $00,$FE                         ; X/ Y position offsets.
 $C9A0 DEFB $60,$90,$10,$20,$30,$D0,$50,$E0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $C9A8 DEFB $FF                             ; Frame #N$01 terminator.
 $C9A9 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$4C, Frame #N$03 ($09 bytes).
 $C9AA DEFB $00,$06                         ; X/ Y position offsets.
 $C9AC DEFB $09,$13,$14,$78,$E0,$F7,$4F     ; Pixel/ control data.
 $C9B3 DEFB $FF                             ; Frame #N$03 terminator.
 $C9B4 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$4D, Frame #N$01 ($12 bytes).
 $C9B5 DEFB $00,$FE                         ; X/ Y position offsets.
 $C9B7 DEFB $70,$90,$1E,$ED,$AD,$69,$BE,$90 ; {Pixel/ control data.
 $C9BF DEFB $88,$44,$44,$38,$00,$00,$00,$00 ; }
 $C9C7 DEFB $FF                             ; Frame #N$01 terminator.
 $C9C8 DEFB $FF                             ; Frame #N$02 terminator.
 $C9C9 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$4D, Frame #N$04 ($08 bytes).
 $C9CA DEFB $00,$00                         ; X/ Y position offsets.
 $C9CC DEFB $01,$07,$0E,$0F,$05,$00         ; Pixel/ control data.
 $C9D2 DEFB $FF                             ; Frame #N$04 terminator.
 $C9D3 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$4E, Frame #N$01.
 $C9D4 DEFB $00,$FE                         ; X/ Y position offsets.
 $C9D6 DEFB $00,$00,$E0,$D0,$D0,$90,$E0,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $C9DE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$4F, Frame #N$01 (position only).
 $C9DF DEFB $40,$40                         ; X/ Y position offsets.
 $C9E1 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$50, Frame #N$01 ($04 bytes).
 $C9E2 DEFB $00,$00                         ; X/ Y position offsets.
 $C9E4 DEFB $00,$00                         ; Pixel/ control data.
 $C9E6 DEFB $FF                             ; Frame #N$01 terminator.
 $C9E7 DEFB $FF                             ; Frame #N$02 terminator.
 $C9E8 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$50, Frame #N$04 ($10 bytes).
 $C9E9 DEFB $07,$09                         ; X/ Y position offsets.
 $C9EB DEFB $11,$7E,$EA,$F6,$5B,$09,$08,$04 ; {Pixel/ control data.
 $C9F3 DEFB $04,$03,$00,$00,$00,$00         ; }
 $C9F9 DEFB $FF                             ; Frame #N$04 terminator.
 $C9FA DEFB $80                             ; Animation sequence terminator.
; Sprite #N$51, Frame #N$01 ($0B bytes).
 $C9FB DEFB $25,$F9                         ; X/ Y position offsets.
 $C9FD DEFB $F1,$02,$02,$05,$04,$9C,$40,$11 ; {Pixel/ control data.
 $CA05 DEFB $0E                             ; }
 $CA06 DEFB $FF                             ; Frame #N$01 terminator.
 $CA07 DEFB $FF                             ; Frame #N$02 terminator.
 $CA08 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$51, Frame #N$04 ($10 bytes).
 $CA09 DEFB $00,$01                         ; X/ Y position offsets.
 $CA0B DEFB $02,$0C,$11,$14,$05,$03,$02,$01 ; {Pixel/ control data.
 $CA13 DEFB $01,$01,$00,$00,$00,$00         ; }
 $CA19 DEFB $FF                             ; Frame #N$04 terminator.
 $CA1A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$52, Frame #N$01 ($0B bytes).
 $CA1B DEFB $00,$00                         ; X/ Y position offsets.
 $CA1D DEFB $00,$E0,$10,$08,$48,$C8,$90,$E0 ; {Pixel/ control data.
 $CA25 DEFB $C0                             ; }
 $CA26 DEFB $80                             ; Animation sequence terminator.
 $CA27 DEFB $80                             ; Animation sequence terminator.
 $CA28 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$55, Frame #N$01 ($04 bytes).
 $CA29 DEFB $00,$00                         ; X/ Y position offsets.
 $CA2B DEFB $00,$00                         ; Pixel/ control data.
 $CA2D DEFB $FF                             ; Frame #N$01 terminator.
 $CA2E DEFB $FF                             ; Frame #N$02 terminator.
 $CA2F DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$55, Frame #N$04 ($18 bytes).
 $CA30 DEFB $04,$06                         ; X/ Y position offsets.
 $CA32 DEFB $0F,$0E,$1E,$6A,$8D,$2B,$EC,$63 ; {Pixel/ control data.
 $CA3A DEFB $64,$E8,$F1,$02,$04,$04,$08,$38 ;
 $CA42 DEFB $E4,$24,$04,$88,$70,$00         ; }
 $CA48 DEFB $FF                             ; Frame #N$04 terminator.
 $CA49 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$55, Frame #N$06 ($19 bytes).
 $CA4A DEFB $FE,$00                         ; X/ Y position offsets.
 $CA4C DEFB $00,$00,$00,$00,$00,$00,$01,$0E ; {Pixel/ control data.
 $CA54 DEFB $30,$23,$2C,$01,$06,$04,$04,$04 ;
 $CA5C DEFB $02,$02,$01,$01,$00,$00,$00     ; }
 $CA63 DEFB $FF                             ; Frame #N$06 terminator.
 $CA64 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$56, Frame #N$01.
 $CA65 DEFB $00,$00                         ; X/ Y position offsets.
 $CA67 DEFB $00,$E0,$10,$08,$48,$C8,$90,$E0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $CA6F DEFB $FF                             ; Frame #N$01 terminator.
 $CA70 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$56, Frame #N$03 ($19 bytes).
 $CA71 DEFB $00,$02                         ; X/ Y position offsets.
 $CA73 DEFB $07,$07,$0E,$7E,$9A,$11,$1A,$26 ; {Pixel/ control data.
 $CA7B DEFB $0A,$12,$24,$C4,$08,$10,$20,$40 ;
 $CA83 DEFB $90,$90,$10,$20,$C0,$00,$00     ; }
 $CA8A DEFB $FF                             ; Frame #N$03 terminator.
 $CA8B DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$56, Frame #N$05 ($19 bytes).
 $CA8C DEFB $FE,$00                         ; X/ Y position offsets.
 $CA8E DEFB $00,$00,$00,$00,$03,$0C,$30,$43 ; {Pixel/ control data.
 $CA96 DEFB $41,$11,$02,$1F,$10,$10,$10,$08 ;
 $CA9E DEFB $07,$00,$04,$02,$01,$00,$00     ; }
 $CAA5 DEFB $FF                             ; Frame #N$05 terminator.
 $CAA6 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$57, Frame #N$01.
 $CAA7 DEFB $00,$00                         ; X/ Y position offsets.
 $CAA9 DEFB $00,$E0,$10,$08,$48,$C8,$90,$E0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $CAB1 DEFB $FF                             ; Frame #N$01 terminator.
 $CAB2 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$57, Frame #N$03 ($10 bytes).
 $CAB3 DEFB $00,$02                         ; X/ Y position offsets.
 $CAB5 DEFB $07,$7F,$CE,$06,$8A,$5D,$D3,$8C ; {Pixel/ control data.
 $CABD DEFB $F4,$84,$08,$10,$20,$C0         ; }
 $CAC3 DEFB $80                             ; Animation sequence terminator.
 $CAC4 DEFB $80                             ; Animation sequence terminator.
 $CAC5 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$5A, Frame #N$01 ($06 bytes).
 $CAC6 DEFB $00,$00                         ; X/ Y position offsets.
 $CAC8 DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $CACC DEFB $FF                             ; Frame #N$01 terminator.
 $CACD DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$5A, Frame #N$03 ($19 bytes).
 $CACE DEFB $FE,$00                         ; X/ Y position offsets.
 $CAD0 DEFB $00,$00,$07,$18,$60,$40,$50,$01 ; {Pixel/ control data.
 $CAD8 DEFB $3B,$27,$20,$20,$20,$10,$2F,$24 ;
 $CAE0 DEFB $20,$11,$0E,$00,$00,$00,$00     ; }
 $CAE7 DEFB $FF                             ; Frame #N$03 terminator.
 $CAE8 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$5B, Frame #N$01 (control byte).
 $CAE9 DEFB $00                             ; Control data.
 $CAEA DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$5B, Frame #N$02 ($07 bytes).
 $CAEB DEFB $00,$00                         ; X/ Y position offsets.
 $CAED DEFB $00,$00,$00,$00,$00             ; Pixel/ control data.
 $CAF2 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$5C, Frame #N$01 ($08 bytes).
 $CAF3 DEFB $00,$E0                         ; X/ Y position offsets.
 $CAF5 DEFB $10,$08,$C8,$08,$10,$E0         ; Pixel/ control data.
 $CAFB DEFB $FF                             ; Frame #N$01 terminator.
 $CAFC DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$5C, Frame #N$03 ($0C bytes).
 $CAFD DEFB $00,$03                         ; X/ Y position offsets.
 $CAFF DEFB $F6,$0F,$1E,$1E,$27,$3D,$4C,$90 ; {Pixel/ control data.
 $CB07 DEFB $20,$40                         ; }
 $CB09 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$5D, Frame #N$01 ($04 bytes).
 $CB0A DEFB $00,$00                         ; X/ Y position offsets.
 $CB0C DEFB $00,$00                         ; Pixel/ control data.
 $CB0E DEFB $FF                             ; Frame #N$01 terminator.
 $CB0F DEFB $FF                             ; Frame #N$02 terminator.
 $CB10 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$5D, Frame #N$04 ($03 bytes).
 $CB11 DEFB $00,$03                         ; X/ Y position offsets.
 $CB13 DEFB $7C                             ; Pixel/ control data.
 $CB14 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$5E, Frame #N$01 ($05 bytes).
 $CB15 DEFB $87,$21                         ; X/ Y position offsets.
 $CB17 DEFB $22,$5F,$8F                     ; Pixel/ control data.
 $CB1A DEFB $80                             ; Animation sequence terminator.
 $CB1B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$60, Frame #N$01 ($0D bytes).
 $CB1C DEFB $81,$46                         ; X/ Y position offsets.
 $CB1E DEFB $38,$92,$82,$44,$38,$00,$00,$00 ; {Pixel/ control data.
 $CB26 DEFB $00,$00,$00                     ; }
 $CB29 DEFB $FF                             ; Frame #N$01 terminator.
 $CB2A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$61, Frame #N$01 (control byte).
 $CB2B DEFB $00                             ; Control data.
 $CB2C DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$61, Frame #N$02 ($08 bytes).
 $CB2D DEFB $00,$00                         ; X/ Y position offsets.
 $CB2F DEFB $00,$00,$00,$00,$00,$C0         ; Pixel/ control data.
 $CB35 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$62, Frame #N$01 ($07 bytes).
 $CB36 DEFB $E0,$10                         ; X/ Y position offsets.
 $CB38 DEFB $08,$C8,$C8,$10,$E0             ; Pixel/ control data.
 $CB3D DEFB $FF                             ; Frame #N$01 terminator.
 $CB3E DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$62, Frame #N$03 ($11 bytes).
 $CB3F DEFB $00,$F3                         ; X/ Y position offsets.
 $CB41 DEFB $0F,$8B,$16,$0E,$33,$CF,$30,$C0 ; {Pixel/ control data.
 $CB49 DEFB $00,$00,$00,$00,$00,$00,$00     ; }
 $CB50 DEFB $FF                             ; Frame #N$03 terminator.
 $CB51 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$62, Frame #N$05 ($10 bytes).
 $CB52 DEFB $FE,$00                         ; X/ Y position offsets.
 $CB54 DEFB $00,$00,$00,$00,$00,$00,$30,$4F ; {Pixel/ control data.
 $CB5C DEFB $00,$38,$31,$4E,$47,$83         ; }
 $CB62 DEFB $80                             ; Animation sequence terminator.
 $CB63 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$64, Frame #N$01 ($07 bytes).
 $CB64 DEFB $47,$38                         ; X/ Y position offsets.
 $CB66 DEFB $24,$04,$88,$70,$00             ; Pixel/ control data.
 $CB6B DEFB $FF                             ; Frame #N$01 terminator.
 $CB6C DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$64, Frame #N$03 ($09 bytes).
 $CB6D DEFB $00,$00                         ; X/ Y position offsets.
 $CB6F DEFB $00,$01,$01,$01,$00,$00,$00     ; Pixel/ control data.
 $CB76 DEFB $FF                             ; Frame #N$03 terminator.
 $CB77 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$65, Frame #N$01 (control byte).
 $CB78 DEFB $00                             ; Control data.
 $CB79 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$65, Frame #N$02 ($10 bytes).
 $CB7A DEFB $00,$00                         ; X/ Y position offsets.
 $CB7C DEFB $00,$00,$00,$00,$00,$E0,$C0,$E0 ; {Pixel/ control data.
 $CB84 DEFB $10,$08,$C8,$08,$10,$E0         ; }
 $CB8A DEFB $FF                             ; Frame #N$02 terminator.
 $CB8B DEFB $FF                             ; Frame #N$03 terminator.
 $CB8C DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$65, Frame #N$05 ($10 bytes).
 $CB8D DEFB $00,$00                         ; X/ Y position offsets.
 $CB8F DEFB $00,$00,$00,$C0,$38,$06,$43,$87 ; {Pixel/ control data.
 $CB97 DEFB $3F,$E6,$B3,$3E,$C1,$00         ; }
 $CB9D DEFB $FF                             ; Frame #N$05 terminator.
 $CB9E DEFB $FF                             ; Frame #N$06 terminator.
 $CB9F DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$65, Frame #N$08 ($0D bytes).
 $CBA0 DEFB $00,$00                         ; X/ Y position offsets.
 $CBA2 DEFB $00,$0C,$13,$00,$0A,$30,$55,$8E ; {Pixel/ control data.
 $CBAA DEFB $0D,$04,$03                     ; }
 $CBAD DEFB $80                             ; Animation sequence terminator.
; Sprite #N$66, Frame #N$01.
 $CBAE DEFB $7F,$20                         ; X/ Y position offsets.
 $CBB0 DEFB $04,$88,$70,$00,$00,$00,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $CBB8 DEFB $FF                             ; Frame #N$01 terminator.
 $CBB9 DEFB $FF                             ; Frame #N$02 terminator.
 $CBBA DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$66, Frame #N$04 ($08 bytes).
 $CBBB DEFB $00,$00                         ; X/ Y position offsets.
 $CBBD DEFB $01,$01,$01,$00,$01,$01         ; Pixel/ control data.
 $CBC3 DEFB $FF                             ; Frame #N$04 terminator.
 $CBC4 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$67, Frame #N$01 (control byte).
 $CBC5 DEFB $00                             ; Control data.
 $CBC6 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$67, Frame #N$02 ($10 bytes).
 $CBC7 DEFB $00,$00                         ; X/ Y position offsets.
 $CBC9 DEFB $00,$00,$00,$00,$00,$F0,$F0,$E0 ; {Pixel/ control data.
 $CBD1 DEFB $10,$88,$C8,$08,$10,$E0         ; }
 $CBD7 DEFB $FF                             ; Frame #N$02 terminator.
 $CBD8 DEFB $FF                             ; Frame #N$03 terminator.
 $CBD9 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$67, Frame #N$05 ($10 bytes).
 $CBDA DEFB $00,$00                         ; X/ Y position offsets.
 $CBDC DEFB $00,$C0,$30,$4C,$22,$C3,$8F,$32 ; {Pixel/ control data.
 $CBE4 DEFB $91,$EA,$3F,$C2,$01,$00         ; }
 $CBEA DEFB $FF                             ; Frame #N$05 terminator.
 $CBEB DEFB $FF                             ; Frame #N$06 terminator.
 $CBEC DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$67, Frame #N$08 ($10 bytes).
 $CBED DEFB $00,$03                         ; X/ Y position offsets.
 $CBEF DEFB $05,$00,$06,$18,$6F,$8F,$0F,$07 ; {Pixel/ control data.
 $CBF7 DEFB $02,$E1,$5C,$0B,$10,$E0         ; }
 $CBFD DEFB $FF                             ; Frame #N$08 terminator.
 $CBFE DEFB $FF                             ; Frame #N$09 terminator.
; Sprite #N$67, Frame #N$0A ($09 bytes).
 $CBFF DEFB $00,$01                         ; X/ Y position offsets.
 $CC01 DEFB $01,$01,$02,$02,$02,$01,$00     ; Pixel/ control data.
 $CC08 DEFB $FF                             ; Frame #N$0A terminator.
 $CC09 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$68, Frame #N$01 (control byte).
 $CC0A DEFB $00                             ; Control data.
 $CC0B DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$68, Frame #N$02 ($10 bytes).
 $CC0C DEFB $00,$00                         ; X/ Y position offsets.
 $CC0E DEFB $00,$00,$00,$00,$C0,$F0,$78,$E8 ; {Pixel/ control data.
 $CC16 DEFB $10,$88,$C8,$08,$10,$E0         ; }
 $CC1C DEFB $FF                             ; Frame #N$02 terminator.
 $CC1D DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$68, Frame #N$04 ($19 bytes).
 $CC1E DEFB $FE,$00                         ; X/ Y position offsets.
 $CC20 DEFB $00,$00,$00,$00,$00,$C0,$20,$A0 ; {Pixel/ control data.
 $CC28 DEFB $10,$48,$04,$22,$E1,$01,$1F,$CB ;
 $CC30 DEFB $34,$EB,$07,$02,$02,$01,$00     ; }
 $CC37 DEFB $FF                             ; Frame #N$04 terminator.
 $CC38 DEFB $FF                             ; Frame #N$05 terminator.
 $CC39 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$68, Frame #N$07 ($10 bytes).
 $CC3A DEFB $01,$06                         ; X/ Y position offsets.
 $CC3C DEFB $3B,$43,$83,$07,$43,$41,$70,$0C ; {Pixel/ control data.
 $CC44 DEFB $13,$E0,$00,$00,$00,$00         ; }
 $CC4A DEFB $FF                             ; Frame #N$07 terminator.
 $CC4B DEFB $FF                             ; Frame #N$08 terminator.
 $CC4C DEFB $FF                             ; Frame #N$09 terminator.
; Sprite #N$68, Frame #N$0A ($10 bytes).
 $CC4D DEFB $00,$00                         ; X/ Y position offsets.
 $CC4F DEFB $00,$00,$00,$00,$01,$02,$02,$02 ; {Pixel/ control data.
 $CC57 DEFB $01,$00,$00,$00,$00,$00         ; }
 $CC5D DEFB $FF                             ; Frame #N$0A terminator.
 $CC5E DEFB $80                             ; Animation sequence terminator.
; Sprite #N$69, Frame #N$01 (control byte).
 $CC5F DEFB $00                             ; Control data.
 $CC60 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$69, Frame #N$02 ($04 bytes).
 $CC61 DEFB $00,$00                         ; X/ Y position offsets.
 $CC63 DEFB $00,$00                         ; Pixel/ control data.
 $CC65 DEFB $80                             ; Animation sequence terminator.
 $CC66 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$6B, Frame #N$01.
 $CC67 DEFB $40,$F0                         ; X/ Y position offsets.
 $CC69 DEFB $7C,$F8,$10,$88,$C8,$08,$10,$E0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $CC71 DEFB $FF                             ; Frame #N$01 terminator.
 $CC72 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$6B, Frame #N$03 ($19 bytes).
 $CC73 DEFB $FE,$00                         ; X/ Y position offsets.
 $CC75 DEFB $00,$00,$00,$00,$38,$08,$24,$A4 ; {Pixel/ control data.
 $CC7D DEFB $94,$52,$65,$7C,$7E,$40,$27,$15 ;
 $CC85 DEFB $8A,$4B,$3F,$06,$02,$01,$00     ; }
 $CC8C DEFB $FF                             ; Frame #N$03 terminator.
 $CC8D DEFB $FF                             ; Frame #N$04 terminator.
 $CC8E DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$6B, Frame #N$06 ($10 bytes).
 $CC8F DEFB $07,$18                         ; X/ Y position offsets.
 $CC91 DEFB $60,$90,$10,$30,$08,$8C,$73,$00 ; {Pixel/ control data.
 $CC99 DEFB $00,$00,$00,$00,$00,$00         ; }
 $CC9F DEFB $FF                             ; Frame #N$06 terminator.
 $CCA0 DEFB $FF                             ; Frame #N$07 terminator.
 $CCA1 DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$6B, Frame #N$09 ($08 bytes).
 $CCA2 DEFB $00,$00                         ; X/ Y position offsets.
 $CCA4 DEFB $00,$00,$01,$01,$01,$00         ; Pixel/ control data.
 $CCAA DEFB $FF                             ; Frame #N$09 terminator.
 $CCAB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$6C, Frame #N$01 (control byte).
 $CCAC DEFB $00                             ; Control data.
 $CCAD DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$6C, Frame #N$02 (control byte).
 $CCAE DEFB $00                             ; Control data.
 $CCAF DEFB $80                             ; Animation sequence terminator.
 $CCB0 DEFB $80                             ; Animation sequence terminator.
 $CCB1 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$6F, Frame #N$01 ($0C bytes).
 $CCB2 DEFB $40,$40                         ; X/ Y position offsets.
 $CCB4 DEFB $C0,$E0,$78,$FC,$10,$88,$C8,$08 ; {Pixel/ control data.
 $CCBC DEFB $10,$E0                         ; }
 $CCBE DEFB $FF                             ; Frame #N$01 terminator.
 $CCBF DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$6F, Frame #N$03 ($19 bytes).
 $CCC0 DEFB $FE,$00                         ; X/ Y position offsets.
 $CCC2 DEFB $00,$00,$00,$0C,$02,$D2,$41,$41 ; {Pixel/ control data.
 $CCCA DEFB $64,$5C,$40,$40,$24,$13,$8A,$64 ;
 $CCD2 DEFB $1E,$01,$03,$02,$02,$01,$00     ; }
 $CCD9 DEFB $FF                             ; Frame #N$03 terminator.
 $CCDA DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$6F, Frame #N$05 ($11 bytes).
 $CCDB DEFB $FE,$00                         ; X/ Y position offsets.
 $CCDD DEFB $00,$00,$00,$00,$00,$03,$04,$28 ; {Pixel/ control data.
 $CCE5 DEFB $48,$88,$98,$84,$42,$39,$00     ; }
 $CCEC DEFB $FF                             ; Frame #N$05 terminator.
 $CCED DEFB $80                             ; Animation sequence terminator.
; Sprite #N$70, Frame #N$01 ($06 bytes).
 $CCEE DEFB $00,$FE                         ; X/ Y position offsets.
 $CCF0 DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $CCF4 DEFB $80                             ; Animation sequence terminator.
 $CCF5 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$72, Frame #N$01 ($12 bytes).
 $CCF6 DEFB $40,$40                         ; X/ Y position offsets.
 $CCF8 DEFB $20,$20,$20,$A0,$10,$10,$10,$B0 ; {Pixel/ control data.
 $CD00 DEFB $78,$FC,$18,$88,$C8,$08,$10,$E0 ; }
 $CD08 DEFB $FF                             ; Frame #N$01 terminator.
 $CD09 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$72, Frame #N$03 ($19 bytes).
 $CD0A DEFB $FE,$00                         ; X/ Y position offsets.
 $CD0C DEFB $00,$00,$00,$03,$F8,$0A,$08,$10 ; {Pixel/ control data.
 $CD14 DEFB $18,$1C,$1E,$0F,$88,$4B,$25,$1D ;
 $CD1C DEFB $02,$03,$03,$02,$02,$01,$00     ; }
 $CD23 DEFB $FF                             ; Frame #N$03 terminator.
 $CD24 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$72, Frame #N$05 ($11 bytes).
 $CD25 DEFB $FE,$00                         ; X/ Y position offsets.
 $CD27 DEFB $00,$00,$00,$00,$0E,$11,$22,$26 ; {Pixel/ control data.
 $CD2F DEFB $22,$12,$0F,$01,$00,$00,$00     ; }
 $CD36 DEFB $FF                             ; Frame #N$05 terminator.
 $CD37 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$73, Frame #N$01 ($1A bytes).
 $CD38 DEFB $00,$FE                         ; X/ Y position offsets.
 $CD3A DEFB $00,$00,$00,$60,$10,$90,$10,$10 ; {Pixel/ control data.
 $CD42 DEFB $50,$48,$C8,$08,$08,$88,$68,$70 ;
 $CD4A DEFB $F8,$FC,$94,$4A,$48,$08,$10,$E0 ; }
 $CD52 DEFB $FF                             ; Frame #N$01 terminator.
 $CD53 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$73, Frame #N$03 ($19 bytes).
 $CD54 DEFB $FE,$00                         ; X/ Y position offsets.
 $CD56 DEFB $00,$00,$3C,$42,$81,$82,$86,$46 ; {Pixel/ control data.
 $CD5E DEFB $47,$26,$24,$12,$09,$05,$03,$03 ;
 $CD66 DEFB $00,$01,$02,$02,$02,$01,$00     ; }
 $CD6D DEFB $FF                             ; Frame #N$03 terminator.
 $CD6E DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$73, Frame #N$05 ($11 bytes).
 $CD6F DEFB $FE,$00                         ; X/ Y position offsets.
 $CD71 DEFB $00,$00,$03,$04,$08,$09,$08,$02 ; {Pixel/ control data.
 $CD79 DEFB $03,$00,$00,$00,$00,$00,$00     ; }
 $CD80 DEFB $FF                             ; Frame #N$05 terminator.
 $CD81 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$74, Frame #N$01 ($1A bytes).
 $CD82 DEFB $00,$FE                         ; X/ Y position offsets.
 $CD84 DEFB $00,$00,$00,$00,$C4,$32,$32,$54 ; {Pixel/ control data.
 $CD8C DEFB $C4,$C4,$A4,$14,$04,$84,$A4,$58 ;
 $CD94 DEFB $68,$FC,$9C,$CE,$CA,$08,$10,$E0 ; }
 $CD9C DEFB $FF                             ; Frame #N$01 terminator.
 $CD9D DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$74, Frame #N$03 ($19 bytes).
 $CD9E DEFB $FE,$00                         ; X/ Y position offsets.
 $CDA0 DEFB $00,$70,$87,$08,$30,$10,$90,$68 ; {Pixel/ control data.
 $CDA8 DEFB $09,$09,$05,$05,$02,$02,$01,$01 ;
 $CDB0 DEFB $01,$01,$02,$02,$02,$01,$00     ; }
 $CDB7 DEFB $FF                             ; Frame #N$03 terminator.
 $CDB8 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$74, Frame #N$05 ($09 bytes).
 $CDB9 DEFB $FE,$00                         ; X/ Y position offsets.
 $CDBB DEFB $00,$00,$00,$01,$01,$01,$00     ; Pixel/ control data.
 $CDC2 DEFB $FF                             ; Frame #N$05 terminator.
 $CDC3 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$75, Frame #N$01 ($0D bytes).
 $CDC4 DEFB $01,$FE                         ; X/ Y position offsets.
 $CDC6 DEFB $00,$00,$00,$00,$00,$00,$40,$20 ; {Pixel/ control data.
 $CDCE DEFB $20,$40,$40                     ; }
 $CDD1 DEFB $80                             ; Animation sequence terminator.
 $CDD2 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$77, Frame #N$01 ($03 bytes).
 $CDD3 DEFB $00,$00                         ; X/ Y position offsets.
 $CDD5 DEFB $00                             ; Pixel/ control data.
 $CDD6 DEFB $FF                             ; Frame #N$01 terminator.
 $CDD7 DEFB $FF                             ; Frame #N$02 terminator.
 $CDD8 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$77, Frame #N$04 ($18 bytes).
 $CDD9 DEFB $00,$00                         ; X/ Y position offsets.
 $CDDB DEFB $70,$88,$04,$02,$06,$19,$3C,$49 ; {Pixel/ control data.
 $CDE3 DEFB $54,$68,$24,$F1,$D1,$91,$BA,$FE ;
 $CDEB DEFB $5C,$4E,$4E,$0A,$10,$E0         ; }
 $CDF1 DEFB $FF                             ; Frame #N$04 terminator.
 $CDF2 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$77, Frame #N$06 ($19 bytes).
 $CDF3 DEFB $FE,$00                         ; X/ Y position offsets.
 $CDF5 DEFB $00,$07,$08,$11,$13,$11,$09,$05 ; {Pixel/ control data.
 $CDFD DEFB $01,$01,$01,$01,$00,$00,$00,$00 ;
 $CE05 DEFB $00,$01,$02,$02,$02,$01,$00     ; }
 $CE0C DEFB $FF                             ; Frame #N$06 terminator.
 $CE0D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$78, Frame #N$01 ($1A bytes).
 $CE0E DEFB $01,$00                         ; X/ Y position offsets.
 $CE10 DEFB $0E,$11,$20,$24,$26,$15,$0F,$05 ; {Pixel/ control data.
 $CE18 DEFB $04,$06,$05,$0A,$0B,$0A,$09,$04 ;
 $CE20 DEFB $0C,$14,$22,$26,$22,$11,$0E,$00 ; }
 $CE28 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$78, Frame #N$02 ($1A bytes).
 $CE29 DEFB $01,$FE                         ; X/ Y position offsets.
 $CE2B DEFB $00,$60,$E0,$E0,$E0,$60,$E0,$40 ; {Pixel/ control data.
 $CE33 DEFB $DC,$E2,$41,$9C,$32,$C1,$21,$A0 ;
 $CE3B DEFB $78,$08,$10,$10,$20,$C0,$00,$00 ; }
 $CE43 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$78, Frame #N$03 (control byte).
 $CE44 DEFB $01                             ; Control data.
 $CE45 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$78, Frame #N$04 ($03 bytes).
 $CE46 DEFB $00,$00                         ; X/ Y position offsets.
 $CE48 DEFB $00                             ; Pixel/ control data.
 $CE49 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$79, Frame #N$01 ($0C bytes).
 $CE4A DEFB $40,$30                         ; X/ Y position offsets.
 $CE4C DEFB $08,$88,$A4,$82,$40,$40,$20,$20 ; {Pixel/ control data.
 $CE54 DEFB $00,$00                         ; }
 $CE56 DEFB $FF                             ; Frame #N$01 terminator.
 $CE57 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$7A, Frame #N$01 ($1A bytes).
 $CE58 DEFB $01,$00                         ; X/ Y position offsets.
 $CE5A DEFB $00,$00,$01,$02,$02,$02,$01,$00 ; {Pixel/ control data.
 $CE62 DEFB $00,$00,$01,$01,$02,$02,$04,$04 ;
 $CE6A DEFB $34,$48,$88,$98,$84,$43,$38,$00 ; }
 $CE72 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$7A, Frame #N$02 ($17 bytes).
 $CE73 DEFB $01,$FE                         ; X/ Y position offsets.
 $CE75 DEFB $00,$70,$88,$04,$25,$67,$CB,$76 ; {Pixel/ control data.
 $CE7D DEFB $AC,$B8,$57,$58,$A0,$A7,$DC,$A0 ;
 $CE85 DEFB $60,$20,$18,$10,$60             ; }
 $CE8A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$7B, Frame #N$01 (position only).
 $CE8B DEFB $00,$00                         ; X/ Y position offsets.
 $CE8D DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$7B, Frame #N$02 (control byte).
 $CE8E DEFB $01                             ; Control data.
 $CE8F DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$7B, Frame #N$03 ($03 bytes).
 $CE90 DEFB $00,$00                         ; X/ Y position offsets.
 $CE92 DEFB $00                             ; Pixel/ control data.
 $CE93 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$7C, Frame #N$01 ($0C bytes).
 $CE94 DEFB $40,$20                         ; X/ Y position offsets.
 $CE96 DEFB $90,$4C,$42,$22,$28,$21,$11,$10 ; {Pixel/ control data.
 $CE9E DEFB $08,$08                         ; }
 $CEA0 DEFB $FF                             ; Frame #N$01 terminator.
 $CEA1 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$7D, Frame #N$01 (control byte).
 $CEA2 DEFB $01                             ; Control data.
 $CEA3 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$7D, Frame #N$02 ($10 bytes).
 $CEA4 DEFB $00,$00                         ; X/ Y position offsets.
 $CEA6 DEFB $00,$00,$00,$00,$01,$02,$08,$3C ; {Pixel/ control data.
 $CEAE DEFB $48,$88,$A8,$88,$44,$3B         ; }
 $CEB4 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$7D, Frame #N$03 ($1A bytes).
 $CEB5 DEFB $01,$FE                         ; X/ Y position offsets.
 $CEB7 DEFB $00,$00,$00,$00,$00,$03,$04,$08 ; {Pixel/ control data.
 $CEBF DEFB $0B,$0E,$04,$0B,$75,$9F,$2B,$32 ;
 $CEC7 DEFB $35,$5F,$7C,$67,$40,$20,$20,$E0 ; }
 $CECF DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$7D, Frame #N$04 ($07 bytes).
 $CED0 DEFB $01,$FE                         ; X/ Y position offsets.
 $CED2 DEFB $00,$00,$00,$00,$00             ; Pixel/ control data.
 $CED7 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$7E, Frame #N$01 ($12 bytes).
 $CED8 DEFB $40,$20                         ; X/ Y position offsets.
 $CEDA DEFB $20,$20,$60,$F0,$E0,$C0,$98,$26 ; {Pixel/ control data.
 $CEE2 DEFB $C1,$0C,$1B,$E0,$00,$00,$00,$00 ; }
 $CEEA DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$7E, Frame #N$02.
 $CEEB DEFB $01,$00                         ; X/ Y position offsets.
 $CEED DEFB $B0,$48,$08,$A0,$66,$31,$10,$08 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $CEF5 DEFB $FF                             ; Frame #N$02 terminator.
 $CEF6 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$7F, Frame #N$01 (control byte).
 $CEF7 DEFB $01                             ; Control data.
 $CEF8 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$7F, Frame #N$02 ($10 bytes).
 $CEF9 DEFB $00,$00                         ; X/ Y position offsets.
 $CEFB DEFB $00,$00,$00,$38,$44,$83,$9C,$90 ; {Pixel/ control data.
 $CF03 DEFB $50,$00,$20,$10,$0E,$01         ; }
 $CF09 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$7F, Frame #N$03 (control byte).
 $CF0A DEFB $01                             ; Control data.
 $CF0B DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$7F, Frame #N$04 ($10 bytes).
 $CF0C DEFB $00,$00                         ; X/ Y position offsets.
 $CF0E DEFB $00,$00,$00,$01,$FA,$0C,$30,$43 ; {Pixel/ control data.
 $CF16 DEFB $4E,$50,$A0,$D5,$BE,$DF         ; }
 $CF1C DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$7F, Frame #N$05 (control byte).
 $CF1D DEFB $01                             ; Control data.
 $CF1E DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$7F, Frame #N$06 ($0D bytes).
 $CF1F DEFB $00,$38                         ; X/ Y position offsets.
 $CF21 DEFB $44,$82,$B2,$E2,$44,$3A,$DE,$FC ; {Pixel/ control data.
 $CF29 DEFB $70,$38,$47                     ; }
 $CF2C DEFB $80                             ; Animation sequence terminator.
; Sprite #N$80, Frame #N$01 (position only).
 $CF2D DEFB $19,$7F                         ; X/ Y position offsets.
 $CF2F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$80, Frame #N$02.
 $CF30 DEFB $01,$00                         ; X/ Y position offsets.
 $CF32 DEFB $00,$00,$00,$00,$30,$C8,$08,$28 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $CF3A DEFB $FF                             ; Frame #N$02 terminator.
 $CF3B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$81, Frame #N$01 ($12 bytes).
 $CF3C DEFB $01,$01                         ; X/ Y position offsets.
 $CF3E DEFB $00,$00,$00,$00,$00,$01,$01,$0D ; {Pixel/ control data.
 $CF46 DEFB $12,$22,$26,$21,$10,$0E,$00,$00 ; }
 $CF4E DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$81, Frame #N$02 ($1A bytes).
 $CF4F DEFB $01,$FE                         ; X/ Y position offsets.
 $CF51 DEFB $1C,$22,$41,$59,$59,$33,$3F,$2B ; {Pixel/ control data.
 $CF59 DEFB $29,$50,$58,$A7,$B0,$2F,$36,$18 ;
 $CF61 DEFB $09,$05,$05,$19,$E1,$02,$02,$02 ; }
 $CF69 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$81, Frame #N$03 ($07 bytes).
 $CF6A DEFB $01,$FE                         ; X/ Y position offsets.
 $CF6C DEFB $00,$00,$00,$40,$C0             ; Pixel/ control data.
 $CF71 DEFB $80                             ; Animation sequence terminator.
 $CF72 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$83, Frame #N$01 ($11 bytes).
 $CF73 DEFB $00,$00                         ; X/ Y position offsets.
 $CF75 DEFB $00,$00,$C0,$20,$20,$A0,$A0,$20 ; {Pixel/ control data.
 $CF7D DEFB $20,$10,$08,$08,$10,$00,$10     ; }
 $CF84 DEFB $FF                             ; Frame #N$01 terminator.
 $CF85 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$84, Frame #N$01 ($12 bytes).
 $CF86 DEFB $01,$01                         ; X/ Y position offsets.
 $CF88 DEFB $00,$00,$00,$00,$07,$09,$11,$13 ; {Pixel/ control data.
 $CF90 DEFB $11,$08,$07,$00,$00,$00,$00,$00 ; }
 $CF98 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$84, Frame #N$02 ($1A bytes).
 $CF99 DEFB $01,$FE                         ; X/ Y position offsets.
 $CF9B DEFB $00,$00,$01,$01,$01,$00,$01,$0E ; {Pixel/ control data.
 $CFA3 DEFB $13,$25,$44,$84,$8E,$09,$0F,$08 ;
 $CFAB DEFB $04,$84,$7D,$06,$0F,$10,$24,$0C ; }
 $CFB3 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$84, Frame #N$03 ($0C bytes).
 $CFB4 DEFB $01,$FE                         ; X/ Y position offsets.
 $CFB6 DEFB $70,$88,$04,$64,$C4,$8C,$7E,$BC ; {Pixel/ control data.
 $CFBE DEFB $F8,$30                         ; }
 $CFC0 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$85, Frame #N$01 ($0D bytes).
 $CFC1 DEFB $40,$30                         ; X/ Y position offsets.
 $CFC3 DEFB $08,$C8,$50,$90,$A0,$20,$40,$20 ; {Pixel/ control data.
 $CFCB DEFB $20,$C0,$00                     ; }
 $CFCE DEFB $FF                             ; Frame #N$01 terminator.
 $CFCF DEFB $80                             ; Animation sequence terminator.
; Sprite #N$86, Frame #N$01 ($12 bytes).
 $CFD0 DEFB $01,$00                         ; X/ Y position offsets.
 $CFD2 DEFB $00,$00,$00,$00,$00,$00,$00,$0E ; {Pixel/ control data.
 $CFDA DEFB $11,$21,$26,$22,$12,$0C,$03,$00 ; }
 $CFE2 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$86, Frame #N$02 (control byte).
 $CFE3 DEFB $01                             ; Control data.
 $CFE4 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$86, Frame #N$03 ($18 bytes).
 $CFE5 DEFB $00,$00                         ; X/ Y position offsets.
 $CFE7 DEFB $00,$00,$07,$09,$11,$62,$85,$0A ; {Pixel/ control data.
 $CFEF DEFB $0A,$0D,$0E,$09,$11,$F0,$00,$00 ;
 $CFF7 DEFB $00,$00,$00,$00,$01,$02         ; }
 $CFFD DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$86, Frame #N$04 ($1A bytes).
 $CFFE DEFB $01,$FE                         ; X/ Y position offsets.
 $D000 DEFB $1C,$22,$41,$D9,$F1,$62,$5F,$EF ; {Pixel/ control data.
 $D008 DEFB $BE,$D8,$40,$20,$98,$46,$21,$F9 ;
 $D010 DEFB $0A,$12,$14,$24,$48,$84,$24,$98 ; }
 $D018 DEFB $FF                             ; Frame #N$04 terminator.
 $D019 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$87, Frame #N$01 ($1A bytes).
 $D01A DEFB $01,$FE                         ; X/ Y position offsets.
 $D01C DEFB $00,$00,$00,$00,$01,$02,$04,$04 ; {Pixel/ control data.
 $D024 DEFB $05,$02,$02,$02,$01,$00,$20,$10 ;
 $D02C DEFB $8C,$C6,$15,$0C,$08,$23,$24,$18 ; }
 $D034 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$87, Frame #N$02 ($1A bytes).
 $D035 DEFB $01,$FE                         ; X/ Y position offsets.
 $D037 DEFB $00,$00,$00,$00,$C0,$20,$17,$B8 ; {Pixel/ control data.
 $D03F DEFB $C3,$04,$08,$13,$1C,$F4,$BC,$90 ;
 $D047 DEFB $C8,$E8,$88,$30,$60,$00,$00,$00 ; }
 $D04F DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$87, Frame #N$03 ($12 bytes).
 $D050 DEFB $01,$FE                         ; X/ Y position offsets.
 $D052 DEFB $00,$00,$00,$00,$01,$02,$84,$7F ; {Pixel/ control data.
 $D05A DEFB $85,$3E,$45,$BF,$07,$00,$00,$00 ; }
 $D062 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$87, Frame #N$04 (control byte).
 $D063 DEFB $01                             ; Control data.
 $D064 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$87, Frame #N$05 ($10 bytes).
 $D065 DEFB $00,$00                         ; X/ Y position offsets.
 $D067 DEFB $00,$00,$C0,$20,$10,$90,$10,$20 ; {Pixel/ control data.
 $D06F DEFB $C0,$E0,$E0,$00,$00,$00         ; }
 $D075 DEFB $FF                             ; Frame #N$05 terminator.
 $D076 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$88, Frame #N$01 ($05 bytes).
 $D077 DEFB $01,$00                         ; X/ Y position offsets.
 $D079 DEFB $00,$70,$8F                     ; Pixel/ control data.
 $D07C DEFB $80                             ; Animation sequence terminator.
; Sprite #N$89, Frame #N$01 ($04 bytes).
 $D07D DEFB $90,$6C                         ; X/ Y position offsets.
 $D07F DEFB $03,$00                         ; Pixel/ control data.
 $D081 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$89, Frame #N$02 (control byte).
 $D082 DEFB $01                             ; Control data.
 $D083 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$89, Frame #N$03 ($10 bytes).
 $D084 DEFB $00,$00                         ; X/ Y position offsets.
 $D086 DEFB $01,$01,$01,$00,$08,$14,$2C,$72 ; {Pixel/ control data.
 $D08E DEFB $61,$88,$36,$C1,$00,$E0         ; }
 $D094 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$89, Frame #N$04 (control byte).
 $D095 DEFB $01                             ; Control data.
 $D096 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$89, Frame #N$05 ($06 bytes).
 $D097 DEFB $70,$88                         ; X/ Y position offsets.
 $D099 DEFB $04,$24,$38,$47                 ; Pixel/ control data.
 $D09D DEFB $80                             ; Animation sequence terminator.
 $D09E DEFB $80                             ; Animation sequence terminator.
; Sprite #N$8B, Frame #N$01 ($08 bytes).
 $D09F DEFB $83,$45                         ; X/ Y position offsets.
 $D0A1 DEFB $4E,$B0,$60,$A0,$40,$00         ; Pixel/ control data.
 $D0A7 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$8B, Frame #N$02 (control byte).
 $D0A8 DEFB $01                             ; Control data.
 $D0A9 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$8B, Frame #N$03 ($10 bytes).
 $D0AA DEFB $00,$00                         ; X/ Y position offsets.
 $D0AC DEFB $00,$00,$00,$00,$C0,$30,$8F,$33 ; {Pixel/ control data.
 $D0B4 DEFB $CE,$3A,$07,$0F,$03,$00         ; }
 $D0BA DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$8B, Frame #N$04 (control byte).
 $D0BB DEFB $01                             ; Control data.
 $D0BC DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$8B, Frame #N$05 ($0E bytes).
 $D0BD DEFB $00,$00                         ; X/ Y position offsets.
 $D0BF DEFB $00,$00,$00,$00,$00,$E0,$10,$C8 ; {Pixel/ control data.
 $D0C7 DEFB $C8,$08,$10,$E0                 ; }
 $D0CB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$8C, Frame #N$01 (control byte).
 $D0CC DEFB $C0                             ; Control data.
 $D0CD DEFB $FF                             ; Frame #N$01 terminator.
 $D0CE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$8D, Frame #N$01 ($12 bytes).
 $D0CF DEFB $01,$FE                         ; X/ Y position offsets.
 $D0D1 DEFB $00,$00,$00,$00,$02,$3F,$47,$83 ; {Pixel/ control data.
 $D0D9 DEFB $95,$9A,$4D,$3A,$01,$01,$01,$00 ; }
 $D0E1 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$8D, Frame #N$02 (control byte).
 $D0E2 DEFB $01                             ; Control data.
 $D0E3 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$8D, Frame #N$03 ($0F bytes).
 $D0E4 DEFB $00,$00                         ; X/ Y position offsets.
 $D0E6 DEFB $00,$00,$00,$00,$86,$C9,$C8,$93 ; {Pixel/ control data.
 $D0EE DEFB $A2,$C6,$8A,$7A,$0F             ; }
 $D0F3 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$8E, Frame #N$01 ($08 bytes).
 $D0F4 DEFB $40,$20                         ; X/ Y position offsets.
 $D0F6 DEFB $18,$0F,$09,$08,$04,$03         ; Pixel/ control data.
 $D0FC DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$8E, Frame #N$02 (control byte).
 $D0FD DEFB $01                             ; Control data.
 $D0FE DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$8E, Frame #N$03 ($0F bytes).
 $D0FF DEFB $EC,$12                         ; X/ Y position offsets.
 $D101 DEFB $C2,$28,$18,$FB,$29,$24,$22,$20 ; {Pixel/ control data.
 $D109 DEFB $40,$A0,$20,$20,$40             ; }
 $D10E DEFB $80                             ; Animation sequence terminator.
 $D10F DEFB $FF                             ; Frame #N$01 terminator.
 $D110 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$90, Frame #N$01 ($12 bytes).
 $D111 DEFB $01,$FD                         ; X/ Y position offsets.
 $D113 DEFB $00,$00,$00,$00,$02,$3F,$47,$83 ; {Pixel/ control data.
 $D11B DEFB $93,$9A,$4D,$3A,$01,$01,$01,$00 ; }
 $D123 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$90, Frame #N$02 (control byte).
 $D124 DEFB $01                             ; Control data.
 $D125 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$90, Frame #N$03 ($0F bytes).
 $D126 DEFB $00,$00                         ; X/ Y position offsets.
 $D128 DEFB $00,$00,$00,$00,$82,$C5,$C4,$86 ; {Pixel/ control data.
 $D130 DEFB $83,$C4,$AD,$7A,$0F             ; }
 $D135 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$91, Frame #N$01 ($08 bytes).
 $D136 DEFB $40,$20                         ; X/ Y position offsets.
 $D138 DEFB $18,$0F,$09,$08,$04,$03         ; Pixel/ control data.
 $D13E DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$91, Frame #N$02 ($19 bytes).
 $D13F DEFB $01,$FE                         ; X/ Y position offsets.
 $D141 DEFB $00,$00,$00,$3F,$40,$40,$9F,$98 ; {Pixel/ control data.
 $D149 DEFB $98,$A8,$24,$D8,$00,$E0,$20,$20 ;
 $D151 DEFB $20,$20,$40,$A0,$20,$20,$40     ; }
 $D158 DEFB $80                             ; Animation sequence terminator.
 $D159 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$92, Frame #N$02 ($12 bytes).
 $D15A DEFB $01,$FE                         ; X/ Y position offsets.
 $D15C DEFB $00,$30,$48,$88,$40,$26,$D1,$38 ; {Pixel/ control data.
 $D164 DEFB $0C,$02,$01,$00,$00,$00,$00,$00 ; }
 $D16C DEFB $FF                             ; Frame #N$02 terminator.
 $D16D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$93, Frame #N$01 (control byte).
 $D16E DEFB $00                             ; Control data.
 $D16F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$93, Frame #N$02 ($08 bytes).
 $D170 DEFB $00,$00                         ; X/ Y position offsets.
 $D172 DEFB $01,$02,$04,$04,$04,$02         ; Pixel/ control data.
 $D178 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$93, Frame #N$03 ($12 bytes).
 $D179 DEFB $01,$00                         ; X/ Y position offsets.
 $D17B DEFB $E0,$70,$D8,$2C,$17,$7C,$73,$26 ; {Pixel/ control data.
 $D183 DEFB $C1,$00,$00,$00,$00,$00,$00,$00 ; }
 $D18B DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$93, Frame #N$04 (control byte).
 $D18C DEFB $01                             ; Control data.
 $D18D DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$93, Frame #N$05 ($10 bytes).
 $D18E DEFB $00,$00                         ; X/ Y position offsets.
 $D190 DEFB $00,$02,$03,$DC,$28,$F0,$00,$C0 ; {Pixel/ control data.
 $D198 DEFB $38,$07,$09,$08,$04,$03         ; }
 $D19E DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$93, Frame #N$06 (control byte).
 $D19F DEFB $01                             ; Control data.
 $D1A0 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$93, Frame #N$07 ($05 bytes).
 $D1A1 DEFB $00,$00                         ; X/ Y position offsets.
 $D1A3 DEFB $00,$00,$00                     ; Pixel/ control data.
 $D1A6 DEFB $80                             ; Animation sequence terminator.
 $D1A7 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$95, Frame #N$01 ($03 bytes).
 $D1A8 DEFB $40,$40                         ; X/ Y position offsets.
 $D1AA DEFB $40                             ; Pixel/ control data.
 $D1AB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$96, Frame #N$01 ($04 bytes).
 $D1AC DEFB $20,$20                         ; X/ Y position offsets.
 $D1AE DEFB $20,$40                         ; Pixel/ control data.
 $D1B0 DEFB $80                             ; Animation sequence terminator.
 $D1B1 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$97, Frame #N$02.
 $D1B2 DEFB $00,$FE                         ; X/ Y position offsets.
 $D1B4 DEFB $00,$60,$94,$CB,$26,$12,$08,$07 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D1BC DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$97, Frame #N$03.
 $D1BD DEFB $01,$00                         ; X/ Y position offsets.
 $D1BF DEFB $60,$98,$86,$31,$2C,$52,$A1,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D1C7 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$97, Frame #N$04 ($12 bytes).
 $D1C8 DEFB $01,$00                         ; X/ Y position offsets.
 $D1CA DEFB $00,$00,$C0,$20,$20,$8C,$82,$C0 ; {Pixel/ control data.
 $D1D2 DEFB $40,$20,$20,$00,$00,$00,$00,$00 ; }
 $D1DA DEFB $FF                             ; Frame #N$04 terminator.
 $D1DB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$98, Frame #N$01.
 $D1DC DEFB $00,$00                         ; X/ Y position offsets.
 $D1DE DEFB $07,$03,$04,$08,$09,$08,$04,$03 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D1E6 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$98, Frame #N$02 ($09 bytes).
 $D1E7 DEFB $01,$00                         ; X/ Y position offsets.
 $D1E9 DEFB $F1,$BF,$4D,$A3,$FE,$21,$40     ; Pixel/ control data.
 $D1F0 DEFB $80                             ; Animation sequence terminator.
 $D1F1 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$99, Frame #N$02 (control byte).
 $D1F2 DEFB $01                             ; Control data.
 $D1F3 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$99, Frame #N$03 ($10 bytes).
 $D1F4 DEFB $00,$00                         ; X/ Y position offsets.
 $D1F6 DEFB $00,$00,$00,$18,$0B,$39,$C8,$10 ; {Pixel/ control data.
 $D1FE DEFB $20,$63,$1D,$E8,$04,$03         ; }
 $D204 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$99, Frame #N$04 ($09 bytes).
 $D205 DEFB $01,$00                         ; X/ Y position offsets.
 $D207 DEFB $C0,$40,$40,$A0,$20,$20,$40     ; Pixel/ control data.
 $D20E DEFB $80                             ; Animation sequence terminator.
 $D20F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$9A, Frame #N$02.
 $D210 DEFB $00,$FE                         ; X/ Y position offsets.
 $D212 DEFB $02,$0D,$02,$01,$00,$00,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D21A DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$9A, Frame #N$03 ($12 bytes).
 $D21B DEFB $01,$00                         ; X/ Y position offsets.
 $D21D DEFB $00,$60,$AE,$51,$A5,$54,$3E,$1A ; {Pixel/ control data.
 $D225 DEFB $01,$01,$01,$01,$01,$01,$00,$00 ; }
 $D22D DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$9A, Frame #N$04 (control byte).
 $D22E DEFB $01                             ; Control data.
 $D22F DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$9A, Frame #N$05 ($05 bytes).
 $D230 DEFB $00,$00                         ; X/ Y position offsets.
 $D232 DEFB $00,$00,$00                     ; Pixel/ control data.
 $D235 DEFB $80                             ; Animation sequence terminator.
 $D236 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$9C, Frame #N$01 ($08 bytes).
 $D237 DEFB $40,$40                         ; X/ Y position offsets.
 $D239 DEFB $30,$10,$10,$20,$00,$90         ; Pixel/ control data.
 $D23F DEFB $80                             ; Animation sequence terminator.
 $D240 DEFB $FF                             ; Frame #N$01 terminator.
 $D241 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$9E, Frame #N$01 (control byte).
 $D242 DEFB $00                             ; Control data.
 $D243 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$9E, Frame #N$02 ($08 bytes).
 $D244 DEFB $00,$00                         ; X/ Y position offsets.
 $D246 DEFB $01,$02,$04,$04,$04,$02         ; Pixel/ control data.
 $D24C DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$9E, Frame #N$03 ($12 bytes).
 $D24D DEFB $01,$00                         ; X/ Y position offsets.
 $D24F DEFB $E0,$70,$D8,$2C,$17,$7C,$73,$26 ; {Pixel/ control data.
 $D257 DEFB $C1,$00,$00,$00,$00,$00,$00,$00 ; }
 $D25F DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$9E, Frame #N$04 (control byte).
 $D260 DEFB $01                             ; Control data.
 $D261 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$9E, Frame #N$05 ($10 bytes).
 $D262 DEFB $00,$00                         ; X/ Y position offsets.
 $D264 DEFB $00,$02,$03,$DC,$28,$F0,$00,$C0 ; {Pixel/ control data.
 $D26C DEFB $38,$07,$09,$08,$04,$03         ; }
 $D272 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$9E, Frame #N$06 (control byte).
 $D273 DEFB $01                             ; Control data.
 $D274 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$9E, Frame #N$07 ($05 bytes).
 $D275 DEFB $00,$00                         ; X/ Y position offsets.
 $D277 DEFB $00,$00,$00                     ; Pixel/ control data.
 $D27A DEFB $80                             ; Animation sequence terminator.
 $D27B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$A0, Frame #N$01 ($03 bytes).
 $D27C DEFB $40,$40                         ; X/ Y position offsets.
 $D27E DEFB $40                             ; Pixel/ control data.
 $D27F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$A1, Frame #N$01 ($04 bytes).
 $D280 DEFB $20,$20                         ; X/ Y position offsets.
 $D282 DEFB $20,$40                         ; Pixel/ control data.
 $D284 DEFB $80                             ; Animation sequence terminator.
 $D285 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$A2, Frame #N$02.
 $D286 DEFB $01,$FE                         ; X/ Y position offsets.
 $D288 DEFB $07,$0C,$02,$01,$00,$00,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D290 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$A2, Frame #N$03 ($1A bytes).
 $D291 DEFB $01,$00                         ; X/ Y position offsets.
 $D293 DEFB $00,$A0,$58,$50,$BC,$83,$60,$9C ; {Pixel/ control data.
 $D29B DEFB $BC,$44,$04,$04,$0C,$0A,$0D,$14 ;
 $D2A3 DEFB $18,$10,$20,$20,$00,$00,$00,$00 ; }
 $D2AB DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$A2, Frame #N$04 ($08 bytes).
 $D2AC DEFB $01,$FE                         ; X/ Y position offsets.
 $D2AE DEFB $00,$00,$00,$00,$00,$00         ; Pixel/ control data.
 $D2B4 DEFB $80                             ; Animation sequence terminator.
 $D2B5 DEFB $80                             ; Animation sequence terminator.
 $D2B6 DEFB $80                             ; Animation sequence terminator.
 $D2B7 DEFB $80                             ; Animation sequence terminator.
 $D2B8 DEFB $80                             ; Animation sequence terminator.
 $D2B9 DEFB $80                             ; Animation sequence terminator.
 $D2BA DEFB $80                             ; Animation sequence terminator.
; Sprite #N$A9, Frame #N$01 ($0B bytes).
 $D2BB DEFB $40,$20                         ; X/ Y position offsets.
 $D2BD DEFB $20,$C0,$20,$30,$10,$00,$00,$00 ; {Pixel/ control data.
 $D2C5 DEFB $00                             ; }
 $D2C6 DEFB $FF                             ; Frame #N$01 terminator.
 $D2C7 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$AA, Frame #N$01.
 $D2C8 DEFB $00,$00                         ; X/ Y position offsets.
 $D2CA DEFB $07,$03,$04,$08,$09,$08,$04,$03 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D2D2 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$AA, Frame #N$02 ($09 bytes).
 $D2D3 DEFB $01,$00                         ; X/ Y position offsets.
 $D2D5 DEFB $F1,$BF,$4D,$A3,$FE,$21,$40     ; Pixel/ control data.
 $D2DC DEFB $80                             ; Animation sequence terminator.
 $D2DD DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$AB, Frame #N$02 (control byte).
 $D2DE DEFB $01                             ; Control data.
 $D2DF DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$AB, Frame #N$03 ($10 bytes).
 $D2E0 DEFB $00,$00                         ; X/ Y position offsets.
 $D2E2 DEFB $00,$00,$00,$18,$0B,$39,$C8,$10 ; {Pixel/ control data.
 $D2EA DEFB $20,$63,$1D,$E8,$04,$03         ; }
 $D2F0 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$AB, Frame #N$04 ($09 bytes).
 $D2F1 DEFB $01,$00                         ; X/ Y position offsets.
 $D2F3 DEFB $C0,$40,$40,$A0,$20,$20,$40     ; Pixel/ control data.
 $D2FA DEFB $80                             ; Animation sequence terminator.
 $D2FB DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$AC, Frame #N$02.
 $D2FC DEFB $03,$00                         ; X/ Y position offsets.
 $D2FE DEFB $03,$06,$08,$00,$00,$00,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D306 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$AC, Frame #N$03 ($1A bytes).
 $D307 DEFB $01,$FE                         ; X/ Y position offsets.
 $D309 DEFB $0C,$0A,$12,$24,$4C,$94,$B8,$88 ; {Pixel/ control data.
 $D311 DEFB $46,$A1,$F9,$0A,$12,$14,$64,$88 ;
 $D319 DEFB $E4,$24,$08,$00,$20,$20,$40,$00 ; }
 $D321 DEFB $FF                             ; Frame #N$03 terminator.
 $D322 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$AD, Frame #N$01.
 $D323 DEFB $00,$00                         ; X/ Y position offsets.
 $D325 DEFB $07,$03,$04,$08,$09,$08,$04,$03 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D32D DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$AD, Frame #N$02 ($09 bytes).
 $D32E DEFB $01,$00                         ; X/ Y position offsets.
 $D330 DEFB $F1,$BF,$4D,$A3,$FE,$21,$40     ; Pixel/ control data.
 $D337 DEFB $80                             ; Animation sequence terminator.
 $D338 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$AE, Frame #N$02 (control byte).
 $D339 DEFB $01                             ; Control data.
 $D33A DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$AE, Frame #N$03 ($10 bytes).
 $D33B DEFB $00,$00                         ; X/ Y position offsets.
 $D33D DEFB $00,$00,$00,$18,$0B,$39,$C8,$10 ; {Pixel/ control data.
 $D345 DEFB $20,$63,$1D,$E8,$04,$03         ; }
 $D34B DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$AE, Frame #N$04 ($09 bytes).
 $D34C DEFB $01,$00                         ; X/ Y position offsets.
 $D34E DEFB $C0,$40,$40,$A0,$20,$20,$40     ; Pixel/ control data.
 $D355 DEFB $80                             ; Animation sequence terminator.
 $D356 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$AF, Frame #N$02 (control byte).
 $D357 DEFB $04                             ; Control data.
 $D358 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$AF, Frame #N$03 ($10 bytes).
 $D359 DEFB $00,$00                         ; X/ Y position offsets.
 $D35B DEFB $00,$20,$10,$8C,$66,$15,$0C,$08 ; {Pixel/ control data.
 $D363 DEFB $23,$24,$18,$00,$00,$00         ; }
 $D369 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$AF, Frame #N$04 ($1A bytes).
 $D36A DEFB $01,$FE                         ; X/ Y position offsets.
 $D36C DEFB $00,$00,$00,$00,$00,$04,$04,$0A ; {Pixel/ control data.
 $D374 DEFB $14,$28,$54,$AC,$90,$C8,$E8,$88 ;
 $D37C DEFB $30,$C0,$00,$00,$00,$00,$00,$00 ; }
 $D384 DEFB $FF                             ; Frame #N$04 terminator.
 $D385 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$B0, Frame #N$01.
 $D386 DEFB $00,$00                         ; X/ Y position offsets.
 $D388 DEFB $07,$03,$04,$08,$09,$08,$04,$03 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D390 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$B0, Frame #N$02 ($09 bytes).
 $D391 DEFB $01,$00                         ; X/ Y position offsets.
 $D393 DEFB $F1,$BF,$4D,$A3,$FE,$21,$40     ; Pixel/ control data.
 $D39A DEFB $80                             ; Animation sequence terminator.
 $D39B DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$B1, Frame #N$02 (control byte).
 $D39C DEFB $01                             ; Control data.
 $D39D DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$B1, Frame #N$03 ($10 bytes).
 $D39E DEFB $00,$00                         ; X/ Y position offsets.
 $D3A0 DEFB $00,$00,$00,$18,$0B,$39,$C8,$10 ; {Pixel/ control data.
 $D3A8 DEFB $20,$63,$1D,$E8,$04,$03         ; }
 $D3AE DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$B1, Frame #N$04 ($09 bytes).
 $D3AF DEFB $01,$00                         ; X/ Y position offsets.
 $D3B1 DEFB $C0,$40,$40,$A0,$20,$20,$40     ; Pixel/ control data.
 $D3B8 DEFB $80                             ; Animation sequence terminator.
 $D3B9 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$B2, Frame #N$02.
 $D3BA DEFB $04,$00                         ; X/ Y position offsets.
 $D3BC DEFB $00,$0E,$11,$10,$12,$0D,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D3C4 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$B2, Frame #N$03.
 $D3C5 DEFB $01,$00                         ; X/ Y position offsets.
 $D3C7 DEFB $01,$02,$FC,$11,$03,$9E,$60,$1C ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D3CF DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$B2, Frame #N$04 (position only).
 $D3D0 DEFB $01,$00                         ; X/ Y position offsets.
 $D3D2 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$B3, Frame #N$01 ($07 bytes).
 $D3D3 DEFB $40,$A4                         ; X/ Y position offsets.
 $D3D5 DEFB $98,$CA,$34,$08,$00             ; Pixel/ control data.
 $D3DA DEFB $FF                             ; Frame #N$01 terminator.
 $D3DB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$B4, Frame #N$01 ($12 bytes).
 $D3DC DEFB $FE,$FE                         ; X/ Y position offsets.
 $D3DE DEFB $00,$00,$01,$01,$00,$00,$10,$09 ; {Pixel/ control data.
 $D3E6 DEFB $04,$04,$03,$00,$00,$00,$00,$00 ; }
 $D3EE DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$B4, Frame #N$02 (control byte).
 $D3EF DEFB $01                             ; Control data.
 $D3F0 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$B4, Frame #N$03 ($18 bytes).
 $D3F1 DEFB $00,$00                         ; X/ Y position offsets.
 $D3F3 DEFB $00,$01,$82,$82,$44,$47,$41,$21 ; {Pixel/ control data.
 $D3FB DEFB $21,$93,$4E,$20,$11,$0E,$00,$01 ;
 $D403 DEFB $00,$01,$01,$01,$01,$01         ; }
 $D409 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$B4, Frame #N$04 ($1A bytes).
 $D40A DEFB $01,$FE                         ; X/ Y position offsets.
 $D40C DEFB $00,$1C,$E2,$11,$19,$11,$0A,$8C ; {Pixel/ control data.
 $D414 DEFB $48,$24,$D4,$34,$54,$A8,$D8,$48 ;
 $D41C DEFB $A8,$FC,$AA,$D9,$C9,$C1,$A2,$9C ; }
 $D424 DEFB $FF                             ; Frame #N$04 terminator.
 $D425 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$B5, Frame #N$01.
 $D426 DEFB $FD,$00                         ; X/ Y position offsets.
 $D428 DEFB $00,$07,$3C,$20,$24,$32,$07,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D430 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$B5, Frame #N$02 ($1A bytes).
 $D431 DEFB $01,$FE                         ; X/ Y position offsets.
 $D433 DEFB $00,$01,$02,$04,$04,$05,$02,$04 ; {Pixel/ control data.
 $D43B DEFB $04,$04,$04,$07,$00,$1B,$14,$15 ;
 $D443 DEFB $19,$F9,$19,$02,$3C,$00,$FC,$00 ; }
 $D44B DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$B5, Frame #N$03 ($1A bytes).
 $D44C DEFB $01,$FE                         ; X/ Y position offsets.
 $D44E DEFB $00,$C0,$20,$10,$90,$F0,$18,$04 ; {Pixel/ control data.
 $D456 DEFB $02,$01,$F0,$5E,$B5,$23,$C1,$61 ;
 $D45E DEFB $23,$A3,$41,$00,$00,$00,$00,$00 ; }
 $D466 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$B5, Frame #N$04 (control byte).
 $D467 DEFB $01                             ; Control data.
 $D468 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$B5, Frame #N$05 (position only).
 $D469 DEFB $00,$00                         ; X/ Y position offsets.
 $D46B DEFB $80                             ; Animation sequence terminator.
 $D46C DEFB $80                             ; Animation sequence terminator.
 $D46D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$B8, Frame #N$01 ($0B bytes).
 $D46E DEFB $5C,$B2                         ; X/ Y position offsets.
 $D470 DEFB $59,$C9,$C1,$E2,$FC,$40,$00,$00 ; {Pixel/ control data.
 $D478 DEFB $00                             ; }
 $D479 DEFB $FF                             ; Frame #N$01 terminator.
 $D47A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$B9, Frame #N$01 (control byte).
 $D47B DEFB $FE                             ; Control data.
 $D47C DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$B9, Frame #N$02 ($06 bytes).
 $D47D DEFB $00,$00                         ; X/ Y position offsets.
 $D47F DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $D483 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$BA, Frame #N$01 ($09 bytes).
 $D484 DEFB $40,$A0                         ; X/ Y position offsets.
 $D486 DEFB $10,$48,$86,$91,$6C,$03,$00     ; Pixel/ control data.
 $D48D DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$BA, Frame #N$02 ($0B bytes).
 $D48E DEFB $01,$FE                         ; X/ Y position offsets.
 $D490 DEFB $00,$00,$0E,$11,$20,$24,$5C,$43 ; {Pixel/ control data.
 $D498 DEFB $81                             ; }
 $D499 DEFB $80                             ; Animation sequence terminator.
 $D49A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$BC, Frame #N$01 ($0D bytes).
 $D49B DEFB $C0,$3E                         ; X/ Y position offsets.
 $D49D DEFB $19,$16,$69,$93,$A4,$C8,$93,$93 ; {Pixel/ control data.
 $D4A5 DEFB $21,$21,$C0                     ; }
 $D4A8 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$BC, Frame #N$02 ($06 bytes).
 $D4A9 DEFB $01,$FE                         ; X/ Y position offsets.
 $D4AB DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $D4AF DEFB $80                             ; Animation sequence terminator.
 $D4B0 DEFB $80                             ; Animation sequence terminator.
 $D4B1 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$BF, Frame #N$01 (position only).
 $D4B2 DEFB $00,$00                         ; X/ Y position offsets.
 $D4B4 DEFB $80                             ; Animation sequence terminator.
 $D4B5 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$C1, Frame #N$01 ($0D bytes).
 $D4B6 DEFB $40,$20                         ; X/ Y position offsets.
 $D4B8 DEFB $10,$90,$78,$98,$FC,$B2,$59,$C9 ; {Pixel/ control data.
 $D4C0 DEFB $C1,$E2,$DC                     ; }
 $D4C3 DEFB $FF                             ; Frame #N$01 terminator.
 $D4C4 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$C2, Frame #N$01.
 $D4C5 DEFB $00,$00                         ; X/ Y position offsets.
 $D4C7 DEFB $07,$03,$04,$08,$09,$08,$04,$03 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D4CF DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$C2, Frame #N$02 ($09 bytes).
 $D4D0 DEFB $01,$00                         ; X/ Y position offsets.
 $D4D2 DEFB $F1,$BF,$4D,$A3,$FE,$21,$40     ; Pixel/ control data.
 $D4D9 DEFB $80                             ; Animation sequence terminator.
 $D4DA DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$C3, Frame #N$02 (control byte).
 $D4DB DEFB $01                             ; Control data.
 $D4DC DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$C3, Frame #N$03 ($10 bytes).
 $D4DD DEFB $00,$00                         ; X/ Y position offsets.
 $D4DF DEFB $00,$00,$00,$18,$0B,$38,$C8,$10 ; {Pixel/ control data.
 $D4E7 DEFB $20,$63,$1D,$E8,$04,$03         ; }
 $D4ED DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$C3, Frame #N$04 ($11 bytes).
 $D4EE DEFB $01,$FE                         ; X/ Y position offsets.
 $D4F0 DEFB $00,$00,$20,$D6,$2A,$15,$0A,$04 ; {Pixel/ control data.
 $D4F8 DEFB $03,$01,$00,$00,$00,$00,$00     ; }
 $D4FF DEFB $80                             ; Animation sequence terminator.
; Sprite #N$C4, Frame #N$01 ($07 bytes).
 $D500 DEFB $40,$40                         ; X/ Y position offsets.
 $D502 DEFB $40,$A0,$20,$20,$40             ; Pixel/ control data.
 $D507 DEFB $80                             ; Animation sequence terminator.
 $D508 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$C5, Frame #N$02 ($1A bytes).
 $D509 DEFB $01,$FE                         ; X/ Y position offsets.
 $D50B DEFB $00,$00,$00,$00,$E0,$10,$50,$C8 ; {Pixel/ control data.
 $D513 DEFB $E8,$A4,$14,$13,$11,$11,$12,$10 ;
 $D51B DEFB $09,$08,$00,$00,$00,$00,$00,$00 ; }
 $D523 DEFB $FF                             ; Frame #N$02 terminator.
 $D524 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$C6, Frame #N$01.
 $D525 DEFB $00,$00                         ; X/ Y position offsets.
 $D527 DEFB $07,$03,$04,$08,$09,$08,$04,$03 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D52F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$C6, Frame #N$02 ($09 bytes).
 $D530 DEFB $01,$00                         ; X/ Y position offsets.
 $D532 DEFB $F1,$BF,$4D,$A3,$FE,$21,$40     ; Pixel/ control data.
 $D539 DEFB $80                             ; Animation sequence terminator.
 $D53A DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$C7, Frame #N$02 ($1A bytes).
 $D53B DEFB $01,$FE                         ; X/ Y position offsets.
 $D53D DEFB $00,$00,$00,$00,$02,$0D,$02,$01 ; {Pixel/ control data.
 $D545 DEFB $00,$00,$00,$00,$00,$18,$0B,$38 ;
 $D54D DEFB $C8,$10,$20,$63,$1D,$E8,$04,$03 ; }
 $D555 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$C7, Frame #N$03 ($19 bytes).
 $D556 DEFB $01,$FE                         ; X/ Y position offsets.
 $D558 DEFB $00,$00,$00,$00,$00,$60,$AE,$51 ; {Pixel/ control data.
 $D560 DEFB $A5,$4C,$3E,$1A,$01,$01,$01,$81 ;
 $D568 DEFB $41,$41,$40,$A0,$20,$20,$40     ; }
 $D56F DEFB $80                             ; Animation sequence terminator.
 $D570 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$C8, Frame #N$02 (control byte).
 $D571 DEFB $01                             ; Control data.
 $D572 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$C8, Frame #N$03 (control byte).
 $D573 DEFB $00                             ; Control data.
 $D574 DEFB $80                             ; Animation sequence terminator.
 $D575 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$CA, Frame #N$01 ($08 bytes).
 $D576 DEFB $40,$40                         ; X/ Y position offsets.
 $D578 DEFB $30,$10,$10,$20,$00,$90         ; Pixel/ control data.
 $D57E DEFB $80                             ; Animation sequence terminator.
; Sprite #N$CB, Frame #N$01 ($04 bytes).
 $D57F DEFB $00,$00                         ; X/ Y position offsets.
 $D581 DEFB $00,$00                         ; Pixel/ control data.
 $D583 DEFB $FF                             ; Frame #N$01 terminator.
 $D584 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$CC, Frame #N$01.
 $D585 DEFB $00,$00                         ; X/ Y position offsets.
 $D587 DEFB $07,$03,$04,$08,$09,$08,$04,$03 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D58F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$CC, Frame #N$02 ($09 bytes).
 $D590 DEFB $01,$00                         ; X/ Y position offsets.
 $D592 DEFB $F1,$BF,$4D,$A3,$FE,$21,$40     ; Pixel/ control data.
 $D599 DEFB $80                             ; Animation sequence terminator.
 $D59A DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$CD, Frame #N$02 ($1A bytes).
 $D59B DEFB $01,$FE                         ; #UDGARRAY$01,attr=$07,scale=$04,step=$01;$D59B-$D5B3-$08(kangaroo)
 $D59D DEFB $00,$00,$00,$00,$00,$00,$20,$D6 ; {Pixel/ control data.
 $D5A5 DEFB $2A,$15,$0A,$04,$03,$0D,$0B,$38 ;
 $D5AD DEFB $C8,$10,$20,$63,$1D,$E8,$04,$03 ; }
 $D5B5 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$CD, Frame #N$03 (control byte).
 $D5B6 DEFB $01                             ; Control data.
 $D5B7 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$CD, Frame #N$04 ($0F bytes).
 $D5B8 DEFB $E0,$10                         ; X/ Y position offsets.
 $D5BA DEFB $50,$C8,$E8,$A4,$14,$92,$51,$55 ; {Pixel/ control data.
 $D5C2 DEFB $52,$B1,$29,$28,$40             ; }
 $D5C7 DEFB $80                             ; Animation sequence terminator.
 $D5C8 DEFB $FF                             ; Frame #N$01 terminator.
 $D5C9 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$CF, Frame #N$01 (control byte).
 $D5CA DEFB $00                             ; Control data.
 $D5CB DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$CF, Frame #N$02 ($10 bytes).
 $D5CC DEFB $00,$00                         ; X/ Y position offsets.
 $D5CE DEFB $00,$00,$00,$00,$00,$0F,$0F,$07 ; {Pixel/ control data.
 $D5D6 DEFB $08,$11,$13,$10,$08,$07         ; }
 $D5DC DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$CF, Frame #N$03 ($1A bytes).
 $D5DD DEFB $01,$FE                         ; X/ Y position offsets.
 $D5DF DEFB $00,$00,$00,$06,$0F,$09,$1F,$31 ; {Pixel/ control data.
 $D5E7 DEFB $31,$30,$3F,$23,$27,$19,$03,$EB ;
 $D5EF DEFB $9F,$12,$F2,$57,$FC,$43,$4C,$0E ; }
 $D5F7 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$CF, Frame #N$04 (control byte).
 $D5F8 DEFB $01                             ; Control data.
 $D5F9 DEFB $FF                             ; Frame #N$04 terminator.
 $D5FA DEFB $80                             ; Animation sequence terminator.
 $D5FB DEFB $80                             ; Animation sequence terminator.
 $D5FC DEFB $80                             ; Animation sequence terminator.
; Sprite #N$D2, Frame #N$01 ($0D bytes).
 $D5FD DEFB $00,$00                         ; X/ Y position offsets.
 $D5FF DEFB $18,$16,$F1,$10,$20,$40,$87,$3A ; {Pixel/ control data.
 $D607 DEFB $D0,$08,$07                     ; }
 $D60A DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$D2, Frame #N$02 (position only).
 $D60B DEFB $01,$00                         ; X/ Y position offsets.
 $D60D DEFB $80                             ; Animation sequence terminator.
 $D60E DEFB $80                             ; Animation sequence terminator.
 $D60F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$D5, Frame #N$01 ($03 bytes).
 $D610 DEFB $40,$40                         ; X/ Y position offsets.
 $D612 DEFB $40                             ; Pixel/ control data.
 $D613 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$D6, Frame #N$01 (control byte).
 $D614 DEFB $00                             ; Control data.
 $D615 DEFB $FF                             ; Frame #N$01 terminator.
 $D616 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$D7, Frame #N$01 (control byte).
 $D617 DEFB $01                             ; Control data.
 $D618 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$D7, Frame #N$02 ($10 bytes).
 $D619 DEFB $00,$00                         ; X/ Y position offsets.
 $D61B DEFB $00,$01,$06,$18,$2E,$7B,$77,$7E ; {Pixel/ control data.
 $D623 DEFB $78,$7F,$59,$30,$00,$00         ; }
 $D629 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$D7, Frame #N$03 (control byte).
 $D62A DEFB $01                             ; Control data.
 $D62B DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$D7, Frame #N$04 ($10 bytes).
 $D62C DEFB $00,$60                         ; X/ Y position offsets.
 $D62E DEFB $90,$70,$7C,$42,$82,$81,$03,$05 ; {Pixel/ control data.
 $D636 DEFB $07,$E1,$DE,$5E,$4E,$3C         ; }
 $D63C DEFB $FF                             ; Frame #N$04 terminator.
 $D63D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$D8, Frame #N$01 (control byte).
 $D63E DEFB $02                             ; Control data.
 $D63F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$D8, Frame #N$02 ($10 bytes).
 $D640 DEFB $18,$3C                         ; X/ Y position offsets.
 $D642 DEFB $24,$7C,$9E,$A2,$A2,$C5,$9D,$95 ; {Pixel/ control data.
 $D64A DEFB $CD,$E2,$7E,$7E,$1E,$0E         ; }
 $D650 DEFB $FF                             ; Frame #N$02 terminator.
 $D651 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$D9, Frame #N$01 (control byte).
 $D652 DEFB $01                             ; Control data.
 $D653 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$D9, Frame #N$02 ($10 bytes).
 $D654 DEFB $00,$01                         ; X/ Y position offsets.
 $D656 DEFB $02,$02,$01,$02,$03,$03,$02,$02 ; {Pixel/ control data.
 $D65E DEFB $02,$01,$01,$00,$00,$00         ; }
 $D664 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$D9, Frame #N$03 (control byte).
 $D665 DEFB $01                             ; Control data.
 $D666 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$D9, Frame #N$04 (control byte).
 $D667 DEFB $00                             ; Control data.
 $D668 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$DA, Frame #N$01 ($0E bytes).
 $D669 DEFB $40,$C0                         ; X/ Y position offsets.
 $D66B DEFB $E0,$98,$04,$02,$1B,$29,$13,$83 ; {Pixel/ control data.
 $D673 DEFB $C2,$FE,$7F,$0F                 ; }
 $D677 DEFB $FF                             ; Frame #N$01 terminator.
 $D678 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$DB, Frame #N$01 (control byte).
 $D679 DEFB $01                             ; Control data.
 $D67A DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$DB, Frame #N$02 ($10 bytes).
 $D67B DEFB $00,$00                         ; X/ Y position offsets.
 $D67D DEFB $00,$0C,$12,$17,$1E,$1C,$14,$14 ; {Pixel/ control data.
 $D685 DEFB $12,$0A,$07,$03,$01,$00         ; }
 $D68B DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$DB, Frame #N$03 (control byte).
 $D68C DEFB $01                             ; Control data.
 $D68D DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$DB, Frame #N$04 ($05 bytes).
 $D68E DEFB $00,$00                         ; X/ Y position offsets.
 $D690 DEFB $00,$00,$00                     ; Pixel/ control data.
 $D693 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$DC, Frame #N$01.
 $D694 DEFB $60,$10                         ; X/ Y position offsets.
 $D696 DEFB $08,$34,$54,$74,$26,$0F,$9F,$6E ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D69E DEFB $FF                             ; Frame #N$01 terminator.
 $D69F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$DD, Frame #N$01 (control byte).
 $D6A0 DEFB $00                             ; Control data.
 $D6A1 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$DD, Frame #N$02 ($08 bytes).
 $D6A2 DEFB $00,$00                         ; X/ Y position offsets.
 $D6A4 DEFB $00,$00,$00,$00,$01,$01         ; Pixel/ control data.
 $D6AA DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$DD, Frame #N$03 ($12 bytes).
 $D6AB DEFB $01,$00                         ; X/ Y position offsets.
 $D6AD DEFB $00,$00,$00,$00,$00,$C0,$3F,$64 ; {Pixel/ control data.
 $D6B5 DEFB $E8,$48,$54,$54,$2A,$13,$01,$00 ; }
 $D6BD DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$DD, Frame #N$04 (control byte).
 $D6BE DEFB $01                             ; Control data.
 $D6BF DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$DD, Frame #N$05 ($10 bytes).
 $D6C0 DEFB $00,$00                         ; X/ Y position offsets.
 $D6C2 DEFB $00,$00,$00,$00,$E0,$30,$08,$34 ; {Pixel/ control data.
 $D6CA DEFB $54,$34,$26,$0F,$9F,$6E         ; }
 $D6D0 DEFB $FF                             ; Frame #N$05 terminator.
 $D6D1 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$DE, Frame #N$01.
 $D6D2 DEFB $00,$00                         ; X/ Y position offsets.
 $D6D4 DEFB $30,$4F,$40,$30,$10,$1D,$0B,$06 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D6DC DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$DE, Frame #N$02 (control byte).
 $D6DD DEFB $01                             ; Control data.
 $D6DE DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$DE, Frame #N$03 ($10 bytes).
 $D6DF DEFB $00,$00                         ; X/ Y position offsets.
 $D6E1 DEFB $00,$00,$00,$00,$00,$03,$04,$08 ; {Pixel/ control data.
 $D6E9 DEFB $B0,$50,$10,$38,$0C,$FE         ; }
 $D6EF DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$DE, Frame #N$04 (control byte).
 $D6F0 DEFB $01                             ; Control data.
 $D6F1 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$DE, Frame #N$05 ($10 bytes).
 $D6F2 DEFB $00,$00                         ; X/ Y position offsets.
 $D6F4 DEFB $00,$00,$00,$00,$00,$C0,$30,$18 ; {Pixel/ control data.
 $D6FC DEFB $CC,$A6,$4F,$4F,$1E,$E0         ; }
 $D702 DEFB $FF                             ; Frame #N$05 terminator.
 $D703 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$DF, Frame #N$01.
 $D704 DEFB $FE,$00                         ; X/ Y position offsets.
 $D706 DEFB $00,$00,$01,$02,$02,$01,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D70E DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$DF, Frame #N$02.
 $D70F DEFB $01,$00                         ; X/ Y position offsets.
 $D711 DEFB $00,$00,$DC,$03,$40,$B3,$0C,$03 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D719 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$DF, Frame #N$03 (control byte).
 $D71A DEFB $01                             ; Control data.
 $D71B DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$DF, Frame #N$04 ($10 bytes).
 $D71C DEFB $00,$00                         ; X/ Y position offsets.
 $D71E DEFB $00,$00,$00,$00,$00,$3B,$3C,$38 ; {Pixel/ control data.
 $D726 DEFB $D0,$30,$10,$F8,$04,$83         ; }
 $D72C DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$DF, Frame #N$05 (control byte).
 $D72D DEFB $01                             ; Control data.
 $D72E DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$DF, Frame #N$06 ($10 bytes).
 $D72F DEFB $00,$00                         ; X/ Y position offsets.
 $D731 DEFB $00,$00,$00,$00,$00,$C0,$30,$18 ; {Pixel/ control data.
 $D739 DEFB $CC,$A6,$4F,$0F,$1E,$E0         ; }
 $D73F DEFB $FF                             ; Frame #N$06 terminator.
 $D740 DEFB $80                             ; Animation sequence terminator.
 $D741 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$E0, Frame #N$02 ($09 bytes).
 $D742 DEFB $00,$00                         ; X/ Y position offsets.
 $D744 DEFB $00,$00,$00,$00,$00,$08,$07     ; Pixel/ control data.
 $D74B DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$E0, Frame #N$03 (control byte).
 $D74C DEFB $01                             ; Control data.
 $D74D DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$E0, Frame #N$04 ($10 bytes).
 $D74E DEFB $00,$00                         ; X/ Y position offsets.
 $D750 DEFB $00,$00,$04,$06,$0B,$14,$28,$46 ; {Pixel/ control data.
 $D758 DEFB $48,$9C,$82,$CC,$B0,$3C         ; }
 $D75E DEFB $FF                             ; Frame #N$04 terminator.
 $D75F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$E1, Frame #N$01 (control byte).
 $D760 DEFB $00                             ; Control data.
 $D761 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$E1, Frame #N$02 ($10 bytes).
 $D762 DEFB $00,$00                         ; X/ Y position offsets.
 $D764 DEFB $00,$00,$00,$00,$00,$01,$02,$04 ; {Pixel/ control data.
 $D76C DEFB $04,$09,$08,$0C,$8B,$73         ; }
 $D772 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$E1, Frame #N$03 (control byte).
 $D773 DEFB $01                             ; Control data.
 $D774 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$E1, Frame #N$04 ($08 bytes).
 $D775 DEFB $00,$00                         ; X/ Y position offsets.
 $D777 DEFB $00,$00,$40,$60,$B0,$40         ; Pixel/ control data.
 $D77D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$E2, Frame #N$01 (control byte).
 $D77E DEFB $60                             ; Control data.
 $D77F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$E3, Frame #N$01 ($05 bytes).
 $D780 DEFB $C0,$20                         ; X/ Y position offsets.
 $D782 DEFB $C0,$00,$C0                     ; Pixel/ control data.
 $D785 DEFB $FF                             ; Frame #N$01 terminator.
 $D786 DEFB $80                             ; Animation sequence terminator.
 $D787 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$E4, Frame #N$02 ($09 bytes).
 $D788 DEFB $00,$00                         ; X/ Y position offsets.
 $D78A DEFB $00,$08,$07,$00,$00,$00,$00     ; Pixel/ control data.
 $D791 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$E4, Frame #N$03 (control byte).
 $D792 DEFB $01                             ; Control data.
 $D793 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$E4, Frame #N$04 ($10 bytes).
 $D794 DEFB $04,$06                         ; X/ Y position offsets.
 $D796 DEFB $0B,$14,$28,$46,$48,$9C,$82,$CC ; {Pixel/ control data.
 $D79E DEFB $B0,$3C,$00,$00,$00,$00         ; }
 $D7A4 DEFB $FF                             ; Frame #N$04 terminator.
 $D7A5 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$E5, Frame #N$01 (control byte).
 $D7A6 DEFB $00                             ; Control data.
 $D7A7 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$E5, Frame #N$02 ($10 bytes).
 $D7A8 DEFB $00,$00                         ; X/ Y position offsets.
 $D7AA DEFB $00,$01,$02,$04,$04,$09,$08,$0C ; {Pixel/ control data.
 $D7B2 DEFB $8B,$73,$00,$00,$00,$00         ; }
 $D7B8 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$E5, Frame #N$03 (control byte).
 $D7B9 DEFB $01                             ; Control data.
 $D7BA DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$E5, Frame #N$04 ($04 bytes).
 $D7BB DEFB $40,$60                         ; X/ Y position offsets.
 $D7BD DEFB $B0,$40                         ; Pixel/ control data.
 $D7BF DEFB $80                             ; Animation sequence terminator.
; Sprite #N$E6, Frame #N$01 (control byte).
 $D7C0 DEFB $60                             ; Control data.
 $D7C1 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$E7, Frame #N$01 ($09 bytes).
 $D7C2 DEFB $C0,$20                         ; X/ Y position offsets.
 $D7C4 DEFB $C0,$00,$C0,$00,$00,$00,$00     ; Pixel/ control data.
 $D7CB DEFB $FF                             ; Frame #N$01 terminator.
 $D7CC DEFB $80                             ; Animation sequence terminator.
; Sprite #N$E8, Frame #N$01.
 $D7CD DEFB $00,$FE                         ; X/ Y position offsets.
 $D7CF DEFB $00,$07,$08,$10,$12,$10,$08,$07 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D7D7 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$E8, Frame #N$02 ($04 bytes).
 $D7D8 DEFB $01,$00                         ; X/ Y position offsets.
 $D7DA DEFB $00,$00                         ; Pixel/ control data.
 $D7DC DEFB $80                             ; Animation sequence terminator.
; Sprite #N$E9, Frame #N$01 ($03 bytes).
 $D7DD DEFB $40,$40                         ; X/ Y position offsets.
 $D7DF DEFB $40                             ; Pixel/ control data.
 $D7E0 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$EA, Frame #N$01 (control byte).
 $D7E1 DEFB $00                             ; Control data.
 $D7E2 DEFB $FF                             ; Frame #N$01 terminator.
 $D7E3 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$EB, Frame #N$01.
 $D7E4 DEFB $00,$FE                         ; X/ Y position offsets.
 $D7E6 DEFB $00,$00,$00,$01,$01,$01,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D7EE DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$EB, Frame #N$02.
 $D7EF DEFB $01,$00                         ; X/ Y position offsets.
 $D7F1 DEFB $00,$70,$88,$04,$24,$04,$88,$70 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D7F9 DEFB $FF                             ; Frame #N$02 terminator.
 $D7FA DEFB $80                             ; Animation sequence terminator.
; Sprite #N$EC, Frame #N$01 ($12 bytes).
 $D7FB DEFB $00,$FD                         ; X/ Y position offsets.
 $D7FD DEFB $00,$00,$00,$00,$00,$07,$08,$10 ; {Pixel/ control data.
 $D805 DEFB $12,$10,$08,$07,$00,$00,$00,$00 ; }
 $D80D DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$EC, Frame #N$02 (control byte).
 $D80E DEFB $01                             ; Control data.
 $D80F DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$EC, Frame #N$03 ($07 bytes).
 $D810 DEFB $00,$00                         ; X/ Y position offsets.
 $D812 DEFB $00,$00,$00,$00,$00             ; Pixel/ control data.
 $D817 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$ED, Frame #N$01 (position only).
 $D818 DEFB $40,$40                         ; X/ Y position offsets.
 $D81A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$EE, Frame #N$01 ($05 bytes).
 $D81B DEFB $00,$00                         ; X/ Y position offsets.
 $D81D DEFB $00,$00,$00                     ; Pixel/ control data.
 $D820 DEFB $FF                             ; Frame #N$01 terminator.
 $D821 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$EF, Frame #N$01 ($12 bytes).
 $D822 DEFB $00,$FD                         ; X/ Y position offsets.
 $D824 DEFB $00,$00,$00,$00,$00,$00,$00,$01 ; {Pixel/ control data.
 $D82C DEFB $01,$01,$00,$00,$00,$00,$00,$00 ; }
 $D834 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$EF, Frame #N$02 (control byte).
 $D835 DEFB $01                             ; Control data.
 $D836 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$EF, Frame #N$03 ($10 bytes).
 $D837 DEFB $00,$00                         ; X/ Y position offsets.
 $D839 DEFB $00,$00,$00,$70,$88,$04,$24,$04 ; {Pixel/ control data.
 $D841 DEFB $88,$70,$00,$00,$00,$00         ; }
 $D847 DEFB $FF                             ; Frame #N$03 terminator.
 $D848 DEFB $80                             ; Animation sequence terminator.
 $D849 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$F0, Frame #N$02 ($09 bytes).
 $D84A DEFB $00,$00                         ; X/ Y position offsets.
 $D84C DEFB $00,$00,$01,$02,$04,$08,$07     ; Pixel/ control data.
 $D853 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$F0, Frame #N$03 (control byte).
 $D854 DEFB $01                             ; Control data.
 $D855 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$F0, Frame #N$04 ($0F bytes).
 $D856 DEFB $00,$00                         ; X/ Y position offsets.
 $D858 DEFB $00,$00,$07,$18,$21,$48,$A0,$85 ; {Pixel/ control data.
 $D860 DEFB $90,$44,$A1,$28,$20             ; }
 $D865 DEFB $FF                             ; Frame #N$04 terminator.
 $D866 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$F0, Frame #N$06 (control byte).
 $D867 DEFB $01                             ; Control data.
 $D868 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$F0, Frame #N$07 ($04 bytes).
 $D869 DEFB $00,$00                         ; X/ Y position offsets.
 $D86B DEFB $00,$00                         ; Pixel/ control data.
 $D86D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$F1, Frame #N$01 ($0B bytes).
 $D86E DEFB $60,$10                         ; X/ Y position offsets.
 $D870 DEFB $48,$04,$24,$0A,$42,$01,$25,$01 ; {Pixel/ control data.
 $D878 DEFB $FE                             ; }
 $D879 DEFB $FF                             ; Frame #N$01 terminator.
 $D87A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$F2, Frame #N$01 (control byte).
 $D87B DEFB $00                             ; Control data.
 $D87C DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$F2, Frame #N$02 ($10 bytes).
 $D87D DEFB $00,$00                         ; X/ Y position offsets.
 $D87F DEFB $00,$00,$00,$01,$02,$04,$0A,$08 ; {Pixel/ control data.
 $D887 DEFB $09,$14,$2A,$42,$82,$FE         ; }
 $D88D DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$F2, Frame #N$03 (control byte).
 $D88E DEFB $01                             ; Control data.
 $D88F DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$F2, Frame #N$04 ($0F bytes).
 $D890 DEFB $00,$00                         ; X/ Y position offsets.
 $D892 DEFB $00,$00,$78,$86,$11,$84,$00,$52 ; {Pixel/ control data.
 $D89A DEFB $00,$44,$10,$82,$00             ; }
 $D89F DEFB $FF                             ; Frame #N$04 terminator.
 $D8A0 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$F2, Frame #N$06 (control byte).
 $D8A1 DEFB $01                             ; Control data.
 $D8A2 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$F2, Frame #N$07 ($07 bytes).
 $D8A3 DEFB $00,$00                         ; X/ Y position offsets.
 $D8A5 DEFB $00,$00,$00,$00,$00             ; Pixel/ control data.
 $D8AA DEFB $80                             ; Animation sequence terminator.
; Sprite #N$F3, Frame #N$01 ($08 bytes).
 $D8AB DEFB $40,$40                         ; X/ Y position offsets.
 $D8AD DEFB $A0,$20,$10,$50,$10,$E0         ; Pixel/ control data.
 $D8B3 DEFB $FF                             ; Frame #N$01 terminator.
 $D8B4 DEFB $80                             ; Animation sequence terminator.
 $D8B5 DEFB $FF                             ; Frame #N$01 terminator.
 $D8B6 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$F4, Frame #N$03 ($10 bytes).
 $D8B7 DEFB $00,$00                         ; X/ Y position offsets.
 $D8B9 DEFB $00,$00,$00,$00,$00,$01,$02,$04 ; {Pixel/ control data.
 $D8C1 DEFB $08,$07,$00,$00,$00,$00         ; }
 $D8C7 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$F4, Frame #N$04 (control byte).
 $D8C8 DEFB $01                             ; Control data.
 $D8C9 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$F4, Frame #N$05 ($0B bytes).
 $D8CA DEFB $07,$18                         ; X/ Y position offsets.
 $D8CC DEFB $21,$48,$A0,$85,$90,$44,$A1,$28 ; {Pixel/ control data.
 $D8D4 DEFB $20                             ; }
 $D8D5 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$F4, Frame #N$06 ($04 bytes).
 $D8D6 DEFB $00,$00                         ; X/ Y position offsets.
 $D8D8 DEFB $00,$00                         ; Pixel/ control data.
 $D8DA DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$F4, Frame #N$07 (control byte).
 $D8DB DEFB $01                             ; Control data.
 $D8DC DEFB $FF                             ; Frame #N$07 terminator.
 $D8DD DEFB $80                             ; Animation sequence terminator.
; Sprite #N$F5, Frame #N$01 ($0F bytes).
 $D8DE DEFB $60,$10                         ; X/ Y position offsets.
 $D8E0 DEFB $48,$04,$24,$0A,$42,$01,$25,$01 ; {Pixel/ control data.
 $D8E8 DEFB $FE,$00,$00,$00,$00             ; }
 $D8ED DEFB $FF                             ; Frame #N$01 terminator.
 $D8EE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$F6, Frame #N$01 (control byte).
 $D8EF DEFB $00                             ; Control data.
 $D8F0 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$F6, Frame #N$02 ($10 bytes).
 $D8F1 DEFB $00,$01                         ; X/ Y position offsets.
 $D8F3 DEFB $02,$04,$0A,$08,$09,$14,$2A,$42 ; {Pixel/ control data.
 $D8FB DEFB $82,$FE,$00,$00,$00,$00         ; }
 $D901 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$F6, Frame #N$03 (control byte).
 $D902 DEFB $01                             ; Control data.
 $D903 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$F6, Frame #N$04 ($0B bytes).
 $D904 DEFB $78,$86                         ; X/ Y position offsets.
 $D906 DEFB $11,$84,$00,$52,$00,$44,$10,$82 ; {Pixel/ control data.
 $D90E DEFB $00                             ; }
 $D90F DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$F6, Frame #N$05 ($04 bytes).
 $D910 DEFB $00,$00                         ; X/ Y position offsets.
 $D912 DEFB $00,$00                         ; Pixel/ control data.
 $D914 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$F6, Frame #N$06 (control byte).
 $D915 DEFB $01                             ; Control data.
 $D916 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$F6, Frame #N$07 ($03 bytes).
 $D917 DEFB $00,$00                         ; X/ Y position offsets.
 $D919 DEFB $00                             ; Pixel/ control data.
 $D91A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$F7, Frame #N$01 ($0C bytes).
 $D91B DEFB $40,$40                         ; X/ Y position offsets.
 $D91D DEFB $A0,$20,$10,$50,$10,$E0,$00,$00 ; {Pixel/ control data.
 $D925 DEFB $00,$00                         ; }
 $D927 DEFB $FF                             ; Frame #N$01 terminator.
 $D928 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$F8, Frame #N$01 (control byte).
 $D929 DEFB $00                             ; Control data.
 $D92A DEFB $FF                             ; Frame #N$01 terminator.
 $D92B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$F9, Frame #N$01 ($0C bytes).
 $D92C DEFB $FE,$E6                         ; X/ Y position offsets.
 $D92E DEFB $EF,$96,$96,$E9,$E9,$96,$96,$F9 ; {Pixel/ control data.
 $D936 DEFB $89,$8F                         ; }
 $D938 DEFB $80                             ; Animation sequence terminator.
 $D939 DEFB $80                             ; Animation sequence terminator.
 $D93A DEFB $80                             ; Animation sequence terminator.
 $D93B DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$FC, Frame #N$02 (control byte).
 $D93C DEFB $01                             ; Control data.
 $D93D DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$FC, Frame #N$03 ($10 bytes).
 $D93E DEFB $00,$00                         ; X/ Y position offsets.
 $D940 DEFB $00,$F0,$70,$70,$90,$90,$70,$70 ; {Pixel/ control data.
 $D948 DEFB $90,$90,$F0,$00,$00,$00         ; }
 $D94E DEFB $FF                             ; Frame #N$03 terminator.
 $D94F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$FD, Frame #N$01 (control byte).
 $D950 DEFB $00                             ; Control data.
 $D951 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$FD, Frame #N$02 ($10 bytes).
 $D952 DEFB $08,$0F                         ; X/ Y position offsets.
 $D954 DEFB $0E,$0E,$09,$09,$0E,$0E,$09,$09 ; {Pixel/ control data.
 $D95C DEFB $0F,$08,$08,$08,$08,$08         ; }
 $D962 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$FD, Frame #N$03 (control byte).
 $D963 DEFB $01                             ; Control data.
 $D964 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$FD, Frame #N$04 ($03 bytes).
 $D965 DEFB $00,$E0                         ; X/ Y position offsets.
 $D967 DEFB $60                             ; Pixel/ control data.
 $D968 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$FD, Frame #N$05 ($08 bytes).
 $D969 DEFB $67,$67                         ; X/ Y position offsets.
 $D96B DEFB $99,$99,$67,$67,$99,$99         ; Pixel/ control data.
 $D971 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$FD, Frame #N$06 ($03 bytes).
 $D972 DEFB $00,$00                         ; X/ Y position offsets.
 $D974 DEFB $00                             ; Pixel/ control data.
 $D975 DEFB $FF                             ; Frame #N$06 terminator.
 $D976 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$FE, Frame #N$01 (control byte).
 $D977 DEFB $01                             ; Control data.
 $D978 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$FE, Frame #N$02.
 $D979 DEFB $00,$00                         ; X/ Y position offsets.
 $D97B DEFB $00,$00,$20,$60,$C0,$C0,$C0,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $D983 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$FF, Frame #N$01 ($03 bytes).
 $D984 DEFB $F0,$40                         ; X/ Y position offsets.
 $D986 DEFB $40                             ; Pixel/ control data.
 $D987 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$100, Frame #N$01 (control byte).
 $D988 DEFB $00                             ; Control data.
 $D989 DEFB $FF                             ; Frame #N$01 terminator.
 $D98A DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$100, Frame #N$03 ($19 bytes).
 $D98B DEFB $FE,$00                         ; X/ Y position offsets.
 $D98D DEFB $00,$00,$00,$00,$00,$0C,$02,$E2 ; {Pixel/ control data.
 $D995 DEFB $DA,$29,$13,$8B,$FD,$19,$C3,$3F ;
 $D99D DEFB $C7,$48,$DF,$3E,$10,$08,$07     ; }
 $D9A4 DEFB $FF                             ; Frame #N$03 terminator.
 $D9A5 DEFB $FF                             ; Frame #N$04 terminator.
 $D9A6 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$100, Frame #N$06 ($10 bytes).
 $D9A7 DEFB $1F,$23                         ; X/ Y position offsets.
 $D9A9 DEFB $46,$50,$B3,$A5,$4A,$CD,$3A,$F5 ; {Pixel/ control data.
 $D9B1 DEFB $3A,$07,$00,$00,$00,$00         ; }
 $D9B7 DEFB $FF                             ; Frame #N$06 terminator.
 $D9B8 DEFB $FF                             ; Frame #N$07 terminator.
 $D9B9 DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$100, Frame #N$09 ($10 bytes).
 $D9BA DEFB $00,$00                         ; X/ Y position offsets.
 $D9BC DEFB $00,$00,$00,$00,$01,$3E,$07,$3A ; {Pixel/ control data.
 $D9C4 DEFB $45,$8E,$92,$82,$44,$38         ; }
 $D9CA DEFB $FF                             ; Frame #N$09 terminator.
 $D9CB DEFB $80                             ; Animation sequence terminator.
; Sprite #N$101, Frame #N$01 ($15 bytes).
 $D9CC DEFB $01,$FE                         ; X/ Y position offsets.
 $D9CE DEFB $00,$00,$00,$00,$00,$00,$C0,$20 ; {Pixel/ control data.
 $D9D6 DEFB $20,$A0,$90,$30,$B2,$D6,$9C,$3C ;
 $D9DE DEFB $FC,$70,$88                     ; }
 $D9E1 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$101, Frame #N$02 ($04 bytes).
 $D9E2 DEFB $E4,$04                         ; X/ Y position offsets.
 $D9E4 DEFB $88,$70                         ; Pixel/ control data.
 $D9E6 DEFB $FF                             ; Frame #N$02 terminator.
 $D9E7 DEFB $FF                             ; Frame #N$03 terminator.
 $D9E8 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$101, Frame #N$05 ($10 bytes).
 $D9E9 DEFB $FE,$3D                         ; X/ Y position offsets.
 $D9EB DEFB $C2,$01,$38,$5F,$A1,$DC,$A3,$5C ; {Pixel/ control data.
 $D9F3 DEFB $A4,$7D,$03,$01,$00,$00         ; }
 $D9F9 DEFB $FF                             ; Frame #N$05 terminator.
 $D9FA DEFB $FF                             ; Frame #N$06 terminator.
 $D9FB DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$101, Frame #N$08 ($0F bytes).
 $D9FC DEFB $01,$02                         ; X/ Y position offsets.
 $D9FE DEFB $04,$05,$0B,$0A,$14,$EC,$73,$AF ; {Pixel/ control data.
 $DA06 DEFB $53,$E0,$20,$20,$40             ; }
 $DA0B DEFB $80                             ; Animation sequence terminator.
 $DA0C DEFB $FF                             ; Frame #N$01 terminator.
 $DA0D DEFB $FF                             ; Frame #N$02 terminator.
 $DA0E DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$102, Frame #N$04 ($10 bytes).
 $DA0F DEFB $00,$00                         ; X/ Y position offsets.
 $DA11 DEFB $00,$00,$00,$00,$00,$03,$00,$03 ; {Pixel/ control data.
 $DA19 DEFB $04,$08,$09,$08,$04,$03         ; }
 $DA1F DEFB $FF                             ; Frame #N$04 terminator.
 $DA20 DEFB $80                             ; Animation sequence terminator.
 $DA21 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$103, Frame #N$02 ($19 bytes).
 $DA22 DEFB $00,$70                         ; X/ Y position offsets.
 $DA24 DEFB $88,$04,$24,$64,$A8,$F0,$A0,$20 ; {Pixel/ control data.
 $DA2C DEFB $60,$A0,$50,$D0,$50,$90,$20,$30 ;
 $DA34 DEFB $28,$44,$64,$44,$88,$70,$00     ; }
 $DA3B DEFB $FF                             ; Frame #N$02 terminator.
 $DA3C DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$103, Frame #N$04 ($19 bytes).
 $DA3D DEFB $FE,$00                         ; X/ Y position offsets.
 $DA3F DEFB $06,$07,$07,$07,$06,$07,$02,$3B ; {Pixel/ control data.
 $DA47 DEFB $47,$82,$39,$4C,$83,$84,$05,$1E ;
 $DA4F DEFB $10,$08,$08,$04,$03,$00,$00     ; }
 $DA56 DEFB $FF                             ; Frame #N$04 terminator.
 $DA57 DEFB $FF                             ; Frame #N$05 terminator.
 $DA58 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$103, Frame #N$07 ($10 bytes).
 $DA59 DEFB $00,$00                         ; X/ Y position offsets.
 $DA5B DEFB $00,$01,$02,$0C,$10,$11,$25,$41 ; {Pixel/ control data.
 $DA63 DEFB $02,$02,$04,$04,$00,$00         ; }
 $DA69 DEFB $FF                             ; Frame #N$07 terminator.
 $DA6A DEFB $80                             ; Animation sequence terminator.
 $DA6B DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$104, Frame #N$02 ($03 bytes).
 $DA6C DEFB $00,$00                         ; X/ Y position offsets.
 $DA6E DEFB $00                             ; Pixel/ control data.
 $DA6F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$105, Frame #N$01 ($03 bytes).
 $DA70 DEFB $40,$40                         ; X/ Y position offsets.
 $DA72 DEFB $40                             ; Pixel/ control data.
 $DA73 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$106, Frame #N$01 ($03 bytes).
 $DA74 DEFB $00,$00                         ; X/ Y position offsets.
 $DA76 DEFB $00                             ; Pixel/ control data.
 $DA77 DEFB $80                             ; Animation sequence terminator.
 $DA78 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$108, Frame #N$01 ($0C bytes).
 $DA79 DEFB $40,$40                         ; X/ Y position offsets.
 $DA7B DEFB $20,$20,$2C,$12,$11,$19,$21,$C2 ; {Pixel/ control data.
 $DA83 DEFB $1C,$00                         ; }
 $DA85 DEFB $FF                             ; Frame #N$01 terminator.
 $DA86 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$108, Frame #N$03 ($19 bytes).
 $DA87 DEFB $FE,$00                         ; X/ Y position offsets.
 $DA89 DEFB $0E,$11,$20,$A4,$E6,$D3,$6E,$35 ; {Pixel/ control data.
 $DA91 DEFB $1D,$EA,$1A,$05,$E5,$3B,$05,$06 ;
 $DA99 DEFB $04,$18,$08,$06,$01,$00,$00     ; }
 $DAA0 DEFB $FF                             ; Frame #N$03 terminator.
 $DAA1 DEFB $FF                             ; Frame #N$04 terminator.
 $DAA2 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$108, Frame #N$06 ($10 bytes).
 $DAA3 DEFB $00,$00                         ; X/ Y position offsets.
 $DAA5 DEFB $00,$01,$02,$04,$09,$32,$42,$44 ; {Pixel/ control data.
 $DAAD DEFB $14,$84,$88,$08,$10,$10         ; }
 $DAB3 DEFB $FF                             ; Frame #N$06 terminator.
 $DAB4 DEFB $80                             ; Animation sequence terminator.
 $DAB5 DEFB $FF                             ; Frame #N$01 terminator.
 $DAB6 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$109, Frame #N$03 ($06 bytes).
 $DAB7 DEFB $00,$00                         ; X/ Y position offsets.
 $DAB9 DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $DABD DEFB $80                             ; Animation sequence terminator.
; Sprite #N$10A, Frame #N$01 ($09 bytes).
 $DABE DEFB $40,$10                         ; X/ Y position offsets.
 $DAC0 DEFB $3C,$12,$11,$15,$11,$22,$DC     ; Pixel/ control data.
 $DAC7 DEFB $FF                             ; Frame #N$01 terminator.
 $DAC8 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$10A, Frame #N$03 ($19 bytes).
 $DAC9 DEFB $FE,$00                         ; X/ Y position offsets.
 $DACB DEFB $00,$00,$00,$00,$C0,$20,$10,$D0 ; {Pixel/ control data.
 $DAD3 DEFB $70,$20,$D0,$AE,$F9,$D4,$4C,$AC ;
 $DADB DEFB $FA,$3E,$E6,$02,$04,$04,$07     ; }
 $DAE2 DEFB $FF                             ; Frame #N$03 terminator.
 $DAE3 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$10A, Frame #N$05 ($19 bytes).
 $DAE4 DEFB $FE,$00                         ; X/ Y position offsets.
 $DAE6 DEFB $00,$00,$00,$00,$01,$02,$04,$04 ; {Pixel/ control data.
 $DAEE DEFB $04,$06,$0F,$07,$03,$19,$64,$83 ;
 $DAF6 DEFB $30,$D8,$07,$00,$00,$00,$00     ; }
 $DAFD DEFB $FF                             ; Frame #N$05 terminator.
 $DAFE DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$10A, Frame #N$07 ($09 bytes).
 $DAFF DEFB $00,$0D                         ; X/ Y position offsets.
 $DB01 DEFB $12,$10,$05,$66,$8C,$08,$10     ; Pixel/ control data.
 $DB08 DEFB $FF                             ; Frame #N$07 terminator.
 $DB09 DEFB $80                             ; Animation sequence terminator.
 $DB0A DEFB $FF                             ; Frame #N$01 terminator.
 $DB0B DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$10B, Frame #N$03 ($0F bytes).
 $DB0C DEFB $00,$00                         ; X/ Y position offsets.
 $DB0E DEFB $00,$00,$00,$1C,$22,$C1,$39,$09 ; {Pixel/ control data.
 $DB16 DEFB $0A,$00,$04,$08,$70             ; }
 $DB1B DEFB $80                             ; Animation sequence terminator.
 $DB1C DEFB $FF                             ; Frame #N$01 terminator.
 $DB1D DEFB $FF                             ; Frame #N$02 terminator.
 $DB1E DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$10C, Frame #N$04 ($05 bytes).
 $DB1F DEFB $00,$00                         ; X/ Y position offsets.
 $DB21 DEFB $00,$00,$00                     ; Pixel/ control data.
 $DB24 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$10D, Frame #N$01.
 $DB25 DEFB $5F,$30                         ; X/ Y position offsets.
 $DB27 DEFB $0C,$C2,$72,$0A,$05,$AB,$7D,$FB ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $DB2F DEFB $FF                             ; Frame #N$01 terminator.
 $DB30 DEFB $FF                             ; Frame #N$02 terminator.
 $DB31 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$10D, Frame #N$04 ($10 bytes).
 $DB32 DEFB $00,$1C                         ; X/ Y position offsets.
 $DB34 DEFB $22,$41,$4D,$47,$22,$5C,$7B,$3F ; {Pixel/ control data.
 $DB3C DEFB $0E,$1C,$E2,$01,$98,$FE         ; }
 $DB42 DEFB $FF                             ; Frame #N$04 terminator.
 $DB43 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$10D, Frame #N$06 ($09 bytes).
 $DB44 DEFB $00,$00                         ; X/ Y position offsets.
 $DB46 DEFB $00,$00,$00,$0C,$13,$10,$14     ; Pixel/ control data.
 $DB4D DEFB $FF                             ; Frame #N$06 terminator.
 $DB4E DEFB $80                             ; Animation sequence terminator.
 $DB4F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$10E, Frame #N$02 ($06 bytes).
 $DB50 DEFB $01,$00                         ; X/ Y position offsets.
 $DB52 DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $DB56 DEFB $80                             ; Animation sequence terminator.
 $DB57 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$110, Frame #N$01 ($09 bytes).
 $DB58 DEFB $B0,$48                         ; X/ Y position offsets.
 $DB5A DEFB $44,$64,$84,$08,$70,$00,$00     ; Pixel/ control data.
 $DB61 DEFB $FF                             ; Frame #N$01 terminator.
 $DB62 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$110, Frame #N$03 ($19 bytes).
 $DB63 DEFB $FE,$38                         ; X/ Y position offsets.
 $DB65 DEFB $44,$82,$9A,$9A,$CC,$FC,$D4,$94 ; {Pixel/ control data.
 $DB6D DEFB $0A,$1A,$E5,$0D,$F4,$6C,$18,$90 ;
 $DB75 DEFB $A0,$A0,$98,$87,$40,$40,$40     ; }
 $DB7C DEFB $FF                             ; Frame #N$03 terminator.
 $DB7D DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$110, Frame #N$05 ($19 bytes).
 $DB7E DEFB $FE,$00                         ; X/ Y position offsets.
 $DB80 DEFB $00,$00,$02,$03,$01,$01,$00,$00 ; {Pixel/ control data.
 $DB88 DEFB $00,$00,$03,$04,$04,$05,$05,$04 ;
 $DB90 DEFB $04,$08,$10,$10,$08,$00,$08     ; }
 $DB97 DEFB $FF                             ; Frame #N$05 terminator.
 $DB98 DEFB $80                             ; Animation sequence terminator.
 $DB99 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$111, Frame #N$02 ($11 bytes).
 $DB9A DEFB $01,$00                         ; X/ Y position offsets.
 $DB9C DEFB $00,$00,$00,$E0,$90,$88,$C8,$88 ; {Pixel/ control data.
 $DBA4 DEFB $10,$E0,$00,$00,$00,$00,$00     ; }
 $DBAB DEFB $FF                             ; Frame #N$02 terminator.
 $DBAC DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$111, Frame #N$04 ($03 bytes).
 $DBAD DEFB $FE,$00                         ; X/ Y position offsets.
 $DBAF DEFB $00                             ; Pixel/ control data.
 $DBB0 DEFB $80                             ; Animation sequence terminator.
 $DBB1 DEFB $80                             ; Animation sequence terminator.
 $DBB2 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$114, Frame #N$01 (control byte).
 $DBB3 DEFB $00                             ; Control data.
 $DBB4 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$115, Frame #N$01 ($11 bytes).
 $DBB5 DEFB $70,$C8                         ; X/ Y position offsets.
 $DBB7 DEFB $A4,$22,$21,$71,$90,$F0,$10,$20 ; {Pixel/ control data.
 $DBBF DEFB $21,$BE,$60,$F0,$08,$24,$30     ; }
 $DBC6 DEFB $FF                             ; Frame #N$01 terminator.
 $DBC7 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$115, Frame #N$03 ($19 bytes).
 $DBC8 DEFB $FE,$0E                         ; X/ Y position offsets.
 $DBCA DEFB $11,$20,$26,$23,$31,$7E,$3D,$1F ; {Pixel/ control data.
 $DBD2 DEFB $0C,$01,$02,$0C,$10,$13,$0A,$09 ;
 $DBDA DEFB $05,$04,$02,$04,$04,$03,$00     ; }
 $DBE1 DEFB $FF                             ; Frame #N$03 terminator.
 $DBE2 DEFB $80                             ; Animation sequence terminator.
 $DBE3 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$116, Frame #N$02 ($11 bytes).
 $DBE4 DEFB $00,$00                         ; X/ Y position offsets.
 $DBE6 DEFB $00,$00,$00,$00,$00,$00,$70,$88 ; {Pixel/ control data.
 $DBEE DEFB $84,$64,$44,$48,$30,$C0,$00     ; }
 $DBF5 DEFB $FF                             ; Frame #N$02 terminator.
 $DBF6 DEFB $FF                             ; Frame #N$03 terminator.
 $DBF7 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$116, Frame #N$05 ($16 bytes).
 $DBF8 DEFB $00,$00                         ; X/ Y position offsets.
 $DBFA DEFB $00,$00,$E0,$90,$88,$46,$A1,$50 ; {Pixel/ control data.
 $DC02 DEFB $50,$B0,$70,$90,$88,$0F,$00,$00 ;
 $DC0A DEFB $00,$00,$00,$00                 ; }
 $DC0E DEFB $80                             ; Animation sequence terminator.
; Sprite #N$117, Frame #N$01 (control byte).
 $DC0F DEFB $40                             ; Control data.
 $DC10 DEFB $FF                             ; Frame #N$01 terminator.
 $DC11 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$117, Frame #N$03 ($19 bytes).
 $DC12 DEFB $FE,$38                         ; X/ Y position offsets.
 $DC14 DEFB $44,$82,$9B,$8F,$46,$FA,$F7,$7D ; {Pixel/ control data.
 $DC1C DEFB $1B,$02,$04,$19,$62,$84,$9F,$50 ;
 $DC24 DEFB $48,$28,$24,$12,$21,$24,$19     ; }
 $DC2B DEFB $FF                             ; Frame #N$03 terminator.
 $DC2C DEFB $80                             ; Animation sequence terminator.
 $DC2D DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$118, Frame #N$02 ($05 bytes).
 $DC2E DEFB $FE,$00                         ; X/ Y position offsets.
 $DC30 DEFB $00,$00,$00                     ; Pixel/ control data.
 $DC33 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$119, Frame #N$01 ($07 bytes).
 $DC34 DEFB $40,$20                         ; X/ Y position offsets.
 $DC36 DEFB $20,$A0,$40,$40,$40             ; Pixel/ control data.
 $DC3B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$11A, Frame #N$01 ($0B bytes).
 $DC3C DEFB $00,$04                         ; X/ Y position offsets.
 $DC3E DEFB $08,$31,$63,$A8,$30,$10,$C4,$24 ; {Pixel/ control data.
 $DC46 DEFB $18                             ; }
 $DC47 DEFB $FF                             ; Frame #N$01 terminator.
 $DC48 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$11A, Frame #N$03 ($19 bytes).
 $DC49 DEFB $FE,$00                         ; X/ Y position offsets.
 $DC4B DEFB $00,$00,$00,$03,$04,$E8,$1D,$C3 ; {Pixel/ control data.
 $DC53 DEFB $20,$10,$C8,$38,$2F,$3D,$09,$13 ;
 $DC5B DEFB $17,$11,$0C,$06,$00,$00,$00     ; }
 $DC62 DEFB $FF                             ; Frame #N$03 terminator.
 $DC63 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$11A, Frame #N$05 ($05 bytes).
 $DC64 DEFB $FE,$00                         ; X/ Y position offsets.
 $DC66 DEFB $00,$00,$00                     ; Pixel/ control data.
 $DC69 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$11B, Frame #N$01 ($0B bytes).
 $DC6A DEFB $40,$21                         ; X/ Y position offsets.
 $DC6C DEFB $FE,$A1,$7C,$A2,$FD,$E0,$00,$00 ; {Pixel/ control data.
 $DC74 DEFB $00                             ; }
 $DC75 DEFB $FF                             ; Frame #N$01 terminator.
 $DC76 DEFB $FF                             ; Frame #N$02 terminator.
 $DC77 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$11B, Frame #N$04 ($10 bytes).
 $DC78 DEFB $00,$00                         ; X/ Y position offsets.
 $DC7A DEFB $00,$00,$03,$04,$08,$09,$08,$04 ; {Pixel/ control data.
 $DC82 DEFB $03,$07,$07,$00,$00,$00         ; }
 $DC88 DEFB $FF                             ; Frame #N$04 terminator.
 $DC89 DEFB $80                             ; Animation sequence terminator.
 $DC8A DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$11C, Frame #N$02 ($09 bytes).
 $DC8B DEFB $00,$00                         ; X/ Y position offsets.
 $DC8D DEFB $0E,$F1,$01,$09,$36,$C0,$00     ; Pixel/ control data.
 $DC94 DEFB $FF                             ; Frame #N$02 terminator.
 $DC95 DEFB $FF                             ; Frame #N$03 terminator.
 $DC96 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$11C, Frame #N$05 (position only).
 $DC97 DEFB $00,$00                         ; X/ Y position offsets.
 $DC99 DEFB $80                             ; Animation sequence terminator.
 $DC9A DEFB $80                             ; Animation sequence terminator.
 $DC9B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$11F, Frame #N$01 ($0B bytes).
 $DC9C DEFB $00,$10                         ; X/ Y position offsets.
 $DC9E DEFB $28,$34,$4E,$86,$11,$6C,$83,$00 ; {Pixel/ control data.
 $DCA6 DEFB $07                             ; }
 $DCA7 DEFB $FF                             ; Frame #N$01 terminator.
 $DCA8 DEFB $FF                             ; Frame #N$02 terminator.
 $DCA9 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$11F, Frame #N$04 ($10 bytes).
 $DCAA DEFB $0E,$11                         ; X/ Y position offsets.
 $DCAC DEFB $20,$24,$1C,$E2,$01,$01,$C1,$A2 ; {Pixel/ control data.
 $DCB4 DEFB $72,$0D,$06,$05,$02,$00         ; }
 $DCBA DEFB $FF                             ; Frame #N$04 terminator.
 $DCBB DEFB $FF                             ; Frame #N$05 terminator.
 $DCBC DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$11F, Frame #N$07 ($10 bytes).
 $DCBD DEFB $00,$00                         ; X/ Y position offsets.
 $DCBF DEFB $00,$00,$00,$00,$03,$0C,$F1,$CC ; {Pixel/ control data.
 $DCC7 DEFB $73,$5C,$E0,$F0,$C0,$00         ; }
 $DCCD DEFB $FF                             ; Frame #N$07 terminator.
 $DCCE DEFB $FF                             ; Frame #N$08 terminator.
 $DCCF DEFB $FF                             ; Frame #N$09 terminator.
; Sprite #N$11F, Frame #N$0A ($10 bytes).
 $DCD0 DEFB $00,$00                         ; X/ Y position offsets.
 $DCD2 DEFB $00,$00,$00,$00,$00,$07,$08,$13 ; {Pixel/ control data.
 $DCDA DEFB $13,$10,$08,$07,$01,$03         ; }
 $DCE0 DEFB $FF                             ; Frame #N$0A terminator.
 $DCE1 DEFB $80                             ; Animation sequence terminator.
 $DCE2 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$120, Frame #N$02 ($0D bytes).
 $DCE3 DEFB $FE,$00                         ; X/ Y position offsets.
 $DCE5 DEFB $00,$00,$00,$40,$FC,$E2,$C1,$A9 ; {Pixel/ control data.
 $DCED DEFB $59,$B2,$5C                     ; }
 $DCF0 DEFB $80                             ; Animation sequence terminator.
 $DCF1 DEFB $80                             ; Animation sequence terminator.
 $DCF2 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$123, Frame #N$01 (control byte).
 $DCF3 DEFB $00                             ; Control data.
 $DCF4 DEFB $FF                             ; Frame #N$01 terminator.
 $DCF5 DEFB $FF                             ; Frame #N$02 terminator.
 $DCF6 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$123, Frame #N$04 ($18 bytes).
 $DCF7 DEFB $00,$00                         ; X/ Y position offsets.
 $DCF9 DEFB $00,$00,$00,$00,$61,$93,$13,$C9 ; {Pixel/ control data.
 $DD01 DEFB $45,$63,$51,$5E,$F0,$01,$02,$04 ;
 $DD09 DEFB $18,$F0,$90,$10,$20,$C0         ; }
 $DD0F DEFB $FF                             ; Frame #N$04 terminator.
 $DD10 DEFB $FF                             ; Frame #N$05 terminator.
 $DD11 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$123, Frame #N$07 ($10 bytes).
 $DD12 DEFB $37,$48                         ; X/ Y position offsets.
 $DD14 DEFB $43,$14,$18,$DF,$94,$24,$44,$04 ; {Pixel/ control data.
 $DD1C DEFB $02,$05,$04,$04,$02,$01         ; }
 $DD22 DEFB $FF                             ; Frame #N$07 terminator.
 $DD23 DEFB $80                             ; Animation sequence terminator.
 $DD24 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$124, Frame #N$02 ($0D bytes).
 $DD25 DEFB $FD,$00                         ; X/ Y position offsets.
 $DD27 DEFB $00,$00,$00,$40,$FC,$E2,$C1,$C9 ; {Pixel/ control data.
 $DD2F DEFB $59,$B2,$5C                     ; }
 $DD32 DEFB $80                             ; Animation sequence terminator.
 $DD33 DEFB $80                             ; Animation sequence terminator.
 $DD34 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$127, Frame #N$01 (control byte).
 $DD35 DEFB $00                             ; Control data.
 $DD36 DEFB $FF                             ; Frame #N$01 terminator.
 $DD37 DEFB $FF                             ; Frame #N$02 terminator.
 $DD38 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$127, Frame #N$04 ($18 bytes).
 $DD39 DEFB $00,$00                         ; X/ Y position offsets.
 $DD3B DEFB $00,$00,$00,$00,$41,$A3,$23,$61 ; {Pixel/ control data.
 $DD43 DEFB $C1,$23,$B5,$5E,$F0,$01,$02,$04 ;
 $DD4B DEFB $18,$F0,$90,$10,$20,$C0         ; }
 $DD51 DEFB $FF                             ; Frame #N$04 terminator.
 $DD52 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$127, Frame #N$06 ($19 bytes).
 $DD53 DEFB $FE,$00                         ; X/ Y position offsets.
 $DD55 DEFB $00,$00,$FC,$02,$02,$F9,$19,$19 ; {Pixel/ control data.
 $DD5D DEFB $15,$24,$1B,$00,$07,$04,$04,$04 ;
 $DD65 DEFB $04,$02,$05,$04,$04,$02,$01     ; }
 $DD6C DEFB $FF                             ; Frame #N$06 terminator.
 $DD6D DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$127, Frame #N$08 ($0B bytes).
 $DD6E DEFB $FE,$00                         ; X/ Y position offsets.
 $DD70 DEFB $0C,$12,$11,$02,$64,$8B,$1C,$30 ; {Pixel/ control data.
 $DD78 DEFB $40                             ; }
 $DD79 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$128, Frame #N$01 ($05 bytes).
 $DD7A DEFB $00,$00                         ; X/ Y position offsets.
 $DD7C DEFB $00,$00,$00                     ; Pixel/ control data.
 $DD7F DEFB $FF                             ; Frame #N$01 terminator.
 $DD80 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$129, Frame #N$01 (control byte).
 $DD81 DEFB $00                             ; Control data.
 $DD82 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$129, Frame #N$02 (position only).
 $DD83 DEFB $00,$00                         ; X/ Y position offsets.
 $DD85 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$12A, Frame #N$01 ($05 bytes).
 $DD86 DEFB $40,$20                         ; X/ Y position offsets.
 $DD88 DEFB $20,$20,$40                     ; Pixel/ control data.
 $DD8B DEFB $FF                             ; Frame #N$01 terminator.
 $DD8C DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$12A, Frame #N$03 ($11 bytes).
 $DD8D DEFB $00,$07                         ; X/ Y position offsets.
 $DD8F DEFB $0E,$1B,$34,$E8,$3E,$CE,$64,$83 ; {Pixel/ control data.
 $DD97 DEFB $00,$00,$00,$00,$00,$00,$00     ; }
 $DD9E DEFB $FF                             ; Frame #N$03 terminator.
 $DD9F DEFB $FF                             ; Frame #N$04 terminator.
 $DDA0 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$12A, Frame #N$06 ($10 bytes).
 $DDA1 DEFB $00,$00                         ; X/ Y position offsets.
 $DDA3 DEFB $00,$40,$C0,$3B,$14,$0F,$00,$03 ; {Pixel/ control data.
 $DDAB DEFB $1C,$E0,$90,$10,$20,$C0         ; }
 $DDB1 DEFB $FF                             ; Frame #N$06 terminator.
 $DDB2 DEFB $FF                             ; Frame #N$07 terminator.
 $DDB3 DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$12A, Frame #N$09 ($10 bytes).
 $DDB4 DEFB $00,$00                         ; X/ Y position offsets.
 $DDB6 DEFB $00,$00,$00,$01,$01,$02,$02,$02 ; {Pixel/ control data.
 $DDBE DEFB $01,$04,$04,$04,$02,$01         ; }
 $DDC4 DEFB $FF                             ; Frame #N$09 terminator.
; Sprite #N$12A, Frame #N$0A.
 $DDC5 DEFB $00,$FE                         ; X/ Y position offsets.
 $DDC7 DEFB $00,$06,$29,$D3,$64,$48,$10,$E0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $DDCF DEFB $FF                             ; Frame #N$0A terminator.
 $DDD0 DEFB $FF                             ; Frame #N$0B terminator.
; Sprite #N$12A, Frame #N$0C ($09 bytes).
 $DDD1 DEFB $00,$06                         ; X/ Y position offsets.
 $DDD3 DEFB $19,$61,$8C,$34,$4A,$85,$00     ; Pixel/ control data.
 $DDDA DEFB $FF                             ; Frame #N$0C terminator.
 $DDDB DEFB $FF                             ; Frame #N$0D terminator.
; Sprite #N$12A, Frame #N$0E ($11 bytes).
 $DDDC DEFB $00,$00                         ; X/ Y position offsets.
 $DDDE DEFB $00,$03,$04,$04,$31,$41,$03,$02 ; {Pixel/ control data.
 $DDE6 DEFB $04,$04,$00,$00,$00,$00,$00     ; }
 $DDED DEFB $FF                             ; Frame #N$0E terminator.
 $DDEE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$12B, Frame #N$01.
 $DDEF DEFB $00,$00                         ; X/ Y position offsets.
 $DDF1 DEFB $E0,$C0,$20,$10,$90,$10,$20,$C0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $DDF9 DEFB $FF                             ; Frame #N$01 terminator.
 $DDFA DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$12B, Frame #N$03 ($09 bytes).
 $DDFB DEFB $00,$8F                         ; X/ Y position offsets.
 $DDFD DEFB $FD,$B2,$C5,$7F,$84,$02,$01     ; Pixel/ control data.
 $DE04 DEFB $FF                             ; Frame #N$03 terminator.
 $DE05 DEFB $FF                             ; Frame #N$04 terminator.
 $DE06 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$12B, Frame #N$06 ($10 bytes).
 $DE07 DEFB $00,$00                         ; X/ Y position offsets.
 $DE09 DEFB $00,$00,$00,$18,$D0,$9C,$13,$08 ; {Pixel/ control data.
 $DE11 DEFB $04,$C6,$B8,$17,$20,$C0         ; }
 $DE17 DEFB $FF                             ; Frame #N$06 terminator.
 $DE18 DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$12B, Frame #N$08 ($09 bytes).
 $DE19 DEFB $00,$03                         ; X/ Y position offsets.
 $DE1B DEFB $02,$02,$05,$04,$04,$02,$01     ; Pixel/ control data.
 $DE22 DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$12B, Frame #N$09 ($05 bytes).
 $DE23 DEFB $00,$FE                         ; X/ Y position offsets.
 $DE25 DEFB $40,$B0,$40                     ; Pixel/ control data.
 $DE28 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$12C, Frame #N$01 ($04 bytes).
 $DE29 DEFB $00,$00                         ; X/ Y position offsets.
 $DE2B DEFB $00,$00                         ; Pixel/ control data.
 $DE2D DEFB $FF                             ; Frame #N$01 terminator.
 $DE2E DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$12C, Frame #N$03 ($09 bytes).
 $DE2F DEFB $00,$00                         ; X/ Y position offsets.
 $DE31 DEFB $06,$75,$8A,$A5,$2A,$7C,$58     ; Pixel/ control data.
 $DE38 DEFB $80                             ; Animation sequence terminator.
 $DE39 DEFB $80                             ; Animation sequence terminator.
 $DE3A DEFB $80                             ; Animation sequence terminator.
 $DE3B DEFB $80                             ; Animation sequence terminator.
 $DE3C DEFB $80                             ; Animation sequence terminator.
 $DE3D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$132, Frame #N$01 (position only).
 $DE3E DEFB $00,$00                         ; X/ Y position offsets.
 $DE40 DEFB $FF                             ; Frame #N$01 terminator.
 $DE41 DEFB $FF                             ; Frame #N$02 terminator.
 $DE42 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$132, Frame #N$04 ($10 bytes).
 $DE43 DEFB $00,$00                         ; X/ Y position offsets.
 $DE45 DEFB $00,$00,$00,$01,$01,$02,$02,$0C ; {Pixel/ control data.
 $DE4D DEFB $08,$08,$04,$00,$09,$01         ; }
 $DE53 DEFB $FF                             ; Frame #N$04 terminator.
 $DE54 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$133, Frame #N$01 (control byte).
 $DE55 DEFB $00                             ; Control data.
 $DE56 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$133, Frame #N$02 (position only).
 $DE57 DEFB $00,$00                         ; X/ Y position offsets.
 $DE59 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$134, Frame #N$01 ($05 bytes).
 $DE5A DEFB $40,$20                         ; X/ Y position offsets.
 $DE5C DEFB $20,$20,$40                     ; Pixel/ control data.
 $DE5F DEFB $FF                             ; Frame #N$01 terminator.
 $DE60 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$134, Frame #N$03 ($11 bytes).
 $DE61 DEFB $00,$07                         ; X/ Y position offsets.
 $DE63 DEFB $0E,$1B,$34,$E8,$3E,$CE,$64,$83 ; {Pixel/ control data.
 $DE6B DEFB $00,$00,$00,$00,$00,$00,$00     ; }
 $DE72 DEFB $FF                             ; Frame #N$03 terminator.
 $DE73 DEFB $FF                             ; Frame #N$04 terminator.
 $DE74 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$134, Frame #N$06 ($10 bytes).
 $DE75 DEFB $00,$00                         ; X/ Y position offsets.
 $DE77 DEFB $00,$40,$C0,$3B,$14,$0F,$00,$03 ; {Pixel/ control data.
 $DE7F DEFB $1C,$E0,$90,$10,$20,$C0         ; }
 $DE85 DEFB $FF                             ; Frame #N$06 terminator.
 $DE86 DEFB $FF                             ; Frame #N$07 terminator.
 $DE87 DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$134, Frame #N$09 ($10 bytes).
 $DE88 DEFB $00,$00                         ; X/ Y position offsets.
 $DE8A DEFB $00,$00,$00,$01,$01,$02,$02,$02 ; {Pixel/ control data.
 $DE92 DEFB $01,$04,$04,$04,$02,$01         ; }
 $DE98 DEFB $FF                             ; Frame #N$09 terminator.
 $DE99 DEFB $FF                             ; Frame #N$0A terminator.
; Sprite #N$134, Frame #N$0B ($04 bytes).
 $DE9A DEFB $FE,$E0                         ; X/ Y position offsets.
 $DE9C DEFB $30,$40                         ; Pixel/ control data.
 $DE9E DEFB $80                             ; Animation sequence terminator.
; Sprite #N$135, Frame #N$01 ($04 bytes).
 $DE9F DEFB $00,$00                         ; X/ Y position offsets.
 $DEA1 DEFB $00,$00                         ; Pixel/ control data.
 $DEA3 DEFB $FF                             ; Frame #N$01 terminator.
 $DEA4 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$135, Frame #N$03 ($19 bytes).
 $DEA5 DEFB $00,$00                         ; X/ Y position offsets.
 $DEA7 DEFB $05,$1A,$0A,$3D,$C1,$06,$39,$3D ; {Pixel/ control data.
 $DEAF DEFB $22,$20,$20,$30,$50,$B0,$28,$18 ;
 $DEB7 DEFB $08,$04,$04,$00,$00,$00,$00     ; }
 $DEBE DEFB $FF                             ; Frame #N$03 terminator.
 $DEBF DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$135, Frame #N$05 ($19 bytes).
 $DEC0 DEFB $FE,$00                         ; X/ Y position offsets.
 $DEC2 DEFB $00,$00,$00,$00,$00,$01,$01,$01 ; {Pixel/ control data.
 $DECA DEFB $01,$01,$01,$01,$02,$04,$04,$03 ;
 $DED2 DEFB $04,$0C,$08,$00,$00,$00,$00     ; }
 $DED9 DEFB $FF                             ; Frame #N$05 terminator.
 $DEDA DEFB $80                             ; Animation sequence terminator.
; Sprite #N$136, Frame #N$01.
 $DEDB DEFB $00,$00                         ; X/ Y position offsets.
 $DEDD DEFB $E0,$C0,$20,$10,$90,$10,$20,$C0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $DEE5 DEFB $FF                             ; Frame #N$01 terminator.
 $DEE6 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$136, Frame #N$03 ($09 bytes).
 $DEE7 DEFB $00,$8F                         ; X/ Y position offsets.
 $DEE9 DEFB $FD,$B2,$C5,$7F,$84,$02,$01     ; Pixel/ control data.
 $DEF0 DEFB $FF                             ; Frame #N$03 terminator.
 $DEF1 DEFB $FF                             ; Frame #N$04 terminator.
 $DEF2 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$136, Frame #N$06 ($10 bytes).
 $DEF3 DEFB $00,$00                         ; X/ Y position offsets.
 $DEF5 DEFB $00,$00,$00,$18,$D0,$9C,$13,$08 ; {Pixel/ control data.
 $DEFD DEFB $04,$C6,$B8,$17,$20,$C0         ; }
 $DF03 DEFB $FF                             ; Frame #N$06 terminator.
 $DF04 DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$136, Frame #N$08 ($09 bytes).
 $DF05 DEFB $00,$03                         ; X/ Y position offsets.
 $DF07 DEFB $02,$02,$05,$04,$04,$02,$01     ; Pixel/ control data.
 $DF0E DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$136, Frame #N$09.
 $DF0F DEFB $FD,$00                         ; X/ Y position offsets.
 $DF11 DEFB $C0,$60,$10,$00,$00,$00,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $DF19 DEFB $FF                             ; Frame #N$09 terminator.
 $DF1A DEFB $FF                             ; Frame #N$0A terminator.
; Sprite #N$136, Frame #N$0B ($19 bytes).
 $DF1B DEFB $FE,$30                         ; X/ Y position offsets.
 $DF1D DEFB $50,$48,$24,$32,$29,$1D,$11,$62 ; {Pixel/ control data.
 $DF25 DEFB $85,$9F,$50,$48,$28,$26,$11,$27 ;
 $DF2D DEFB $24,$10,$00,$04,$04,$02,$00     ; }
 $DF34 DEFB $FF                             ; Frame #N$0B terminator.
 $DF35 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$137, Frame #N$01.
 $DF36 DEFB $00,$00                         ; X/ Y position offsets.
 $DF38 DEFB $E0,$C0,$20,$10,$90,$10,$20,$C0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $DF40 DEFB $FF                             ; Frame #N$01 terminator.
 $DF41 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$137, Frame #N$03 ($09 bytes).
 $DF42 DEFB $00,$8F                         ; X/ Y position offsets.
 $DF44 DEFB $FD,$B2,$C5,$7F,$84,$02,$01     ; Pixel/ control data.
 $DF4B DEFB $FF                             ; Frame #N$03 terminator.
 $DF4C DEFB $FF                             ; Frame #N$04 terminator.
 $DF4D DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$137, Frame #N$06 ($10 bytes).
 $DF4E DEFB $00,$00                         ; X/ Y position offsets.
 $DF50 DEFB $00,$00,$00,$18,$D0,$9C,$13,$08 ; {Pixel/ control data.
 $DF58 DEFB $04,$C6,$B8,$17,$20,$C0         ; }
 $DF5E DEFB $FF                             ; Frame #N$06 terminator.
 $DF5F DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$137, Frame #N$08 ($09 bytes).
 $DF60 DEFB $00,$03                         ; X/ Y position offsets.
 $DF62 DEFB $02,$02,$05,$04,$04,$02,$01     ; Pixel/ control data.
 $DF69 DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$137, Frame #N$09 (control byte).
 $DF6A DEFB $FC                             ; Control data.
 $DF6B DEFB $FF                             ; Frame #N$09 terminator.
; Sprite #N$137, Frame #N$0A ($10 bytes).
 $DF6C DEFB $00,$00                         ; X/ Y position offsets.
 $DF6E DEFB $00,$04,$08,$31,$66,$A8,$30,$10 ; {Pixel/ control data.
 $DF76 DEFB $C4,$24,$18,$00,$00,$00         ; }
 $DF7C DEFB $FF                             ; Frame #N$0A terminator.
 $DF7D DEFB $FF                             ; Frame #N$0B terminator.
; Sprite #N$137, Frame #N$0C ($19 bytes).
 $DF7E DEFB $FE,$00                         ; X/ Y position offsets.
 $DF80 DEFB $00,$00,$00,$00,$20,$20,$50,$28 ; {Pixel/ control data.
 $DF88 DEFB $14,$2A,$35,$09,$13,$17,$11,$0C ;
 $DF90 DEFB $03,$00,$00,$00,$00,$00,$00     ; }
 $DF97 DEFB $FF                             ; Frame #N$0C terminator.
 $DF98 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$138, Frame #N$01.
 $DF99 DEFB $00,$00                         ; X/ Y position offsets.
 $DF9B DEFB $E0,$C0,$20,$10,$90,$10,$20,$C0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $DFA3 DEFB $FF                             ; Frame #N$01 terminator.
 $DFA4 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$138, Frame #N$03 ($09 bytes).
 $DFA5 DEFB $00,$8F                         ; X/ Y position offsets.
 $DFA7 DEFB $FD,$B2,$C5,$7F,$84,$02,$01     ; Pixel/ control data.
 $DFAE DEFB $FF                             ; Frame #N$03 terminator.
 $DFAF DEFB $FF                             ; Frame #N$04 terminator.
 $DFB0 DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$138, Frame #N$06 ($10 bytes).
 $DFB1 DEFB $00,$00                         ; X/ Y position offsets.
 $DFB3 DEFB $00,$00,$00,$18,$D0,$9C,$13,$08 ; {Pixel/ control data.
 $DFBB DEFB $04,$C6,$B8,$17,$20,$C0         ; }
 $DFC1 DEFB $FF                             ; Frame #N$06 terminator.
 $DFC2 DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$138, Frame #N$08 ($09 bytes).
 $DFC3 DEFB $00,$03                         ; X/ Y position offsets.
 $DFC5 DEFB $02,$02,$05,$04,$04,$02,$01     ; Pixel/ control data.
 $DFCC DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$138, Frame #N$09.
 $DFCD DEFB $FC,$00                         ; X/ Y position offsets.
 $DFCF DEFB $00,$70,$88,$08,$48,$B0,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $DFD7 DEFB $FF                             ; Frame #N$09 terminator.
 $DFD8 DEFB $FF                             ; Frame #N$0A terminator.
; Sprite #N$138, Frame #N$0B (control byte).
 $DFD9 DEFB $00                             ; Control data.
 $DFDA DEFB $80                             ; Animation sequence terminator.
; Sprite #N$139, Frame #N$01 ($07 bytes).
 $DFDB DEFB $40,$3F                         ; X/ Y position offsets.
 $DFDD DEFB $88,$C0,$79,$06,$38             ; Pixel/ control data.
 $DFE2 DEFB $FF                             ; Frame #N$01 terminator.
 $DFE3 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$139, Frame #N$03 ($09 bytes).
 $DFE4 DEFB $00,$01                         ; X/ Y position offsets.
 $DFE6 DEFB $02,$25,$19,$53,$2C,$10,$00     ; Pixel/ control data.
 $DFED DEFB $FF                             ; Frame #N$03 terminator.
 $DFEE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$13A, Frame #N$01 ($04 bytes).
 $DFEF DEFB $02,$FE                         ; X/ Y position offsets.
 $DFF1 DEFB $00,$00                         ; Pixel/ control data.
 $DFF3 DEFB $80                             ; Animation sequence terminator.
 $DFF4 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$13C, Frame #N$01 ($0C bytes).
 $DFF5 DEFB $00,$00                         ; X/ Y position offsets.
 $DFF7 DEFB $08,$90,$20,$20,$C0,$00,$00,$00 ; {Pixel/ control data.
 $DFFF DEFB $00,$00                         ; }
 $E001 DEFB $FF                             ; Frame #N$01 terminator.
 $E002 DEFB $FF                             ; Frame #N$02 terminator.
 $E003 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$13C, Frame #N$04 ($03 bytes).
 $E004 DEFB $00,$00                         ; X/ Y position offsets.
 $E006 DEFB $00                             ; Pixel/ control data.
 $E007 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$13D, Frame #N$01 ($0D bytes).
 $E008 DEFB $41,$41                         ; X/ Y position offsets.
 $E00A DEFB $22,$E2,$82,$84,$84,$C9,$72,$04 ; {Pixel/ control data.
 $E012 DEFB $88,$70,$00                     ; }
 $E015 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$13E, Frame #N$01 (control byte).
 $E016 DEFB $00                             ; Control data.
 $E017 DEFB $80                             ; Animation sequence terminator.
 $E018 DEFB $80                             ; Animation sequence terminator.
 $E019 DEFB $80                             ; Animation sequence terminator.
 $E01A DEFB $80                             ; Animation sequence terminator.
 $E01B DEFB $80                             ; Animation sequence terminator.
 $E01C DEFB $FF                             ; Frame #N$01 terminator.
 $E01D DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$143, Frame #N$03 ($19 bytes).
 $E01E DEFB $FE,$00                         ; X/ Y position offsets.
 $E020 DEFB $38,$47,$88,$98,$88,$50,$31,$12 ; {Pixel/ control data.
 $E028 DEFB $24,$2B,$2C,$2A,$15,$1B,$12,$15 ;
 $E030 DEFB $3F,$55,$9B,$93,$83,$45,$39     ; }
 $E037 DEFB $FF                             ; Frame #N$03 terminator.
 $E038 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$144, Frame #N$01.
 $E039 DEFB $03,$00                         ; X/ Y position offsets.
 $E03B DEFB $00,$E0,$3C,$04,$24,$4C,$E0,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E043 DEFB $FF                             ; Frame #N$01 terminator.
 $E044 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$144, Frame #N$03 (position only).
 $E045 DEFB $FE,$00                         ; X/ Y position offsets.
 $E047 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$145, Frame #N$01 ($16 bytes).
 $E048 DEFB $40,$20                         ; X/ Y position offsets.
 $E04A DEFB $20,$A0,$40,$20,$20,$20,$20,$E0 ; {Pixel/ control data.
 $E052 DEFB $00,$D8,$28,$A8,$98,$9F,$98,$40 ;
 $E05A DEFB $3C,$00,$3F,$00                 ; }
 $E05E DEFB $FF                             ; Frame #N$01 terminator.
 $E05F DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$145, Frame #N$03.
 $E060 DEFB $FE,$00                         ; X/ Y position offsets.
 $E062 DEFB $03,$04,$08,$09,$0F,$18,$20,$40 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E06A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$146, Frame #N$01 ($0E bytes).
 $E06B DEFB $0F,$7A                         ; X/ Y position offsets.
 $E06D DEFB $AD,$C4,$83,$86,$C4,$C5,$82,$00 ; {Pixel/ control data.
 $E075 DEFB $00,$00,$00,$00                 ; }
 $E079 DEFB $FF                             ; Frame #N$01 terminator.
 $E07A DEFB $FF                             ; Frame #N$02 terminator.
 $E07B DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$146, Frame #N$04 ($10 bytes).
 $E07C DEFB $00,$00                         ; X/ Y position offsets.
 $E07E DEFB $01,$01,$01,$3A,$4D,$9A,$93,$83 ; {Pixel/ control data.
 $E086 DEFB $47,$3F,$02,$00,$00,$00         ; }
 $E08C DEFB $FF                             ; Frame #N$04 terminator.
 $E08D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$147, Frame #N$01 (control byte).
 $E08E DEFB $02                             ; Control data.
 $E08F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$147, Frame #N$02 ($10 bytes).
 $E090 DEFB $00,$00                         ; X/ Y position offsets.
 $E092 DEFB $00,$00,$00,$00,$01,$02,$05,$08 ; {Pixel/ control data.
 $E09A DEFB $12,$61,$89,$36,$C0,$00         ; }
 $E0A0 DEFB $FF                             ; Frame #N$02 terminator.
 $E0A1 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$147, Frame #N$04 ($19 bytes).
 $E0A2 DEFB $FE,$00                         ; X/ Y position offsets.
 $E0A4 DEFB $00,$70,$88,$04,$24,$3A,$C2,$81 ; {Pixel/ control data.
 $E0AC DEFB $01,$01,$03,$7C,$98,$68,$96,$C9 ;
 $E0B4 DEFB $25,$13,$C9,$C9,$84,$84,$03     ; }
 $E0BB DEFB $FF                             ; Frame #N$04 terminator.
 $E0BC DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$147, Frame #N$06 ($19 bytes).
 $E0BD DEFB $FE,$00                         ; X/ Y position offsets.
 $E0BF DEFB $00,$00,$00,$01,$01,$01,$00,$00 ; {Pixel/ control data.
 $E0C7 DEFB $01,$01,$02,$04,$08,$09,$1E,$19 ;
 $E0CF DEFB $3F,$4D,$9A,$93,$83,$47,$3B     ; }
 $E0D6 DEFB $FF                             ; Frame #N$06 terminator.
 $E0D7 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$148, Frame #N$01.
 $E0D8 DEFB $00,$00                         ; X/ Y position offsets.
 $E0DA DEFB $E0,$C0,$20,$10,$90,$10,$20,$C0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E0E2 DEFB $FF                             ; Frame #N$01 terminator.
 $E0E3 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$148, Frame #N$03 ($09 bytes).
 $E0E4 DEFB $00,$8F                         ; X/ Y position offsets.
 $E0E6 DEFB $FD,$B2,$C5,$7F,$84,$02,$01     ; Pixel/ control data.
 $E0ED DEFB $FF                             ; Frame #N$03 terminator.
 $E0EE DEFB $FF                             ; Frame #N$04 terminator.
 $E0EF DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$148, Frame #N$06 ($10 bytes).
 $E0F0 DEFB $00,$00                         ; X/ Y position offsets.
 $E0F2 DEFB $00,$00,$00,$18,$D0,$1C,$13,$08 ; {Pixel/ control data.
 $E0FA DEFB $04,$C6,$B8,$17,$20,$C0         ; }
 $E100 DEFB $FF                             ; Frame #N$06 terminator.
 $E101 DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$148, Frame #N$08.
 $E102 DEFB $FE,$00                         ; X/ Y position offsets.
 $E104 DEFB $00,$04,$6B,$54,$A8,$50,$20,$C0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E10C DEFB $80                             ; Animation sequence terminator.
; Sprite #N$149, Frame #N$01 ($0E bytes).
 $E10D DEFB $00,$00                         ; X/ Y position offsets.
 $E10F DEFB $00,$00,$00,$01,$02,$02,$02,$05 ; {Pixel/ control data.
 $E117 DEFB $04,$04,$02,$01                 ; }
 $E11B DEFB $FF                             ; Frame #N$01 terminator.
 $E11C DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$149, Frame #N$03 ($19 bytes).
 $E11D DEFB $FE,$00                         ; X/ Y position offsets.
 $E11F DEFB $00,$00,$00,$07,$08,$0A,$13,$17 ; {Pixel/ control data.
 $E127 DEFB $25,$28,$C8,$88,$88,$48,$08,$90 ;
 $E12F DEFB $10,$00,$00,$00,$00,$00,$00     ; }
 $E136 DEFB $FF                             ; Frame #N$03 terminator.
 $E137 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$14A, Frame #N$01.
 $E138 DEFB $00,$00                         ; X/ Y position offsets.
 $E13A DEFB $E0,$C0,$20,$10,$90,$10,$20,$C0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E142 DEFB $FF                             ; Frame #N$01 terminator.
 $E143 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$14A, Frame #N$03 ($09 bytes).
 $E144 DEFB $00,$8F                         ; X/ Y position offsets.
 $E146 DEFB $FD,$B2,$C5,$7F,$84,$02,$01     ; Pixel/ control data.
 $E14D DEFB $FF                             ; Frame #N$03 terminator.
 $E14E DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$14A, Frame #N$05 ($08 bytes).
 $E14F DEFB $FE,$00                         ; X/ Y position offsets.
 $E151 DEFB $00,$00,$00,$40,$B0,$40         ; Pixel/ control data.
 $E157 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$14B, Frame #N$01 ($10 bytes).
 $E158 DEFB $00,$00                         ; X/ Y position offsets.
 $E15A DEFB $00,$00,$00,$18,$D0,$1C,$13,$08 ; {Pixel/ control data.
 $E162 DEFB $04,$C6,$B8,$17,$20,$C0         ; }
 $E168 DEFB $FF                             ; Frame #N$01 terminator.
 $E169 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$14B, Frame #N$03 ($0D bytes).
 $E16A DEFB $FE,$00                         ; X/ Y position offsets.
 $E16C DEFB $00,$00,$00,$00,$06,$75,$8A,$A5 ; {Pixel/ control data.
 $E174 DEFB $32,$7C,$58                     ; }
 $E177 DEFB $80                             ; Animation sequence terminator.
 $E178 DEFB $80                             ; Animation sequence terminator.
 $E179 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$14E, Frame #N$01 ($09 bytes).
 $E17A DEFB $81,$82                         ; X/ Y position offsets.
 $E17C DEFB $82,$02,$05,$04,$04,$02,$01     ; Pixel/ control data.
 $E183 DEFB $FF                             ; Frame #N$01 terminator.
 $E184 DEFB $FF                             ; Frame #N$02 terminator.
 $E185 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$14E, Frame #N$04 ($10 bytes).
 $E186 DEFB $00,$01                         ; X/ Y position offsets.
 $E188 DEFB $01,$02,$02,$0C,$08,$08,$04,$00 ; {Pixel/ control data.
 $E190 DEFB $09,$01,$00,$00,$00,$00         ; }
 $E196 DEFB $FF                             ; Frame #N$04 terminator.
 $E197 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$14F, Frame #N$01.
 $E198 DEFB $00,$00                         ; X/ Y position offsets.
 $E19A DEFB $E0,$C0,$20,$10,$90,$10,$20,$C0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E1A2 DEFB $FF                             ; Frame #N$01 terminator.
 $E1A3 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$14F, Frame #N$03 ($09 bytes).
 $E1A4 DEFB $00,$8F                         ; X/ Y position offsets.
 $E1A6 DEFB $FD,$B2,$C5,$7F,$84,$02,$01     ; Pixel/ control data.
 $E1AD DEFB $FF                             ; Frame #N$03 terminator.
 $E1AE DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$14F, Frame #N$05 ($19 bytes).
 $E1AF DEFB $FE,$00                         ; X/ Y position offsets.
 $E1B1 DEFB $00,$00,$00,$00,$00,$04,$6B,$54 ; {Pixel/ control data.
 $E1B9 DEFB $A8,$50,$20,$C0,$B0,$D0,$1C,$13 ;
 $E1C1 DEFB $08,$04,$C6,$B8,$17,$20,$C0     ; }
 $E1C8 DEFB $FF                             ; Frame #N$05 terminator.
 $E1C9 DEFB $FF                             ; Frame #N$06 terminator.
 $E1CA DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$14F, Frame #N$08 ($10 bytes).
 $E1CB DEFB $07,$08                         ; X/ Y position offsets.
 $E1CD DEFB $0A,$13,$17,$25,$28,$49,$8A,$AA ; {Pixel/ control data.
 $E1D5 DEFB $4A,$8D,$94,$14,$02,$01         ; }
 $E1DB DEFB $FF                             ; Frame #N$08 terminator.
 $E1DC DEFB $80                             ; Animation sequence terminator.
; Sprite #N$150, Frame #N$01 (control byte).
 $E1DD DEFB $00                             ; Control data.
 $E1DE DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$150, Frame #N$02 ($10 bytes).
 $E1DF DEFB $00,$00                         ; X/ Y position offsets.
 $E1E1 DEFB $00,$00,$00,$00,$00,$F0,$F0,$E0 ; {Pixel/ control data.
 $E1E9 DEFB $10,$88,$C8,$08,$10,$E0         ; }
 $E1EF DEFB $FF                             ; Frame #N$02 terminator.
 $E1F0 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$150, Frame #N$04 ($19 bytes).
 $E1F1 DEFB $FE,$00                         ; X/ Y position offsets.
 $E1F3 DEFB $00,$00,$60,$F0,$90,$F8,$8C,$8C ; {Pixel/ control data.
 $E1FB DEFB $0C,$FC,$C4,$E4,$98,$C0,$D7,$F9 ;
 $E203 DEFB $48,$4F,$EA,$3F,$C2,$32,$70     ; }
 $E20A DEFB $FF                             ; Frame #N$04 terminator.
 $E20B DEFB $FF                             ; Frame #N$05 terminator.
 $E20C DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$150, Frame #N$07 ($10 bytes).
 $E20D DEFB $01,$01                         ; X/ Y position offsets.
 $E20F DEFB $01,$00,$00,$18,$68,$8F,$08,$04 ; {Pixel/ control data.
 $E217 DEFB $02,$E1,$5C,$0B,$10,$E0         ; }
 $E21D DEFB $FF                             ; Frame #N$07 terminator.
 $E21E DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$150, Frame #N$09 ($09 bytes).
 $E21F DEFB $00,$01                         ; X/ Y position offsets.
 $E221 DEFB $01,$01,$02,$02,$02,$01,$00     ; Pixel/ control data.
 $E228 DEFB $FF                             ; Frame #N$09 terminator.
 $E229 DEFB $80                             ; Animation sequence terminator.
 $E22A DEFB $FF                             ; Frame #N$01 terminator.
 $E22B DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$151, Frame #N$03 ($03 bytes).
 $E22C DEFB $00,$00                         ; X/ Y position offsets.
 $E22E DEFB $00                             ; Pixel/ control data.
 $E22F DEFB $80                             ; Animation sequence terminator.
; Sprite #N$152, Frame #N$01 ($0C bytes).
 $E230 DEFB $60,$18                         ; X/ Y position offsets.
 $E232 DEFB $74,$DE,$EE,$7E,$1E,$FE,$9A,$0C ; {Pixel/ control data.
 $E23A DEFB $00,$00                         ; }
 $E23C DEFB $FF                             ; Frame #N$01 terminator.
 $E23D DEFB $FF                             ; Frame #N$02 terminator.
 $E23E DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$152, Frame #N$04 ($10 bytes).
 $E23F DEFB $00,$06                         ; X/ Y position offsets.
 $E241 DEFB $09,$0E,$3E,$42,$41,$81,$C0,$A0 ; {Pixel/ control data.
 $E249 DEFB $E0,$87,$7B,$7A,$72,$3C         ; }
 $E24F DEFB $FF                             ; Frame #N$04 terminator.
 $E250 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$153, Frame #N$01 (control byte).
 $E251 DEFB $FE                             ; Control data.
 $E252 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$153, Frame #N$02 ($10 bytes).
 $E253 DEFB $18,$3C                         ; X/ Y position offsets.
 $E255 DEFB $24,$3E,$79,$45,$45,$A3,$B9,$A9 ; {Pixel/ control data.
 $E25D DEFB $B3,$47,$7E,$7E,$78,$70         ; }
 $E263 DEFB $FF                             ; Frame #N$02 terminator.
 $E264 DEFB $80                             ; Animation sequence terminator.
 $E265 DEFB $FF                             ; Frame #N$01 terminator.
 $E266 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$154, Frame #N$03 (control byte).
 $E267 DEFB $00                             ; Control data.
 $E268 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$155, Frame #N$01 (position only).
 $E269 DEFB $40,$40                         ; X/ Y position offsets.
 $E26B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$156, Frame #N$01 ($06 bytes).
 $E26C DEFB $40,$C0                         ; X/ Y position offsets.
 $E26E DEFB $C0,$40,$40,$40                 ; Pixel/ control data.
 $E272 DEFB $80                             ; Animation sequence terminator.
 $E273 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$158, Frame #N$01 ($03 bytes).
 $E274 DEFB $00,$00                         ; X/ Y position offsets.
 $E276 DEFB $00                             ; Pixel/ control data.
 $E277 DEFB $FF                             ; Frame #N$01 terminator.
 $E278 DEFB $FF                             ; Frame #N$02 terminator.
 $E279 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$158, Frame #N$04 ($10 bytes).
 $E27A DEFB $00,$01                         ; X/ Y position offsets.
 $E27C DEFB $02,$03,$07,$19,$20,$40,$D8,$94 ; {Pixel/ control data.
 $E284 DEFB $C8,$C1,$43,$7F,$FE,$F0         ; }
 $E28A DEFB $FF                             ; Frame #N$04 terminator.
 $E28B DEFB $80                             ; Animation sequence terminator.
 $E28C DEFB $FF                             ; Frame #N$01 terminator.
 $E28D DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$159, Frame #N$03 ($0E bytes).
 $E28E DEFB $00,$00                         ; X/ Y position offsets.
 $E290 DEFB $00,$30,$48,$E8,$78,$38,$28,$28 ; {Pixel/ control data.
 $E298 DEFB $48,$50,$E0,$C0                 ; }
 $E29C DEFB $80                             ; Animation sequence terminator.
; Sprite #N$15A, Frame #N$01 (control byte).
 $E29D DEFB $00                             ; Control data.
 $E29E DEFB $FF                             ; Frame #N$01 terminator.
 $E29F DEFB $FF                             ; Frame #N$02 terminator.
 $E2A0 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$15A, Frame #N$04 ($10 bytes).
 $E2A1 DEFB $00,$00                         ; X/ Y position offsets.
 $E2A3 DEFB $00,$00,$00,$01,$06,$08,$10,$2C ; {Pixel/ control data.
 $E2AB DEFB $2A,$2E,$64,$F0,$F9,$76         ; }
 $E2B1 DEFB $FF                             ; Frame #N$04 terminator.
 $E2B2 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$15B, Frame #N$01 (control byte).
 $E2B3 DEFB $00                             ; Control data.
 $E2B4 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$15B, Frame #N$02 ($06 bytes).
 $E2B5 DEFB $00,$00                         ; X/ Y position offsets.
 $E2B7 DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $E2BB DEFB $80                             ; Animation sequence terminator.
 $E2BC DEFB $80                             ; Animation sequence terminator.
 $E2BD DEFB $FF                             ; Frame #N$01 terminator.
 $E2BE DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$15D, Frame #N$03 ($0F bytes).
 $E2BF DEFB $00,$00                         ; X/ Y position offsets.
 $E2C1 DEFB $00,$00,$00,$00,$03,$FC,$26,$17 ; {Pixel/ control data.
 $E2C9 DEFB $12,$2A,$2A,$54,$C8             ; }
 $E2CE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$15E, Frame #N$01 (control byte).
 $E2CF DEFB $00                             ; Control data.
 $E2D0 DEFB $FF                             ; Frame #N$01 terminator.
 $E2D1 DEFB $FF                             ; Frame #N$02 terminator.
 $E2D2 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$15E, Frame #N$04 ($10 bytes).
 $E2D3 DEFB $00,$00                         ; X/ Y position offsets.
 $E2D5 DEFB $00,$00,$00,$00,$07,$0C,$10,$2C ; {Pixel/ control data.
 $E2DD DEFB $2A,$2C,$64,$F0,$F9,$76         ; }
 $E2E3 DEFB $FF                             ; Frame #N$04 terminator.
 $E2E4 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$15F, Frame #N$01.
 $E2E5 DEFB $00,$00                         ; X/ Y position offsets.
 $E2E7 DEFB $0C,$F2,$02,$0C,$08,$B8,$D0,$60 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E2EF DEFB $FF                             ; Frame #N$01 terminator.
 $E2F0 DEFB $FF                             ; Frame #N$02 terminator.
 $E2F1 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$15F, Frame #N$04 ($10 bytes).
 $E2F2 DEFB $00,$00                         ; X/ Y position offsets.
 $E2F4 DEFB $00,$00,$00,$00,$00,$C0,$20,$10 ; {Pixel/ control data.
 $E2FC DEFB $0D,$0A,$08,$1C,$30,$7F         ; }
 $E302 DEFB $FF                             ; Frame #N$04 terminator.
 $E303 DEFB $FF                             ; Frame #N$05 terminator.
 $E304 DEFB $FF                             ; Frame #N$06 terminator.
; Sprite #N$15F, Frame #N$07 ($10 bytes).
 $E305 DEFB $00,$00                         ; X/ Y position offsets.
 $E307 DEFB $00,$00,$00,$00,$00,$03,$0C,$18 ; {Pixel/ control data.
 $E30F DEFB $33,$65,$F2,$F2,$78,$07         ; }
 $E315 DEFB $FF                             ; Frame #N$07 terminator.
 $E316 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$160, Frame #N$01 ($04 bytes).
 $E317 DEFB $02,$00                         ; X/ Y position offsets.
 $E319 DEFB $00,$00                         ; Pixel/ control data.
 $E31B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$161, Frame #N$01 (position only).
 $E31C DEFB $40,$40                         ; X/ Y position offsets.
 $E31E DEFB $80                             ; Animation sequence terminator.
; Sprite #N$162, Frame #N$01 (position only).
 $E31F DEFB $00,$00                         ; X/ Y position offsets.
 $E321 DEFB $FF                             ; Frame #N$01 terminator.
 $E322 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$162, Frame #N$03 ($09 bytes).
 $E323 DEFB $00,$00                         ; X/ Y position offsets.
 $E325 DEFB $00,$3B,$C0,$02,$CD,$30,$C0     ; Pixel/ control data.
 $E32C DEFB $FF                             ; Frame #N$03 terminator.
 $E32D DEFB $FF                             ; Frame #N$04 terminator.
 $E32E DEFB $FF                             ; Frame #N$05 terminator.
; Sprite #N$162, Frame #N$06 ($10 bytes).
 $E32F DEFB $00,$00                         ; X/ Y position offsets.
 $E331 DEFB $00,$00,$00,$00,$00,$DC,$3C,$1C ; {Pixel/ control data.
 $E339 DEFB $0B,$0C,$08,$1F,$20,$C1         ; }
 $E33F DEFB $FF                             ; Frame #N$06 terminator.
 $E340 DEFB $FF                             ; Frame #N$07 terminator.
 $E341 DEFB $FF                             ; Frame #N$08 terminator.
; Sprite #N$162, Frame #N$09 ($10 bytes).
 $E342 DEFB $00,$00                         ; X/ Y position offsets.
 $E344 DEFB $00,$00,$00,$00,$00,$03,$0C,$18 ; {Pixel/ control data.
 $E34C DEFB $33,$65,$F2,$F0,$78,$07         ; }
 $E352 DEFB $FF                             ; Frame #N$09 terminator.
 $E353 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$163, Frame #N$01.
 $E354 DEFB $01,$00                         ; X/ Y position offsets.
 $E356 DEFB $00,$00,$00,$00,$00,$00,$10,$E0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E35E DEFB $FF                             ; Frame #N$01 terminator.
 $E35F DEFB $FF                             ; Frame #N$02 terminator.
 $E360 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$163, Frame #N$04 ($10 bytes).
 $E361 DEFB $00,$00                         ; X/ Y position offsets.
 $E363 DEFB $00,$00,$20,$60,$D0,$28,$14,$62 ; {Pixel/ control data.
 $E36B DEFB $12,$39,$41,$33,$0D,$3C         ; }
 $E371 DEFB $FF                             ; Frame #N$04 terminator.
 $E372 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$164, Frame #N$01 (control byte).
 $E373 DEFB $01                             ; Control data.
 $E374 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$164, Frame #N$02 ($07 bytes).
 $E375 DEFB $00,$00                         ; X/ Y position offsets.
 $E377 DEFB $00,$00,$00,$00,$00             ; Pixel/ control data.
 $E37C DEFB $80                             ; Animation sequence terminator.
; Sprite #N$165, Frame #N$01 ($08 bytes).
 $E37D DEFB $40,$20                         ; X/ Y position offsets.
 $E37F DEFB $20,$90,$10,$30,$D1,$CE         ; Pixel/ control data.
 $E385 DEFB $FF                             ; Frame #N$01 terminator.
 $E386 DEFB $FF                             ; Frame #N$02 terminator.
 $E387 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$165, Frame #N$04 ($10 bytes).
 $E388 DEFB $00,$00                         ; X/ Y position offsets.
 $E38A DEFB $00,$00,$02,$06,$0D,$02,$01,$06 ; {Pixel/ control data.
 $E392 DEFB $01,$03,$04,$03,$00,$03         ; }
 $E398 DEFB $FF                             ; Frame #N$04 terminator.
 $E399 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$166, Frame #N$01.
 $E39A DEFB $01,$00                         ; X/ Y position offsets.
 $E39C DEFB $00,$00,$10,$E0,$00,$00,$00,$00 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E3A4 DEFB $FF                             ; Frame #N$01 terminator.
 $E3A5 DEFB $FF                             ; Frame #N$02 terminator.
 $E3A6 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$166, Frame #N$04 ($10 bytes).
 $E3A7 DEFB $20,$60                         ; X/ Y position offsets.
 $E3A9 DEFB $D0,$28,$14,$62,$12,$39,$41,$33 ; {Pixel/ control data.
 $E3B1 DEFB $0D,$3C,$00,$00,$00,$00         ; }
 $E3B7 DEFB $FF                             ; Frame #N$04 terminator.
 $E3B8 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$167, Frame #N$01 (control byte).
 $E3B9 DEFB $01                             ; Control data.
 $E3BA DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$167, Frame #N$02 ($03 bytes).
 $E3BB DEFB $00,$00                         ; X/ Y position offsets.
 $E3BD DEFB $00                             ; Pixel/ control data.
 $E3BE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$168, Frame #N$01 ($0C bytes).
 $E3BF DEFB $40,$20                         ; X/ Y position offsets.
 $E3C1 DEFB $20,$90,$10,$30,$D1,$CE,$00,$00 ; {Pixel/ control data.
 $E3C9 DEFB $00,$00                         ; }
 $E3CB DEFB $FF                             ; Frame #N$01 terminator.
 $E3CC DEFB $FF                             ; Frame #N$02 terminator.
 $E3CD DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$168, Frame #N$04 ($10 bytes).
 $E3CE DEFB $02,$06                         ; X/ Y position offsets.
 $E3D0 DEFB $0D,$02,$01,$06,$01,$03,$04,$03 ; {Pixel/ control data.
 $E3D8 DEFB $00,$03,$00,$00,$00,$00         ; }
 $E3DE DEFB $FF                             ; Frame #N$04 terminator.
 $E3DF DEFB $80                             ; Animation sequence terminator.
; Sprite #N$169, Frame #N$01.
 $E3E0 DEFB $00,$FE                         ; X/ Y position offsets.
 $E3E2 DEFB $00,$E0,$10,$08,$48,$08,$10,$E0 ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E3EA DEFB $FF                             ; Frame #N$01 terminator.
 $E3EB DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$169, Frame #N$03 ($09 bytes).
 $E3EC DEFB $00,$00                         ; X/ Y position offsets.
 $E3EE DEFB $00,$01,$02,$02,$02,$01,$00     ; Pixel/ control data.
 $E3F5 DEFB $FF                             ; Frame #N$03 terminator.
 $E3F6 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$16A, Frame #N$01 ($05 bytes).
 $E3F7 DEFB $01,$FE                         ; X/ Y position offsets.
 $E3F9 DEFB $00,$00,$00                     ; Pixel/ control data.
 $E3FC DEFB $80                             ; Animation sequence terminator.
 $E3FD DEFB $80                             ; Animation sequence terminator.
 $E3FE DEFB $80                             ; Animation sequence terminator.
; Sprite #N$16D, Frame #N$01 (position only).
 $E3FF DEFB $00,$00                         ; X/ Y position offsets.
 $E401 DEFB $FF                             ; Frame #N$01 terminator.
 $E402 DEFB $FF                             ; Frame #N$02 terminator.
; Sprite #N$16D, Frame #N$03 ($09 bytes).
 $E403 DEFB $00,$00                         ; X/ Y position offsets.
 $E405 DEFB $0E,$11,$20,$24,$20,$11,$0E     ; Pixel/ control data.
 $E40C DEFB $FF                             ; Frame #N$03 terminator.
 $E40D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$16E, Frame #N$01 ($12 bytes).
 $E40E DEFB $00,$FD                         ; X/ Y position offsets.
 $E410 DEFB $00,$00,$00,$00,$00,$E0,$10,$08 ; {Pixel/ control data.
 $E418 DEFB $48,$08,$10,$E0,$00,$00,$00,$00 ; }
 $E420 DEFB $FF                             ; Frame #N$01 terminator.
 $E421 DEFB $FF                             ; Frame #N$02 terminator.
 $E422 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$16E, Frame #N$04 ($10 bytes).
 $E423 DEFB $00,$00                         ; X/ Y position offsets.
 $E425 DEFB $00,$00,$00,$00,$00,$01,$02,$02 ; {Pixel/ control data.
 $E42D DEFB $01,$00,$00,$00,$00,$00         ; }
 $E433 DEFB $FF                             ; Frame #N$04 terminator.
 $E434 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$16F, Frame #N$01 ($09 bytes).
 $E435 DEFB $01,$FD                         ; X/ Y position offsets.
 $E437 DEFB $00,$00,$00,$00,$00,$00,$00     ; Pixel/ control data.
 $E43E DEFB $80                             ; Animation sequence terminator.
 $E43F DEFB $80                             ; Animation sequence terminator.
 $E440 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$172, Frame #N$01 ($06 bytes).
 $E441 DEFB $00,$00                         ; X/ Y position offsets.
 $E443 DEFB $00,$00,$00,$00                 ; Pixel/ control data.
 $E447 DEFB $FF                             ; Frame #N$01 terminator.
 $E448 DEFB $FF                             ; Frame #N$02 terminator.
 $E449 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$172, Frame #N$04 ($10 bytes).
 $E44A DEFB $00,$00                         ; X/ Y position offsets.
 $E44C DEFB $00,$00,$00,$0E,$11,$20,$24,$20 ; {Pixel/ control data.
 $E454 DEFB $11,$0E,$00,$00,$00,$00         ; }
 $E45A DEFB $FF                             ; Frame #N$04 terminator.
 $E45B DEFB $80                             ; Animation sequence terminator.
; Sprite #N$173, Frame #N$01 ($05 bytes).
 $E45C DEFB $01,$00                         ; X/ Y position offsets.
 $E45E DEFB $00,$00,$00                     ; Pixel/ control data.
 $E461 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$174, Frame #N$01 ($04 bytes).
 $E462 DEFB $40,$20                         ; X/ Y position offsets.
 $E464 DEFB $10,$E0                         ; Pixel/ control data.
 $E466 DEFB $FF                             ; Frame #N$01 terminator.
 $E467 DEFB $FF                             ; Frame #N$02 terminator.
 $E468 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$174, Frame #N$04 ($0F bytes).
 $E469 DEFB $00,$00                         ; X/ Y position offsets.
 $E46B DEFB $00,$00,$E0,$18,$84,$12,$05,$A1 ; {Pixel/ control data.
 $E473 DEFB $09,$22,$85,$14,$04             ; }
 $E478 DEFB $FF                             ; Frame #N$04 terminator.
 $E479 DEFB $FF                             ; Frame #N$05 terminator.
 $E47A DEFB $FF                             ; Frame #N$06 terminator.
 $E47B DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$174, Frame #N$08 ($0C bytes).
 $E47C DEFB $00,$00                         ; X/ Y position offsets.
 $E47E DEFB $00,$00,$01,$06,$08,$12,$20,$24 ; {Pixel/ control data.
 $E486 DEFB $50,$42                         ; }
 $E488 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$175, Frame #N$01 (control byte).
 $E489 DEFB $A4                             ; Control data.
 $E48A DEFB $80                             ; Animation sequence terminator.
; Sprite #N$176, Frame #N$01 (control byte).
 $E48B DEFB $7F                             ; Control data.
 $E48C DEFB $FF                             ; Frame #N$01 terminator.
 $E48D DEFB $80                             ; Animation sequence terminator.
; Sprite #N$177, Frame #N$01 (control byte).
 $E48E DEFB $01                             ; Control data.
 $E48F DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$177, Frame #N$02 ($05 bytes).
 $E490 DEFB $00,$00                         ; X/ Y position offsets.
 $E492 DEFB $00,$00,$00                     ; Pixel/ control data.
 $E495 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$178, Frame #N$01.
 $E496 DEFB $40,$20                         ; X/ Y position offsets.
 $E498 DEFB $50,$10,$90,$28,$54,$42,$41,$7F ; Pixel data (2 character rows × 4
                                            ; bytes each).
 $E4A0 DEFB $FF                             ; Frame #N$01 terminator.
 $E4A1 DEFB $FF                             ; Frame #N$02 terminator.
 $E4A2 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$178, Frame #N$04 ($0F bytes).
 $E4A3 DEFB $00,$00                         ; X/ Y position offsets.
 $E4A5 DEFB $00,$00,$1E,$61,$88,$21,$00,$4A ; {Pixel/ control data.
 $E4AD DEFB $00,$22,$08,$41,$00             ; }
 $E4B2 DEFB $FF                             ; Frame #N$04 terminator.
 $E4B3 DEFB $FF                             ; Frame #N$05 terminator.
 $E4B4 DEFB $FF                             ; Frame #N$06 terminator.
 $E4B5 DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$178, Frame #N$08 ($10 bytes).
 $E4B6 DEFB $00,$00                         ; X/ Y position offsets.
 $E4B8 DEFB $00,$00,$00,$00,$00,$01,$02,$02 ; {Pixel/ control data.
 $E4C0 DEFB $05,$04,$08,$0A,$08,$07         ; }
 $E4C6 DEFB $FF                             ; Frame #N$08 terminator.
 $E4C7 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$179, Frame #N$01 (control byte).
 $E4C8 DEFB $01                             ; Control data.
 $E4C9 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$179, Frame #N$02 ($07 bytes).
 $E4CA DEFB $00,$00                         ; X/ Y position offsets.
 $E4CC DEFB $00,$00,$00,$00,$00             ; Pixel/ control data.
 $E4D1 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$17A, Frame #N$01 ($08 bytes).
 $E4D2 DEFB $40,$20                         ; X/ Y position offsets.
 $E4D4 DEFB $10,$E0,$00,$00,$00,$00         ; Pixel/ control data.
 $E4DA DEFB $FF                             ; Frame #N$01 terminator.
 $E4DB DEFB $FF                             ; Frame #N$02 terminator.
 $E4DC DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$17A, Frame #N$04 ($0B bytes).
 $E4DD DEFB $E0,$18                         ; X/ Y position offsets.
 $E4DF DEFB $84,$12,$05,$A1,$09,$22,$85,$14 ; {Pixel/ control data.
 $E4E7 DEFB $04                             ; }
 $E4E8 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$17A, Frame #N$05 ($04 bytes).
 $E4E9 DEFB $00,$00                         ; X/ Y position offsets.
 $E4EB DEFB $00,$00                         ; Pixel/ control data.
 $E4ED DEFB $FF                             ; Frame #N$05 terminator.
 $E4EE DEFB $FF                             ; Frame #N$06 terminator.
 $E4EF DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$17A, Frame #N$08 ($08 bytes).
 $E4F0 DEFB $01,$06                         ; X/ Y position offsets.
 $E4F2 DEFB $08,$12,$20,$24,$50,$42         ; Pixel/ control data.
 $E4F8 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$17B, Frame #N$01 (control byte).
 $E4F9 DEFB $A4                             ; Control data.
 $E4FA DEFB $80                             ; Animation sequence terminator.
; Sprite #N$17C, Frame #N$01 ($05 bytes).
 $E4FB DEFB $7F,$00                         ; X/ Y position offsets.
 $E4FD DEFB $00,$00,$00                     ; Pixel/ control data.
 $E500 DEFB $FF                             ; Frame #N$01 terminator.
 $E501 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$17D, Frame #N$01 (control byte).
 $E502 DEFB $01                             ; Control data.
 $E503 DEFB $FF                             ; Frame #N$01 terminator.
; Sprite #N$17D, Frame #N$02 (control byte).
 $E504 DEFB $00                             ; Control data.
 $E505 DEFB $80                             ; Animation sequence terminator.
; Sprite #N$17E, Frame #N$01 ($0E bytes).
 $E506 DEFB $40,$20                         ; X/ Y position offsets.
 $E508 DEFB $50,$10,$90,$28,$54,$42,$41,$7F ; {Pixel/ control data.
 $E510 DEFB $00,$00,$00,$00                 ; }
 $E514 DEFB $FF                             ; Frame #N$01 terminator.
 $E515 DEFB $FF                             ; Frame #N$02 terminator.
 $E516 DEFB $FF                             ; Frame #N$03 terminator.
; Sprite #N$17E, Frame #N$04 ($0B bytes).
 $E517 DEFB $1E,$61                         ; X/ Y position offsets.
 $E519 DEFB $88,$21,$00,$4A,$00,$22,$08,$41 ; {Pixel/ control data.
 $E521 DEFB $00                             ; }
 $E522 DEFB $FF                             ; Frame #N$04 terminator.
; Sprite #N$17E, Frame #N$05 ($04 bytes).
 $E523 DEFB $00,$00                         ; X/ Y position offsets.
 $E525 DEFB $00,$00                         ; Pixel/ control data.
 $E527 DEFB $FF                             ; Frame #N$05 terminator.
 $E528 DEFB $FF                             ; Frame #N$06 terminator.
 $E529 DEFB $FF                             ; Frame #N$07 terminator.
; Sprite #N$17E, Frame #N$08 ($10 bytes).
 $E52A DEFB $00,$00                         ; X/ Y position offsets.
 $E52C DEFB $00,$01,$02,$02,$05,$04,$08,$0A ; {Pixel/ control data.
 $E534 DEFB $08,$07,$00,$00,$00,$00         ; }
 $E53A DEFB $FF                             ; Frame #N$08 terminator.
 $E53B DEFB $80,$78,$78,$78,$78,$78,$78,$78
 $E543 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E54B DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E553 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E55B DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E563 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E56B DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E573 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E57B DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E583 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E58B DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E593 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E59B DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5A3 DEFB $78,$78,$78,$78,$78,$78,$78,$0D
 $E5AB DEFB $00,$0B,$FC,$00,$EA,$78,$78,$78
 $E5B3 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5BB DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5C3 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5CB DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5D3 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5DB DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5E3 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5EB DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5F3 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $E5FB DEFB $78,$78,$78,$78,$78

; Data block at E600
b$E600 DEFB $43,$04,$01,$03,$05,$A0,$00,$00
 $E608 DEFB $24,$01,$03,$05,$01,$20,$00,$00
 $E610 DEFB $22,$02,$04,$04,$01,$20,$00,$00
 $E618 DEFB $05,$07,$0B,$04,$01,$40,$00,$00
 $E620 DEFB $04,$02,$02,$04,$01,$C0,$00,$00
 $E628 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E630 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E638 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E640 DEFB $44,$04,$01,$03,$05,$A0,$00,$00
 $E648 DEFB $21,$01,$03,$05,$01,$20,$00,$00
 $E650 DEFB $41,$02,$03,$04,$05,$A0,$00,$00
 $E658 DEFB $45,$06,$0A,$04,$05,$80,$00,$00
 $E660 DEFB $24,$05,$02,$04,$01,$00,$00,$00
 $E668 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E670 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E678 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E680 DEFB $46,$03,$01,$03,$05,$A0,$00,$00
 $E688 DEFB $22,$01,$03,$04,$01,$20,$00,$00
 $E690 DEFB $45,$08,$08,$03,$05,$E0,$00,$00
 $E698 DEFB $25,$04,$03,$05,$01,$60,$00,$00
 $E6A0 DEFB $24,$0B,$04,$04,$01,$60,$00,$00
 $E6A8 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E6B0 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E6B8 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E6C0 DEFB $43,$04,$01,$03,$05,$A0,$00,$00
 $E6C8 DEFB $22,$02,$04,$04,$01,$20,$00,$00
 $E6D0 DEFB $05,$06,$0A,$04,$01,$C0,$00,$00
 $E6D8 DEFB $06,$01,$02,$04,$01,$40,$00,$00
 $E6E0 DEFB $45,$06,$0A,$04,$05,$80,$00,$00
 $E6E8 DEFB $25,$03,$02,$04,$01,$00,$00,$00
 $E6F0 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E6F8 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E700 DEFB $41,$04,$01,$03,$05,$A0,$00,$00
 $E708 DEFB $44,$08,$08,$03,$05,$E0,$00,$00
 $E710 DEFB $43,$07,$06,$04,$05,$E0,$00,$00
 $E718 DEFB $43,$06,$04,$04,$05,$E0,$00,$00
 $E720 DEFB $24,$04,$06,$04,$01,$60,$00,$00
 $E728 DEFB $24,$03,$03,$04,$01,$60,$00,$00
 $E730 DEFB $23,$02,$01,$04,$01,$60,$00,$00
 $E738 DEFB $23,$01,$09,$04,$01,$60,$00,$00
 $E740 DEFB $43,$04,$01,$03,$05,$A0,$00,$00
 $E748 DEFB $23,$02,$04,$04,$01,$20,$00,$00
 $E750 DEFB $44,$03,$06,$04,$05,$80,$00,$00
 $E758 DEFB $44,$01,$07,$04,$05,$80,$00,$00
 $E760 DEFB $24,$07,$08,$04,$01,$00,$00,$00
 $E768 DEFB $42,$04,$09,$04,$05,$E0,$00,$00
 $E770 DEFB $42,$02,$0B,$04,$05,$E0,$00,$00
 $E778 DEFB $22,$03,$0A,$04,$01,$60,$00,$00
 $E780 DEFB $43,$04,$01,$03,$05,$A0,$00,$00
 $E788 DEFB $22,$01,$03,$05,$01,$20,$00,$00
 $E790 DEFB $04,$07,$0B,$04,$01,$40,$00,$00
 $E798 DEFB $03,$02,$03,$04,$01,$C0,$00,$00
 $E7A0 DEFB $44,$06,$0A,$04,$05,$80,$00,$00
 $E7A8 DEFB $23,$03,$02,$04,$01,$00,$00,$00
 $E7B0 DEFB $44,$08,$08,$03,$05,$E0,$00,$00
 $E7B8 DEFB $21,$02,$03,$04,$01,$60,$00,$00
 $E7C0 DEFB $41,$04,$01,$03,$05,$A0,$00,$00
 $E7C8 DEFB $03,$02,$03,$04,$01,$40,$00,$00
 $E7D0 DEFB $02,$01,$0B,$04,$01,$C0,$00,$00
 $E7D8 DEFB $41,$03,$03,$04,$05,$E0,$00,$00
 $E7E0 DEFB $21,$02,$07,$04,$01,$60,$00,$00
 $E7E8 DEFB $21,$01,$0B,$04,$01,$60,$00,$00
 $E7F0 DEFB $22,$02,$08,$04,$01,$00,$00,$00
 $E7F8 DEFB $41,$01,$09,$04,$05,$80,$00,$00

; Initialise Demo Mode
;
; Used by the routine at #R$E80E.
@label=InitialiseDemoMode
c$E800 LD HL,$73B7   ; {Write #R$73B7 to *#R$782C.
 $E803 LD ($782C),HL ; }
 $E806 LD A,$05      ; {Write #N$05 to *#R$7820.
 $E808 LD ($7820),A  ; }
 $E80B JP $6CAA      ; Jump to #R$6CAA.

; Initialise Game
;
; Used by the routine at #R$6D1E.
@label=InitialiseGame
c$E80E LD HL,$FFFF   ; {#REGsp=#N$FFFF.
 $E811 LD SP,HL      ; }
 $E812 CALL $6414    ; Call #R$6414.
 $E815 LD HL,$6828   ; {Write #R$6828 to #R$7850.
 $E818 LD ($7850),HL ; }
; This entry point is used by the routines at #R$73B7 and #R$757E.
@label=StartScreen
*$E81B LD HL,($7850) ; {Write *#R$7850 to *#R$782C.
 $E81E LD ($782C),HL ; }
 $E821 CALL $749C    ; Call #R$749C.
 $E824 CALL $E8E4    ; Call #R$E8E4.
 $E827 XOR A         ; {Write #N$FF to *#R$7820.
 $E828 DEC A         ;
 $E829 LD ($7820),A  ; }
 $E82C CALL $E891    ; Call #R$E891.
; Wait for keyboard input.
@label=StartScreen_Input
*$E82F CALL $6828    ; Call #R$6828.
 $E832 AND A         ; {Jump to #R$E82F until any key is pressed.
 $E833 JR Z,$E82F    ; }
; Should we start the demo mode?
 $E835 BIT 4,A       ; {Call #R$E800 if a key from the top row has been
 $E837 CALL NZ,$E800 ; pressed.}
; Should we display the instructions?
 $E83A BIT 3,A       ; {Jump to #R$E843 if a key from the second row has not
 $E83C JR Z,$E843    ; been pressed.}
 $E83E CALL $ED52    ; Call #R$ED52.
 $E841 JR $E81B      ; Jump to #R$E81B.
; Should we start a new game?
@label=TestStartGame
*$E843 BIT 2,A       ; {Jump to #R$ECAB if a key from the third row has not
 $E845 JP Z,$ECAB    ; been pressed.}
; Else a key from the third row was pressed so handle changing the controls.
 $E848 CALL $EB43    ; Call #R$EB43.
 $E84B JR $E81B      ; Jump to #R$E81B.

; Routine at E84D
;
; Used by the routine at #R$72C3.
c$E84D LD ($783E),HL ; Write #REGhl to *#R$783E.
 $E850 LD A,($7852)  ; #REGa=*#R$7852.
 $E853 AND A         ; {Jump to #R$E85C if #REGa is zero.
 $E854 JR Z,$E85C    ; }
 $E856 DEC A         ; Decrease #REGa by one.
 $E857 LD ($7852),A  ; Write #REGa to *#R$7852.
 $E85A POP HL        ; Restore #REGhl from the stack.
 $E85B RET           ; Return.
*$E85C LD A,($7828)  ; {Return if bit 4 of *#R$7828 is zero.
 $E85F BIT 4,A       ;
 $E861 RET Z         ; }
 $E862 LD A,$4B      ; {Write #N$4B to *#R$7852.
 $E864 LD ($7852),A  ; }
 $E867 LD A,($783D)  ; #REGa=*#R$783C(#N$783D).
 $E86A SUB $08       ; #REGa-=#N$08.
 $E86C LD ($783D),A  ; Write #REGa to *#R$783C(#N$783D).
 $E86F POP HL        ; Restore #REGhl from the stack.
 $E870 RET           ; Return.

; Messaging: Welcome
@label=Messaging_Welcome
t$E871 DEFM "WELCOME TO THE WORLD OF WHEELIE!" ; "#STR(#PC,$04,$20)".

; Display Start Screen
;
; Used by the routine at #R$E80E.
; #UDGTABLE(default,centre) { #PUSHS #SIM(start=$E821,stop=$E8DD) #SCR$02(start-screen) #POPS } UDGTABLE#
;
; .
;
; Colour the top two rows of the attribute buffer with magenta paper and white
; ink.
@label=DisplayStartScreen
c$E891 LD HL,$5800   ; #REGhl=#R$5800(#N$5800) (attribute buffer location).
 $E894 LD B,$40      ; #REGb=#N$40 (counter - two rows).
@label=HeaderAttributes_Loop
*$E896 LD (HL),$1F   ; Write #N$1F (#COLOUR$1F) to *#REGhl.
 $E898 INC L         ; Move to the next column.
 $E899 DJNZ $E896    ; Decrease counter by one and loop back to #R$E896 until
                     ; counter is zero.
; Colour the rest of the rows down to the footer with black paper and yellow
; ink.
 $E89B LD D,H        ; {#REGde=#REGhl+#N$01.
 $E89C LD E,L        ;
 $E89D INC E         ; }
 $E89E LD BC,$01BF   ; #REGbc=#N$01BF.
 $E8A1 LD (HL),$06   ; Write #N$06 (#COLOUR$06) to *#REGhl.
 $E8A3 LDIR          ; Copy #N$06 from #N$5840 to #N$5A00 #N$01BF times.
; Print the "#STR($E871,$04,$20)" messaging.
 $E8A5 EXX           ; Switch to the shadow registers.
 $E8A6 LD DE,$4000   ; #REGde'=#R$4000(#N$4000) (screen buffer location).
 $E8A9 EXX           ; Switch back to the normal registers.
 $E8AA LD HL,$E871   ; #REGhl=#R$E871.
 $E8AD LD B,$20      ; #REGb=#N$20 (length of #R$E871 messaging).
 $E8AF CALL $74D3    ; Call #R$74D3.
; This section of the routine handles the cute row of bike graphics in the top
; of the display.
 $E8B2 LD B,$10      ; #REGb=#N$10 (number of bike UDGs to display).
@label=HeaderBike_Loop
*$E8B4 EXX           ; Switch to the shadow registers.
 $E8B5 LD L,$9C      ; #REGl'=#R$789C(#N$9C).
; Print the left side of the bike graphic.
 $E8B7 CALL $74AA    ; Call #R$74AA.
 $E8BA EXX           ; Switch back to the normal registers.
; Print the right side of the bike graphic.
 $E8BB CALL $74AA    ; Call #R$74AA.
 $E8BE DJNZ $E8B4    ; Decrease counter by one and loop back to #R$E8B4 until
                     ; counter is zero.
; The start screen messaging at #R$A800 is split into #N$04 blocks of text
; #N$40 characters long.
 $E8C0 LD C,$04      ; #REGc=#N$04 (blocks of text).
 $E8C2 EXX           ; Switch to the shadow registers.
 $E8C3 LD DE,$4060   ; #REGde'=#N$4060 (screen buffer location).
 $E8C6 EXX           ; Switch back to the normal registers.
 $E8C7 LD HL,$A800   ; #REGhl=#R$A800.
; This entry point is used by the routine at #R$EB43.
@label=StartScreen_TextLoop
*$E8CA LD B,$40      ; #REGb=#N$40 (length of messaging).
 $E8CC CALL $74D3    ; Call #R$74D3.
 $E8CF EXX           ; Switch to the shadow registers.
 $E8D0 LD A,E        ; {Jump to #R$E8D6 if #REGe is not zero.
 $E8D1 AND A         ;
 $E8D2 JR NZ,$E8D6   ; }
 $E8D4 LD D,$48      ; #REGd=#N$48.
@label=StartScreen_SkipRow
*$E8D6 ADD A,$20     ; Add #N$20 to leave a blank row between the blocks of
                     ; text.
 $E8D8 LD E,A        ; #REGe=#REGa.
 $E8D9 EXX           ; Switch back to the normal registers.
 $E8DA DEC C         ; Decrease #REGc by one.
 $E8DB JR NZ,$E8CA   ; Jump to #R$E8CA until #REGc is zero.
 $E8DD JP $EBE6      ; Jump to #R$EBE6.

; Unused
u$E8E0 DEFB $20,$E3,$C9,$00

; Display Pink Footer
;
; Used by the routine at #R$E80E.
;
; .
;
; This routine moves the data at #R$A900 to the screen buffer (to draw the
; start page footer).
@label=DisplayPinkFooter
c$E8E4 LD DE,$5000   ; #REGde=#N$5000 (screen buffer location).
 $E8E7 LD HL,$A900   ; #REGhl=#R$A900.
 $E8EA LD BC,$0800   ; #REGbc=#N($0800,$04,$04) (counter).
 $E8ED LDIR          ; Copy the footer graphic data to the screen buffer,
                     ; decrease the counter, repeat until zero.
 $E8EF LD D,$5A      ; #REGde=#N$5A00 (attribute buffer location).
 $E8F1 LD B,$01      ; #REGb=#N$01 (counter).
 $E8F3 LDIR          ; Copy the footer attribute data to the attribute buffer,
                     ; decrease the counter, repeat until zero.
 $E8F5 RET           ; Return.

; Get Kempston Joystick Input
;
; Input method; used by the routine at #R$6B48.
@label=KempstonJoystickInput
c$E8F6 IN A,($1F)    ; Read Kempston Joystick input.
 $E8F8 RET           ; Return.

; Unused
u$E8F9 DEFB $78,$78,$78,$78,$78,$78,$78

; Messaging: Control Selection
@label=Messaging_ControlSelection
t$E900 DEFM " PRESS TOP ROW FOR STANDARD MODE" ; {Wheelie control selection
 $E920 DEFM "       (SEE INSTRUCTIONS)       " ; page.
 $E940 DEFM " PRESS 2ND ROW FOR THE KEMPSTON " ;
 $E960 DEFM "       JOYSTICK INTERFACE       " ;
 $E980 DEFM " PRESS 3RD ROW FOR AGF INTERFACE" ; }
@label=Messaging_Blank
 $E9A0 DEFM "                                " ; {Empty blanking space.
 $E9C0 DEFM "                                " ; }
 $E9E0 DEFM "PRESS BOTTOM ROW TO SELECT OTHER"
@label=Messaging_ChangeControls
 $EA00 DEFM " PRESS KEY (MOVE JOYSTICK) FOR  " ; Change controls for (#R$EA60,
                                               ; #R$EA80, #R$EAA0, #R$EAC0,
                                               ; #R$EAE0).
@label=Messaging_Warning
 $EA20 DEFM " HANDS OFF KEYBOARD (OR JOYSTICK" ; {Warning message.
 $EA40 DEFM "           TO CENTRE)           " ; }
@label=Messaging_Left
 $EA60 DEFM "              LEFT              " ; "#STR(#PC,$04,$20)".
@label=Messaging_Right
 $EA80 DEFM "              RIGHT             " ; "#STR(#PC,$04,$20)".
@label=Messaging_Up
 $EAA0 DEFM "               UP               " ; "#STR(#PC,$04,$20)".
@label=Messaging_Down
 $EAC0 DEFM "              DOWN              " ; "#STR(#PC,$04,$20)".
@label=Messaging_Freeze
 $EAE0 DEFM "  FREEZE(=JOYSTICK FIRE BUTTON) " ; "#STR(#PC,$04,$20)".

; User-Defined Keys Input
@label=UserDefinedKeysInput
b$EB00 DEFB $FD,$36,$07,$00,$FD,$CB,$30,$DE
 $EB08 DEFB $21,$3B,$5C,$AF,$CB,$6E,$CB,$AE
 $EB10 DEFB $2E,$08,$28,$01,$7E,$21,$53,$78
 $EB18 DEFB $06,$00,$00,$00,$00,$00,$00,$BE
 $EB20 DEFB $20,$02,$06,$02,$2C,$BE,$20,$02
 $EB28 DEFB $06,$01,$2C,$BE,$20,$02,$06,$08
 $EB30 DEFB $2C,$BE,$20,$02,$06,$04,$2C,$BE
 $EB38 DEFB $20,$02,$06,$10,$2C,$7E,$B0,$70
 $EB40 DEFB $C9,$00,$00

; Display Change Controls
;
; Used by the routine at #R$E80E.
; #PUSHS #UDGTABLE(default,centre) {
;   #SIM(start=$E821,stop=$E8C0)#SIM(start=$EB43,stop=$E8DD)
;   #SCR$02(change-controls)
; } UDGTABLE# #POPS
@label=DisplayChangeControls
c$EB43 LD HL,$E900     ; #REGhl=#R$E900.
 $EB46 LD C,$04        ; #REGc=#N$04 (four "blocks" of text).
 $EB48 EXX             ; Switch to the shadow registers.
 $EB49 LD DE,$4060     ; #REGde'=#N$4060 (screen buffer location).
 $EB4C EXX             ; Switch to the shadow registers.
; Re-use the same printing routine as the start screen.
 $EB4D CALL $E8CA      ; Call #R$E8CA.
 $EB50 LD HL,$0101     ; {#HTML(Write #N$01 to <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C09.html">*REPDEL</a>
 $EB53 LD ($5C09),HL   ; and #N$01 to <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C0A.html">*REPPER</a>.)
                       ; }
; Add a little pause to debounce the keypress from the previous page.
 $EB56 LD HL,$0000     ; #REGhl=#N($0000,$04,$04).
@label=ChangeControls_DebounceLoop
*$EB59 DEC HL          ; Decrease #REGhl by one.
 $EB5A LD A,H          ; {Jump to #R$EB59 until #REGhl is zero.
 $EB5B OR L            ;
 $EB5C JR NZ,$EB59     ; }
; Get input from the keyboard.
@label=ChangeControls_InputLoop
*$EB5E CALL $6828      ; Call #R$6828.
 $EB61 AND A           ; {Jump to #R$EB5E until any key is pressed.
 $EB62 JR Z,$EB5E      ; }
; Test if "keyboard/ standard" control has been selected.
 $EB64 LD HL,$6828     ; #REGhl=#R$6828.
 $EB67 BIT 4,A         ; {Jump to #R$EB6F if a key from the top row has not
 $EB69 JR Z,$EB6F      ; been pressed.}
; Write the selected control method to *#R$7850.
@label=SetControlMethod
*$EB6B LD ($7850),HL   ; Write #REGhl to *#R$7850.
 $EB6E RET             ; Return.
; Test if "kempston joystick" control has been selected.
@label=ChangeControls_TestIfKempston
*$EB6F LD HL,$E8F6     ; #REGhl=#R$E8F6.
 $EB72 BIT 3,A         ; {Jump to #R$EB6B if a key from the second row has been
 $EB74 JR NZ,$EB6B     ; pressed.}
; Handle both AGF interface and "other" (user defined keys) selections.
 $EB76 LD HL,$EB00     ; #REGhl=#R$EB00.
 $EB79 LD ($7850),HL   ; Write #REGhl to *#R$7850.
 $EB7C BIT 2,A         ; {Jump to #R$EC1E if a key from the third row has been
 $EB7E JP NZ,$EC1E     ; pressed.}
 $EB81 NOP             ; No operation.
 $EB82 NOP             ; No operation.
; Ask the user to set user-defined keys.
; .
; #PUSHS #UDGTABLE(default,centre) {
;   #SIM(start=$749C,stop=$74A8)#SIM(start=$EB86,stop=$EBB3)
;   #SCR$02(user-defined-left)
; } UDGTABLE# #POPS
 $EB83 CALL $EBE3      ; Call #R$EBE3.
; Set the attributes.
 $EB86 LD HL,$5900     ; #REGhl=#N$5900 (attribute buffer location).
 $EB89 LD B,$40        ; #REGb=#N$40 (counter; two rows of text).
@label=UserDefinedControls_ColourLoop
*$EB8B LD (HL),$85     ; Write #N$85 (#COLOUR$85) to *#REGhl.
 $EB8D INC L           ; Increment #REGl by one.
 $EB8E DJNZ $EB8B      ; Decrease counter by one and loop back to #R$EB8B until
                       ; counter is zero.
; Set the screen buffer position.
 $EB90 EXX             ; Switch to the shadow registers.
 $EB91 LD D,$48        ; #REGd'=#N$48.
 $EB93 EXX             ; Switch back to the normal registers.
; Loop through each control and allow the user to set it.
 $EB94 LD B,$05        ; #REGb=#N$05 (counter; five controls to select).
 $EB96 LD HL,$EA60     ; #REGhl=#R$EA60.
 $EB99 LD DE,$7853     ; #REGde=#R$7853.
@label=UserDefinedControls_Loop
*$EB9C PUSH BC         ; Stash the control counter on the stack.
; Reset the screen buffer position.
 $EB9D EXX             ; Switch to the shadow registers.
 $EB9E LD E,$20        ; #REGe'=#N$20.
 $EBA0 EXX             ; Switch back to the normal registers.
; Print the control select message to the screen.
 $EBA1 LD B,$20        ; #REGb=#N$20 (counter; number of characters to print
                       ; for this control).
 $EBA3 CALL $74D3      ; Call #R$74D3.
 $EBA6 PUSH HL         ; Stash control messaging pointer on the stack.
; Reset the screen buffer position.
 $EBA7 EXX             ; Switch to the shadow registers.
 $EBA8 LD E,$00        ; #REGe'=#N$00.
 $EBAA EXX             ; Switch to the normal registers.
 $EBAB LD HL,$EA00     ; #REGhl=#R$EA00.
 $EBAE LD B,$20        ; #REGb=#N$20 (counter; length of "change controls"
                       ; string).
 $EBB0 CALL $74D3      ; Call #R$74D3.
 $EBB3 LD (IY+$07),$00 ; Write #N$07 to *#REGiy+#N$07.
 $EBB7 SET 3,(IY+$30)  ; Set bit 3 of *#REGix+#N$30.
 $EBBB LD HL,$5C3B     ; #HTML(#REGhl=<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3B.html">FLAGS</a>.)
 $EBBE RES 5,(HL)      ; Reset bit 5 of *#REGhl.
@label=UserDefinedControls_InputLoop
*$EBC0 RST $38         ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>)
 $EBC1 BIT 5,(HL)      ; {Jump to #R$EBC0 until any key is pressed.
 $EBC3 JR Z,$EBC0      ; }
; Fetch the user keypress.
 $EBC5 LD A,($5C08)    ; #HTML(#REGa=<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C08.html">*LAST_K</a>.)
 $EBC8 LD (DE),A       ; Write the keypress to the current position in
                       ; *#R$7853.
 $EBC9 INC E           ; Move onto the next control key.
; Warn the user that we debounce using pauses rather than wait for the key to
; be released.
; .
; #PUSHS #UDGTABLE(default,centre) {
;   #SIM(start=$749C,stop=$74A8)#SIM(start=$EB86,stop=$EBB3)#SIM(start=$EBCA,stop=$EBD6)
;   #SCR$02(user-defined-warning)
; } UDGTABLE# #POPS
 $EBCA LD HL,$EA20     ; #REGhl=#R$EA20.
 $EBCD LD B,$40        ; #REGb=#N$40 (counter; number of characters in the
                       ; warning messaging).
; Set the screen buffer position.
 $EBCF EXX             ; Switch to the shadow registers.
 $EBD0 LD E,$00        ; #REGe'=#N$00.
 $EBD2 EXX             ; Switch back to the normal registers.
 $EBD3 CALL $74D3      ; Call #R$74D3.
 $EBD6 NOP             ; No operation.
 $EBD7 NOP             ; No operation.
 $EBD8 NOP             ; No operation.
 $EBD9 CALL $EBE6      ; Debounce using #R$EBE6.
 $EBDC NOP             ; No operation.
 $EBDD NOP             ; No operation.
 $EBDE POP HL          ; {Restore control messaging pointer and control counter
 $EBDF POP BC          ; from the stack.}
 $EBE0 DJNZ $EB9C      ; Decrease control counter by one and loop back to
                       ; #R$EB9C until counter is zero.
 $EBE2 RET             ; Return.

; Clear Screen And Pause
;
; Used by the routine at #R$EB43.
@label=ClearScreen_Pause
c$EBE3 CALL $749C    ; Call #R$749C.
; Continue on to #R$EBE6.

; Long Pause
;
; Used by the routines at #R$E891, #R$EB43, #R$ECAB and #R$ED52.
;
; .
;
; Countdown from #N$FFFF to #N($0000,$04,$04) a total of #N$05 times. This is
; creating a big pause of ~3 seconds before allowing input.
@label=PauseLong
c$EBE6 LD B,$05      ; #REGb=#N$05 (counter).
 $EBE8 LD HL,$0000   ; #REGhl=#N($0000,$04,$04).
@label=PauseLong_Loop
*$EBEB DEC HL        ; Decrease #REGhl by one.
 $EBEC LD A,H        ; {Jump to #R$EBEB until #REGhl is zero.
 $EBED OR L          ;
 $EBEE JR NZ,$EBEB   ; }
 $EBF0 DJNZ $EBEB    ; Decrease counter by one and loop back to #R$EBEB until
                     ; counter is zero.
 $EBF2 RET           ; Return.

; Frame Synchronisation
;
; Used by the routine at #R$763C.
@label=WaitForNextFrame
c$EBF3 LD A,($785A)  ; #REGa=*#R$785A.
; This entry point is used by the routine at #R$6CAA.
@label=WaitForFrameChange
*$EBF6 LD HL,$5C78   ; #HTML(#REGhl=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>.)
; Wait loop, hold further execution until the frame counter changes to
; the stored value.
@label=FrameSyncLoop
*$EBF9 CP (HL)       ; {#HTML(Keep jumping back to #R$EBF9 until
 $EBFA JR NZ,$EBF9   ; <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>
                     ; matches *#R$785A.)}
 $EBFC JP $6C00      ; Jump to #R$6C00.

; Unused
u$EBFF DEFB $00

; Frame Synchronisation Check
;
; Check if this is a new video frame and jump to the game loop if it is.
@label=FrameSyncCheck
c$EC00 EXX           ; Switch to the shadow registers.
 $EC01 LD C,A        ; Save the #REGa register to #REGc' temporarily.
 $EC02 LD A,($785A)  ; {#HTML(Compare *#R$785A to
 $EC05 LD HL,$5C78   ; <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>
 $EC08 CP (HL)       ; ).}
 $EC09 LD A,C        ; Restore #REGa back to its original value.
 $EC0A EXX           ; Switch back to the normal registers.
 $EC0B RET NZ        ; Return if this is still the same frame.
 $EC0C JP $6C00      ; Jump to #R$6C00 if a new frame has started.

; Routine at EC0F
;
; Used by the routine at #R$76D7.
c$EC0F LD HL,$FA40   ; #REGhl=#R$FA40.
 $EC12 LD DE,$0008   ; #REGde=#N($0008,$04,$04).
 $EC15 LD B,$50      ; #REGb=#N$50.
*$EC17 SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $EC19 ADD HL,DE     ; #REGhl+=#REGde.
 $EC1A DJNZ $EC17    ; Decrease counter by one and loop back to #R$EC17 until
                     ; counter is zero.
 $EC1C RET           ; Return.

; Unused
u$EC1D DEFB $00

; Set AGF Interface Controller
;
; Used by the routine at #R$EB43.
@label=SetAGFController
c$EC1E LD HL,$785B   ; #REGhl=#R$785B.
 $EC21 LD DE,$7853   ; #REGde=#R$7853.
 $EC24 LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
 $EC27 LDIR          ; Copy #N$05 bytes of controls data from #R$785B to
                     ; #R$7853.
 $EC29 RET           ; Return.

; Routine at EC2A
;
; Used by the routine at #R$76D7.
c$EC2A LD HL,$7839   ; {Write #N$01 to *#R$7839.
 $EC2D LD (HL),$01   ; }
 $EC2F LD HL,$7840   ; #REGhl=#R$7840.
 $EC32 JP $775F      ; Jump to #R$775F.

; Play Melody
;
; Used by the routines at #R$EC5E, #R$EC63 and #R$EC68.
;
; HL Pointer to music data
@label=PlayMelody
c$EC35 DI            ; Disable interrupts.
 $EC36 XOR A         ; #REGa=#N$00.
@label=FetchNote
*$EC37 LD C,(HL)     ; #REGc=*#REGhl.
; Check for the terminator (#N$FF).
 $EC38 INC C         ; Increment #REGc by one.
 $EC39 JR NZ,$EC3D   ; Jump to #R$EC3D if #REGc is not zero.
; The terminator (#N$FF) was reached so return.
 $EC3B EI            ; Enable interrupts.
 $EC3C RET           ; Return.
; Restore the real value of the note after the terminator check.
@label=PlayingMelody
*$EC3D DEC C         ; Decrease #REGc by one.
 $EC3E INC HL        ; Increment the music data pointer by one.
 $EC3F LD E,(HL)     ; #REGe=*#REGhl.
 $EC40 INC HL        ; Increment the music data pointer by one.
 $EC41 LD D,(HL)     ; #REGd=*#REGhl.
 $EC42 INC HL        ; Increment the music data pointer by one.
@label=PlayMelody_Speaker
*$EC43 OUT ($FE),A   ; OUT #N$FE
 $EC45 LD B,C        ; #REGb=#REGc.
 $EC46 XOR %00010000 ; Flip bit 4.
@label=PlayMelody_Loop
*$EC48 DJNZ $EC48    ; Decrease counter by one and loop back to #R$EC48 until
                     ; counter is zero.
 $EC4A LD B,A        ; #REGb=#REGa.
 $EC4B DEC DE        ; Decrease #REGde by one.
 $EC4C LD A,D        ; {Is #REGde zero?
 $EC4D OR E          ; }
 $EC4E LD A,B        ; #REGa=#REGb.
 $EC4F JR NZ,$EC43   ; Jump to #R$EC43 if #REGde is not zero.
 $EC51 LD D,$0F      ; #REGd=#N$0F.
@label=PlayMelody_Pause
*$EC53 DEC DE        ; Decrease #REGde by one.
 $EC54 LD A,D        ; {Is #REGde zero?
 $EC55 OR E          ; }
 $EC56 JR NZ,$EC53   ; Jump to #R$EC53 if #REGde is not zero.
 $EC58 LD A,B        ; #REGa=#REGb.
 $EC59 INC A         ; Increment #REGa by one.
 $EC5A AND %00010111 ; Keep only bits 0-2 and 4.
 $EC5C JR $EC37      ; Jump to #R$EC37.

; Sounds: Level Complete
;
; Used by the routine at #R$76D7.
;
; .
;
; #HTML(#AUDIO(level-complete.wav)(#INCLUDE(LevelComplete)))
@label=Sounds_LevelComplete
c$EC5E LD HL,$EEE8   ; #REGhl=#R$EEE8.
 $EC61 JR $EC35      ; Jump to #R$EC35.

; Sounds: The Race Is On!
;
; Used by the routine at #R$76D7.
;
; .
;
; #HTML(#AUDIO(race-is-on.wav)(#INCLUDE(RaceIsOn)))
@label=Sounds_TheRaceIsOn
c$EC63 LD HL,$EF4F   ; #REGhl=#R$EF4F.
 $EC66 JR $EC35      ; Jump to #R$EC35.

; Sounds: Ghostrider Has Finished
;
; Used by the routine at #R$77E0.
;
; .
;
; #HTML(#AUDIO(ghostrider-finished.wav)(#INCLUDE(GhostriderFinished)))
@label=Sounds_GhostriderFinished
c$EC68 LD HL,$EFC2   ; #REGhl=#R$EFC2.
 $EC6B JR $EC35      ; Jump to #R$EC35.

; Unused
u$EC6D DEFB $00

; Player Typed Input
;
; Used by the routine at #R$ECAB.
@label=PlayerTypedInput
c$EC6E LD (IY+$07),$00 ; #HTML(Write #N$00 (cursor type "C", "K" or "L") to
                       ; *<a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C41.html">MODE</a>.)
 $EC72 SET 3,(IY+$30)  ; #HTML(Set CAPS LOCK on, using bit 3 of *<a
                       ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C6A.html">FLAGS2</a>).
 $EC76 LD HL,$5C3B     ; {#HTML(Reset bit 5 of
 $EC79 RES 5,(HL)      ; *<a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3B.html">FLAGS</a>
                       ; which resets "when a new key has been pressed".)}
@label=PlayerTypedInput_Loop
*$EC7B BIT 5,(HL)      ; {Keep jumping back to #R$EC7B until a key was pressed.
 $EC7D JR Z,$EC7B      ; }
; Check which key was pressed.
 $EC7F LD A,($5C08)    ; #HTML(#REGa=<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C08.html">*LAST_K</a>.)
 $EC82 CP $80          ; {Jump to #N$EC6F if the ASCII value of the pressed key is #N$80 or
 $EC84 JR NC,$EC6F     ; higher (anything higher is invalid).}
 $EC86 CP $60          ; {Return if the ASCII value is #N$60 or lower.
 $EC88 RET C           ; }
 $EC89 RES 5,A         ; Reset bit 5 of #REGa.
 $EC8B RET             ; Return.

; Unused
u$EC8C DEFB $00,$00

; Print Instructions
;
; Used by the routine at #R$ED52.
;
; HL Instructions page pointer
@label=PrintInstructions
c$EC8E EXX           ; Switch to the shadow registers.
 $EC8F LD DE,$4060   ; #REGde'=#N$4060 (screen buffer location).
 $EC92 EXX           ; Switch back to the normal registers.
 $EC93 LD B,$A0      ; #REGb=#N$A0 (counter; length of text).
 $EC95 CALL $74D3    ; Call #R$74D3.
 $EC98 EXX           ; Switch to the shadow registers.
 $EC99 LD DE,$4800   ; #REGde'=#N$4800 (screen buffer location).
 $EC9C EXX           ; Switch back to the normal registers.
 $EC9D CALL $74D3    ; Call #R$74D3.
 $ECA0 EXX           ; Switch to the shadow registers.
 $ECA1 LD DE,$5000   ; #REGde'=#N$5000 (screen buffer location).
 $ECA4 EXX           ; Switch back to the normal registers.
 $ECA5 LD B,$E0      ; #REGb=#N$E0 (counter; length of text).
 $ECA7 CALL $74D3    ; Call #R$74D3.
 $ECAA RET           ; Return.

; Check Password
;
; Used by the routine at #R$E80E.
@label=CheckPassword
c$ECAB LD HL,$0A23   ; {#HTML(Write #N$0A23 to <a rel="noopener nofollow"
 $ECAE LD ($5C09),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C09.html">*REPDEL</a>/<a
                     ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C0A.html">*REPPER</a>.)
                     ; }
 $ECB1 CALL $749C    ; Call #R$749C.
; Set the attributes for the code entry messaging.
 $ECB4 LD HL,$5900   ; #REGhl=#N$5900 (attribute buffer location).
 $ECB7 LD B,$40      ; #REGb=#N$40 (counter; two full rows).
@label=CheckPassword_GreenLoop
*$ECB9 LD (HL),$04   ; Write #N$04 (#COLOUR$04) to *#REGhl.
 $ECBB INC L         ; Increment #REGl by one.
 $ECBC DJNZ $ECB9    ; Decrease counter by one and loop back to #R$ECB9 until
                     ; counter is zero.
; Print "#STR($EE14,$03,$20)" to the screen.
 $ECBE EXX           ; Switch to the shadow registers.
 $ECBF LD DE,$4800   ; #REGde'=#N$4800 (screen buffer location).
 $ECC2 EXX           ; Switch back to the normal registers.
 $ECC3 LD B,$40      ; #REGb=#N$40 (counter; two full rows).
 $ECC5 LD HL,$EE14   ; #REGhl=#R$EE14.
 $ECC8 CALL $74D3    ; Call #R$74D3.
 $ECCB CALL $EC6E    ; Call #R$EC6E.
 $ECCE CP $0D        ; {Jump to #R$ECDB if #REGa is not equal to #N$0D
 $ECD0 JR NZ,$ECDB   ; ("ENTER").}
; The player pressed the "ENTER" key to skip entering a code.
@label=StartGame
*$ECD2 LD HL,$0101   ; {#HTML(Write #N$01 to <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C09.html">*REPDEL</a>
 $ECD5 LD ($5C09),HL ;           and #N$01 to <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C0A.html">*REPPER</a>.)
                     ; }
 $ECD8 JP $6CAA      ; Jump to #R$6CAA.
; The player is entering a password to access a later level.
@label=CheckPassword_Input
*$ECDB LD DE,$782E   ; #REGde=#R$782E.
 $ECDE LD (DE),A     ; Write #REGa to *#REGde.
 $ECDF EXX           ; Switch to the shadow registers.
 $ECE0 LD E,$20      ; #REGe'=#N$20.
 $ECE2 EXX           ; Switch back to the normal registers.
 $ECE3 LD HL,$E9A0   ; #REGhl=#R$E9A0.
 $ECE6 LD B,$20      ; #REGb=#N$20.
 $ECE8 CALL $74D3    ; Call #R$74D3.
 $ECEB LD B,$04      ; #REGb=#N$04.
 $ECED LD HL,$EEB4   ; #REGhl=#R$EEB4.
; Updates the number suffix in the messaging.
@label=NumberSuffix
*$ECF0 EXX           ; Switch to the shadow registers.
 $ECF1 LD E,$09      ; #REGe'=#N$09.
 $ECF3 EXX           ; Switch back to the normal registers.
 $ECF4 PUSH BC       ; Stash #REGbc on the stack.
 $ECF5 LD B,$03      ; #REGb=#N$03 (counter; length of number suffix
                     ; messaging).
 $ECF7 CALL $74D3    ; Call #R$74D3.
 $ECFA POP BC        ; Restore #REGbc from the stack.
 $ECFB PUSH HL       ; Stash #REGhl on the stack.
 $ECFC CALL $EC6E    ; Call #R$EC6E.
 $ECFF POP HL        ; Restore #REGhl from the stack.
 $ED00 INC E         ; Increment #REGe by one.
 $ED01 LD (DE),A     ; Write #REGa to *#REGde.
 $ED02 DJNZ $ECF0    ; Decrease counter by one and loop back to #R$ECF0 until
                     ; counter is zero.
; Test if any of the passwords match the input.
 $ED04 LD C,$07      ; #REGc=#N$07 (counter; there are seven passwords).
 $ED06 LD HL,$EEC0   ; #REGhl=#R$EEC0.
@label=CheckPassword_Loop
*$ED09 LD E,$2E      ; Reset the user input held by #REGde back to the start of
                     ; the string (#R$782E).
 $ED0B LD B,$05      ; #REGb=#N$05 (counter; length of a password string).
@label=CheckLetter_Loop
*$ED0D LD A,(DE)     ; Fetch a letter of the user-entered password string.
 $ED0E INC E         ; Increment the user-entered input pointer by one.
 $ED0F CP (HL)       ; {Jump to #R$ED1D if #REGa is not equal to *#REGhl.
 $ED10 JR NZ,$ED1D   ; }
; There's a match, move onto the next letter of this password.
 $ED12 INC HL        ; Increment #REGhl by one.
 $ED13 DJNZ $ED0D    ; Decrease counter by one and loop back to #R$ED0D until
                     ; counter is zero.
; Success! This password is a match!
 $ED15 LD A,$07      ; #REGa=#N$07 (maximum levels).
; The position in the password list counts down from #N$07 so this negatively
; correlates with the level number.
 $ED17 SUB C         ; #REGa-=#REGc.
 $ED18 LD ($7820),A  ; Write #REGa to *#R$7820.
 $ED1B JR $ECD2      ; Jump to #R$ECD2.
; This password didn't match, move onto the next one.
@label=NextPassword
*$ED1D INC HL        ; Increment #REGhl by one.
 $ED1E DJNZ $ED1D    ; Decrease counter by one and loop back to #R$ED1D until
                     ; counter is zero.
; Are we out of passwords to check yet?
 $ED20 DEC C         ; Decrease #REGc by one.
 $ED21 JR NZ,$ED09   ; Jump to #R$ED09 until #REGc is zero.
; All passwords have been checked, let the player know their password was
; entered incorrectly.
 $ED23 EXX           ; Switch to the shadow registers.
 $ED24 LD E,$00      ; #REGe'=#N$00.
 $ED26 EXX           ; Switch back to the normal registers.
 $ED27 LD HL,$EE54   ; #REGhl=#R$EE54.
 $ED2A LD B,$20      ; #REGb=#N$20 (counter; length of mistake string).
 $ED2C CALL $74D3    ; Call #R$74D3.
 $ED2F CALL $EBE6    ; Debounce using #R$EBE6.
 $ED32 JP $ECAB      ; Jump to #R$ECAB.

; Unused
u$ED35 DEFB $00,$00,$00,$00

; Get Level Password
;
; Used by the routine at #R$76D7.
@label=GetLevelPassword
c$ED39 CALL $7552    ; Call #R$7552.
; Create an offset using #REGbc.
 $ED3C LD A,($7820)  ; {#REGc=*#R$7820*#N$05.
 $ED3F LD B,A        ;
 $ED40 ADD A,A       ;
 $ED41 ADD A,A       ;
 $ED42 ADD A,B       ;
 $ED43 LD C,A        ; }
 $ED44 LD B,$00      ; #REGb=#N$00.
 $ED46 LD HL,$EEC0   ; {#REGhl=#R$EEC0+=#REGbc.
 $ED49 ADD HL,BC     ; }
 $ED4A LD DE,$BACF   ; #REGde=#R$BAC6(#N$BACF).
 $ED4D LD C,$05      ; #REGc=#N$05.
 $ED4F LDIR          ; Update the password at #R$BAC6 with the password for the
                     ; new level.
 $ED51 RET           ; Return.

; Display Playing Instructions
;
; Used by the routine at #R$E80E.
@label=DisplayInstructions
c$ED52 EXX           ; Switch to the shadow registers.
 $ED53 LD DE,$4000   ; #REGde'=#R$4000(#N$4000) (screen buffer location).
 $ED56 EXX           ; Switch back to the normal registers.
; Prints the "#STR($EE74,$03,$20)" banner.
 $ED57 LD HL,$EE74   ; #REGhl=#R$EE74.
 $ED5A LD B,$20      ; #REGb=#N$20 (length of banner).
 $ED5C CALL $74D3    ; Call #R$74D3.
; Prints the "#STR($EE94,$03,$20)" footer messaging.
 $ED5F LD A,$9F      ; #REGa=#N$9F (#COLOUR$9F).
 $ED61 LD HL,$EE94   ; #REGhl=#R$EE94.
 $ED64 CALL $74C3    ; Call #R$74C3.
; Display the instructions for page one.
; .
; #PUSHS #UDGTABLE(default,centre) {
;   #SIM(start=$E821,stop=$E8C0)#SIM(start=$ED52,stop=$ED8C)
;   #SCR$02(instruction-01)
; } UDGTABLE# #POPS
; .
; Set the attributes.
 $ED67 LD HL,$5840   ; #REGhl=#N$5840 (attribute buffer location).
 $ED6A LD B,$A0      ; #REGb=#N$A0 (counter).
@label=Instructions_Page1_CyanLoop
*$ED6C LD (HL),$28   ; Write #N$28 (#COLOUR$28) to *#REGhl.
 $ED6E INC HL        ; Increment #REGhl by one.
 $ED6F DJNZ $ED6C    ; Decrease counter by one and loop back to #R$ED6C until
                     ; counter is zero.
 $ED71 LD B,$C0      ; #REGb=#N$C0 (counter).
@label=Instructions_Page1_YellowLoop
*$ED73 LD (HL),$30   ; Write #N$30 (#COLOUR$30) to *#REGhl.
 $ED75 INC HL        ; Increment #REGhl by one.
 $ED76 DJNZ $ED73    ; Decrease counter by one and loop back to #R$ED73 until
                     ; counter is zero.
 $ED78 LD B,$E0      ; #REGb=#N$E0 (counter).
@label=Instructions_Page1_GreenLoop
*$ED7A LD (HL),$20   ; Write #N$20 (#COLOUR$20) to *#REGhl.
 $ED7C INC HL        ; Increment #REGhl by one.
 $ED7D DJNZ $ED7A    ; Decrease counter by one and loop back to #R$ED7A until
                     ; counter is zero.
 $ED7F LD B,$60      ; #REGb=#N$60 (counter).
@label=Instructions_Page1_Cyan2Loop
*$ED81 LD (HL),$28   ; Write #N$28 (#COLOUR$28) to *#REGhl.
 $ED83 INC HL        ; Increment #REGhl by one.
 $ED84 DJNZ $ED81    ; Decrease counter by one and loop back to #R$ED81 until
                     ; counter is zero.
; Now display the text for page one on the screen.
 $ED86 LD HL,$F000   ; #REGhl=#R$F000.
 $ED89 CALL $EC8E    ; Call #R$EC8E.
 $ED8C PUSH HL       ; Store the current position in the instructions for the
                     ; next page later.
 $ED8D CALL $EBE6    ; Debounce using #R$EBE6.
@label=Instructions_InputLoop_Page1
*$ED90 CALL $6828    ; Call #R$6828.
 $ED93 AND A         ; {Jump to #R$ED90 until any key is pressed.
 $ED94 JR Z,$ED90    ; }
; Display the instructions for page two.
; .
; #PUSHS #UDGTABLE(default,centre) {
;   #SIM(start=$E821,stop=$E8C0)#SIM(start=$ED52,stop=$ED8D)#SIM(start=$ED96,stop=$EDA7)
;   #SCR$02(instruction-02)
; } UDGTABLE# #POPS
; .
; Set the attributes.
 $ED96 LD HL,$5840   ; #REGhl=#N$5840 (attribute buffer location).
 $ED99 LD (HL),$0F   ; Write #N$0F (#COLOUR$0F) to *#REGhl.
 $ED9B LD DE,$5841   ; #REGde=#N$5841 (attribute buffer location).
 $ED9E LD BC,$029F   ; #REGbc=#N$029F.
 $EDA1 LDIR          ; Copy #COLOUR$0F to the screen buffer #N$029F times.
; Now display the text for page two on the screen.
 $EDA3 POP HL        ; Restore the position of the instructions pointer from
                     ; the stack.
 $EDA4 CALL $EC8E    ; Call #R$EC8E.
 $EDA7 PUSH HL       ; Store the current position in the instructions for the
                     ; next page later.
 $EDA8 CALL $EBE6    ; Debounce using #R$EBE6.
@label=Instructions_InputLoop_Page2
*$EDAB CALL $6828    ; Call #R$6828.
 $EDAE AND A         ; {Jump to #R$EDAB until any key is pressed.
 $EDAF JR Z,$EDAB    ; }
; Display the instructions for page three.
; .
; #PUSHS #UDGTABLE(default,centre) {
;   #SIM(start=$E821,stop=$E8C0)#SIM(start=$ED52,stop=$ED8D)#SIM(start=$ED96,stop=$EDA8)#SIM(start=$EDB1,stop=$EDE4)
;   #SCR$02(instruction-03)
; } UDGTABLE# #POPS
; .
; Set the attributes.
 $EDB1 LD HL,$5960   ; #REGhl=#N$5960 (attribute buffer location).
 $EDB4 LD B,$80      ; #REGb=#N$80 (counter).
@label=Instructions_Page3_CyanLoop
*$EDB6 LD (HL),$28   ; Write #N$28 (#COLOUR$28) to *#REGhl.
 $EDB8 INC HL        ; Increment #REGhl by one.
 $EDB9 DJNZ $EDB6    ; Decrease counter by one and loop back to #R$EDB6 until
                     ; counter is zero.
 $EDBB LD B,$A0      ; #REGb=#N$A0 (counter).
@label=Instructions_Page3_GreenLoop
*$EDBD LD (HL),$20   ; Write #N$20 (#COLOUR$20) to *#REGhl.
 $EDBF INC HL        ; Increment #REGhl by one.
 $EDC0 DJNZ $EDBD    ; Decrease counter by one and loop back to #R$EDBD until
                     ; counter is zero.
 $EDC2 LD B,$60      ; #REGb=#N$60 (counter).
@label=Instructions_Page3_YellowLoop
*$EDC4 LD (HL),$30   ; Write #N$30 (#COLOUR$30) to *#REGhl.
 $EDC6 INC HL        ; Increment #REGhl by one.
 $EDC7 DJNZ $EDC4    ; Decrease counter by one and loop back to #R$EDC4 until
                     ; counter is zero.
; Colour the "keys" guide.
 $EDC9 LD HL,$5860   ; #REGhl=#N$5860 (attribute buffer location).
 $EDCC LD DE,$0037   ; #REGde=#N($0037,$04,$04).
 $EDCF LD C,$04      ; #REGc=#N$04 (counter; rows of "keys").
@label=HighlightKeys_RowLoop
*$EDD1 LD B,$09      ; #REGb=#N$09 (counter; nine columns to colour).
@label=HighlightKeys_LineLoop
*$EDD3 LD (HL),$1B   ; Write #N$1B (#COLOUR$1B) to *#REGhl.
 $EDD5 INC HL        ; Increment #REGhl by one.
 $EDD6 DJNZ $EDD3    ; Decrease counter by one and loop back to #R$EDD3 until
                     ; counter is zero.
 $EDD8 ADD HL,DE     ; Add #REGde to #REGhl to move us down one whole row (#N$20) and back to the beginning of where we need to
                     ;           colour in (#N$20-#N$09=#N$17 ~ #N$20+#N$17=#N$37).
 $EDD9 DEC C         ; Decrease #REGc by one.
 $EDDA JR NZ,$EDD1   ; Jump to #R$EDD1 until #REGc is zero.
; Fill in the gap on the bottom row.
 $EDDC LD L,$24      ; Move the screen buffer pointer.
 $EDDE LD (HL),$09   ; Write #N$09 (#COLOUR$09) to *#REGhl.
; Now display the text for page three on the screen.
 $EDE0 POP HL        ; Restore the position of the instructions pointer from
                     ; the stack.
 $EDE1 CALL $EC8E    ; Call #R$EC8E.
 $EDE4 PUSH HL       ; Store the current position in the instructions for the
                     ; next page later.
 $EDE5 CALL $EBE6    ; Debounce using #R$EBE6.
@label=Instructions_InputLoop_Page3
*$EDE8 CALL $6828    ; Call #R$6828.
 $EDEB AND A         ; {Jump to #R$EDE8 until any key is pressed.
 $EDEC JR Z,$EDE8    ; }
; Display the instructions for page four.
; .
; #PUSHS #UDGTABLE(default,centre) {
;   #SIM(start=$E821,stop=$E8C0)#SIM(start=$ED52,stop=$ED8D)#SIM(start=$ED96,stop=$EDA8)#SIM(start=$EDB1,stop=$EDE5)#SIM(start=$EDEE,stop=$EDFF)
;   #SCR$02(instruction-04)
; } UDGTABLE# #POPS
; .
; Set the attributes.
 $EDEE LD HL,$5840   ; #REGhl=#N$5840 (attribute buffer location).
 $EDF1 LD (HL),$30   ; Write #N$30 (#COLOUR$30) to *#REGhl.
 $EDF3 LD DE,$5841   ; #REGde=#N$5841 (attribute buffer location).
 $EDF6 LD BC,$029F   ; #REGbc=#N$029F.
 $EDF9 LDIR          ; Copy #COLOUR$30 to the screen buffer #N$029F times.
; Now display the text for page four on the screen.
 $EDFB POP HL        ; Restore the position of the instructions pointer from
                     ; the stack.
 $EDFC CALL $EC8E    ; Call #R$EC8E.
 $EDFF CALL $EBE6    ; Debounce using #R$EBE6.
@label=Instructions_InputLoop_Page4
*$EE02 CALL $6828    ; Call #R$6828.
 $EE05 AND A         ; {Jump to #R$EE02 until any key is pressed.
 $EE06 JR Z,$EE02    ; }
 $EE08 RET           ; Return.

; Unused
u$EE09 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $EE11 DEFB $78,$78,$78

; Messaging: Code Entry
@label=Messaging_CodeEntry
t$EE14 DEFM "  KEY IN 1ST CHARACTER OF CODE  " ; {#TABLE(default,centre)
 $EE34 DEFM "(JUST PRESS 'ENTER' FOR LEVEL 1)" ; #FOR$00,$20,$20(n,{
                                               ; "#STR(#PC+n,$04,$20)" }, )
                                               ; TABLE#}

; Messaging: Code Mistake
@label=Messaging_Mistake
t$EE54 DEFM "      MISTAKE - TRY AGAIN       " ; "#STR(#PC,$04,$20)".

; Messaging: How To Play Wheelie
@label=Messaging_HowToPlay
t$EE74 DEFM "       HOW TO PLAY WHEELIE      " ; "#STR(#PC,$04,$20)".

; Messaging: Press Any Key
@label=Messaging_PressAnyKey
t$EE94 DEFM "  PRESS ANY KEY FOR NEXT PAGE   " ; "#STR(#PC,$04,$20)".

; Messaging: Code Letter Position
@label=Messaging_CodeLetterPosition
t$EEB4 DEFM "2ND"
 $EEB7 DEFM "3RD"
 $EEBA DEFM "4TH"
 $EEBD DEFM "5TH"

; Messaging: Passwords
;
; Used by the routine at #R$ECAB.
@label=Messaging_Passwords
t$EEC0 DEFM "WITTY"  ; Password for level #N($01+(#PC-$EEC0)/$05).
 $EEC5 DEFM "SHARK"  ; Password for level #N($01+(#PC-$EEC0)/$05).
 $EECA DEFM "BEBOP"  ; Password for level #N($01+(#PC-$EEC0)/$05).
 $EECF DEFM "XENON"  ; Password for level #N($01+(#PC-$EEC0)/$05).
 $EED4 DEFM "ZX83B"  ; Password for level #N($01+(#PC-$EEC0)/$05).
 $EED9 DEFM "2MQL3"  ; Password for level #N($01+(#PC-$EEC0)/$05).
 $EEDE DEFM "HRME2"  ; Password for level #N($01+(#PC-$EEC0)/$05).

; Message at EEE3
t$EEE3 DEFM "HRME2"

; Melody Data: "Level Complete"
;
; Used by the routine at #R$EC5E.
@label=MelodyData_LevelComplete
b$EEE8 DEFB $78,$B0,$01
 $EEEB DEFB $6A,$E5,$01
 $EEEE DEFB $5E,$21,$02
 $EEF1 DEFB $59,$41,$02
 $EEF4 DEFB $78,$B0,$01
 $EEF7 DEFB $6A,$E5,$01
 $EEFA DEFB $5E,$21,$02
 $EEFD DEFB $59,$41,$02
 $EF00 DEFB $59,$41,$02
 $EF03 DEFB $5E,$21,$02
 $EF06 DEFB $59,$41,$02
 $EF09 DEFB $4F,$88,$02
 $EF0C DEFB $6A,$E5,$01
 $EF0F DEFB $5E,$21,$02
 $EF12 DEFB $54,$63,$02
 $EF15 DEFB $4F,$88,$02
 $EF18 DEFB $78,$B0,$01
 $EF1B DEFB $6A,$E5,$01
 $EF1E DEFB $5E,$21,$02
 $EF21 DEFB $59,$D5,$04
 $EF24 DEFB $78,$9F,$03
 $EF27 DEFB $01,$01,$00
 $EF2A DEFB $01,$01,$00
 $EF2D DEFB $01,$01,$00
 $EF30 DEFB $01,$01,$00
 $EF33 DEFB $01,$01,$00
 $EF36 DEFB $01,$01,$00
 $EF39 DEFB $01,$01,$00
 $EF3C DEFB $01,$01,$00
 $EF3F DEFB $59,$41,$02
 $EF42 DEFB $5E,$21,$02
 $EF45 DEFB $59,$41,$02
 $EF48 DEFB $4F,$6D,$05
 $EF4B DEFB $6A,$00,$0F
 $EF4E DEFB $FF         ; Terminator.

; Melody Data: "The Race Is On!"
;
; Used by the routine at #R$EC63.
@label=MelodyData_RaceIsOn
b$EF4F DEFB $F0,$5E,$00
 $EF52 DEFB $E2,$E9,$00
 $EF55 DEFB $01,$01,$00
 $EF58 DEFB $01,$01,$00
 $EF5B DEFB $01,$01,$00
 $EF5E DEFB $01,$01,$00
 $EF61 DEFB $6F,$C8,$00
 $EF64 DEFB $6F,$D2,$01
 $EF67 DEFB $01,$01,$00
 $EF6A DEFB $01,$01,$00
 $EF6D DEFB $01,$01,$00
 $EF70 DEFB $01,$01,$00
 $EF73 DEFB $C9,$70,$00
 $EF76 DEFB $BE,$15,$01
 $EF79 DEFB $01,$01,$00
 $EF7C DEFB $01,$01,$00
 $EF7F DEFB $01,$01,$00
 $EF82 DEFB $01,$01,$00
 $EF85 DEFB $5D,$ED,$00
 $EF88 DEFB $5D,$2B,$02
 $EF8B DEFB $01,$01,$00
 $EF8E DEFB $01,$01,$00
 $EF91 DEFB $01,$01,$00
 $EF94 DEFB $01,$01,$00
 $EF97 DEFB $F0,$5E,$00
 $EF9A DEFB $E2,$E9,$00
 $EF9D DEFB $01,$01,$00
 $EFA0 DEFB $01,$01,$00
 $EFA3 DEFB $01,$01,$00
 $EFA6 DEFB $01,$01,$00
 $EFA9 DEFB $C9,$70,$00
 $EFAC DEFB $BE,$15,$01
 $EFAF DEFB $01,$01,$00
 $EFB2 DEFB $01,$01,$00
 $EFB5 DEFB $01,$01,$00
 $EFB8 DEFB $01,$01,$00
 $EFBB DEFB $8D,$9E,$00
 $EFBE DEFB $96,$00,$0F
 $EFC1 DEFB $FF         ; Terminator.

; Melody Data: "Ghostrider Has Finished"
;
; Used by the routine at #R$EC68.
@label=MelodyData_GhostriderFinished
b$EFC2 DEFB $84,$4D,$03
 $EFC5 DEFB $9E,$C7,$02
 $EFC8 DEFB $75,$B5,$03
 $EFCB DEFB $84,$4D,$03
 $EFCE DEFB $9E,$C7,$02
 $EFD1 DEFB $75,$B5,$03
 $EFD4 DEFB $84,$4D,$03
 $EFD7 DEFB $9E,$C7,$02
 $EFDA DEFB $75,$B5,$03
 $EFDD DEFB $84,$4D,$03
 $EFE0 DEFB $9E,$C7,$02
 $EFE3 DEFB $75,$B5,$03
 $EFE6 DEFB $84,$59,$0A
 $EFE9 DEFB $84,$59,$0A
 $EFEC DEFB $84,$4D,$03
 $EFEF DEFB $9E,$C7,$02
 $EFF2 DEFB $75,$B5,$03
 $EFF5 DEFB $84,$4D,$03
 $EFF8 DEFB $9E,$C7,$02
 $EFFB DEFB $C8,$F6,$0D
 $EFFE DEFB $FF         ; Terminator.

; Unused
u$EFFF DEFB $78

; Messaging: Instructions (Page 1)
@label=Messaging_InstructionsPage1
t$F000 DEFM "YOU ARE TRAPPED on strange roads" ; {Page 1.
 $F020 DEFM "Your only hope of escape is to  " ;
 $F040 DEFM "find the ghostrider & then beat " ;
 $F060 DEFM "him in a life-or-death race.    " ;
 $F080 DEFM "You start at one end of a system" ;
 $F0A0 DEFM "of roads while the ghostrider   " ;
 $F0C0 DEFM "dozes at the other.To find him  " ;
 $F0E0 DEFM "head right, getting past hazards" ;
 $F100 DEFM "backtracking from dead-ends,and " ;
 $F120 DEFM "avoiding the deadly wildlife.   " ;
 $F140 DEFM "If you reach the ghostrider and " ;
 $F160 DEFM "touch him to wake him,the race  " ;
 $F180 DEFM "back can begin. Touching him    " ;
 $F1A0 DEFM "again is fatal, as is losing the" ;
 $F1C0 DEFM "race, but at least he scares the" ;
 $F1E0 DEFM "wildlife. He does have one small" ;
 $F200 DEFM "advantage-he can go through rock" ;
 $F220 DEFM "If you somehow win you will be  " ;
 $F240 DEFM "given the code to the next level" ;
 $F260 DEFM "for the next time you play.     " ; }

; Messaging: Instructions (Page 2)
@label=Messaging_InstructionsPage2
t$F280 DEFM "INPUT - When WHEELIE is loaded  " ; {Page 2.
 $F2A0 DEFM "it assumes that you are going to" ;
 $F2C0 DEFM "use the keyboard, with different" ;
 $F2E0 DEFM "groups of keys to control the   " ;
 $F300 DEFM "bikers movements.(See next page)" ;
 $F320 DEFM "Using the keyboard like this    " ;
 $F340 DEFM "lets WHEELIE respond to several " ;
 $F360 DEFM "keys at once                    " ;
 $F380 DEFM "                                " ;
 $F3A0 DEFM "You can select specific keys by " ;
 $F3C0 DEFM "changing the joystick/keyboard  " ;
 $F3E0 DEFM "mode. Options exist for Kempston" ;
 $F400 DEFM "& AGF joysticks, but if you have" ;
 $F420 DEFM "a different joystick you can use" ;
 $F440 DEFM "this by selecting the 'OTHER'   " ;
 $F460 DEFM "option and moving the joystick  " ;
 $F480 DEFM "so that WHEELIE can work out    " ;
 $F4A0 DEFM "what keys the joystick is set up" ;
 $F4C0 DEFM "to simulate. Note that FIRE on a" ;
 $F4E0 DEFM "joystick is used as FREEZE      " ; }

; Messaging: Instructions (Page 3)
@label=Messaging_InstructionsPage3
t$F500 DEFM "          This row = FREEZE     " ; {Page 3.
 $F520 DEFM "                                " ;
 $F540 DEFM "          This row = UP         " ;
 $F560 DEFM "                                " ;
 $F580 DEFM "          This row = DOWN       " ;
 $F5A0 DEFM "                                " ;
 $F5C0 DEFM "          5 keys on left = LEFT " ;
 $F5E0 DEFM "          5 keys on right= RIGHT" ;
 $F600 DEFM "FREEZE - stops wildlife moving  " ;
 $F620 DEFM "for a few seconds to give you a " ;
 $F640 DEFM "better chance of getting past.  " ;
 $F660 DEFM "Sadly it also uses a lot of fuel" ;
 $F680 DEFM "UP/DOwN - takes you up/down at a" ;
 $F6A0 DEFM "junction (otherwise you just go " ;
 $F6C0 DEFM "straight on). Note that it only " ;
 $F6E0 DEFM "works if being used when the    " ;
 $F700 DEFM "front wheel reaches the junction" ;
 $F720 DEFM "LEFT/RIGHT - makes you speed up " ;
 $F740 DEFM "in that direction (or brake if  " ;
 $F760 DEFM "you are going the other way).   " ; }

; Messaging: Instructions (Page 4)
@label=Messaging_InstructionsPage4
t$F780 DEFM "HUMPS,JUMPS,ICE ETC- To get over" ; {Page 4.
 $F7A0 DEFM "the jumps make sure you're set  " ;
 $F7C0 DEFM "up correctly (don't go too fast " ;
 $F7E0 DEFM "or too slow). You will have to  " ;
 $F800 DEFM "do a wheelie for the humps,avoid" ;
 $F820 DEFM "sliding on the ice, and don't go" ;
 $F840 DEFM "flat out down hills- It hurts!  " ;
 $F860 DEFM "                                " ;
 $F880 DEFM "ANIMALS - Any wildlife you meet " ;
 $F8A0 DEFM "is trained in karate, so don't  " ;
 $F8C0 DEFM "let it touch you                " ;
 $F8E0 DEFM "                                " ;
 $F900 DEFM "WHEELS - Touching a wheel scores" ;
 $F920 DEFM "50 points.Pity they're airborne!" ;
 $F940 DEFM "                                " ;
 $F960 DEFM "FUEL -The faster you go the more" ;
 $F980 DEFM "fuel you use. You can only fill " ;
 $F9A0 DEFM "up once at each 'GAS' station,so" ;
 $F9C0 DEFM "do remember that you have to get" ;
 $F9E0 DEFM "back as well.                   " ; }

; Data block at FA00
b$FA00 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA08 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA10 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA18 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA20 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA28 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA30 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA38 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA40 DEFB $78,$78,$78,$78,$78,$78,$78
 $FA47 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA4F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA57 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA5F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA67 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA6F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA77 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA7F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA87 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA8F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA97 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FA9F DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $FAA7 DEFB $78,$78,$78,$0D,$00,$02,$3A,$00
 $FAAF DEFB $F4,$32,$33,$37,$35,$38,$0E,$00
 $FAB7 DEFB $00,$CE,$5C,$00,$2C,$32,$32,$0E
 $FABF DEFB $00,$00,$16,$00,$00,$3A,$F4,$32
 $FAC7 DEFB $33,$37,$35,$37,$0E,$00,$00,$CD
 $FACF DEFB $5C,$00,$2C,$37,$31,$0E,$00,$00
 $FAD7 DEFB $47,$00,$00,$3A,$F8,$22,$77,$32
 $FADF DEFB $22,$CA,$31,$0E,$00,$00,$01,$00
 $FAE7 DEFB $00,$0D,$80,$EF,$22,$22,$0D,$80
 $FAEF DEFB $00,$00,$11,$5D,$00,$00,$00,$46
 $FAF7 DEFB $00,$00,$00,$00,$5C,$00,$00,$BE
 $FAFF DEFB $1D,$00,$77,$32,$20,$20,$20,$20
 $FB07 DEFB $20,$20,$20,$20,$7D,$98,$01,$00
 $FB0F DEFB $7D,$98,$3A,$00,$00,$00,$00,$00
 $FB17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDFF DEFB $00
 $FE00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF18 DEFB $F3,$0D,$CE,$0B,$E3,$50,$CE,$0B
 $FF20 DEFB $E4,$50,$1D,$17,$B1,$33,$53,$F5
 $FF28 DEFB $00,$5C,$9B,$36,$65,$33,$00,$00
 $FF30 DEFB $53,$F5,$ED,$30,$9B,$36,$B1,$33
 $FF38 DEFB $B7,$2D,$4E,$F5,$49,$F5,$11,$5D
 $FF40 DEFB $2B,$2D,$65,$33,$00,$00,$ED,$10
 $FF48 DEFB $3A,$00,$09,$00,$85,$1C,$10,$1C
 $FF50 DEFB $52,$1B,$76,$1B,$03,$13,$00,$3E
 $FF58 DEFB $00,$3C,$42,$42,$7E,$42,$42,$00
 $FF60 DEFB $00,$7C,$42,$7C,$42,$42,$7C,$00
 $FF68 DEFB $00,$3C,$42,$40,$40,$42,$3C,$00
 $FF70 DEFB $00,$78,$44,$42,$42,$44,$78,$00
 $FF78 DEFB $00,$7E,$40,$7C,$40,$40,$7E,$00
 $FF80 DEFB $00,$7E,$40,$7C,$40,$40,$40,$00
 $FF88 DEFB $00,$3C,$42,$40,$4E,$42,$3C,$00
 $FF90 DEFB $00,$42,$42,$7E,$42,$42,$42,$00
 $FF98 DEFB $00,$3E,$08,$08,$08,$08,$3E,$00
 $FFA0 DEFB $00,$02,$02,$02,$42,$42,$3C,$00
 $FFA8 DEFB $00,$44,$48,$70,$48,$44,$42,$00
 $FFB0 DEFB $00,$40,$40,$40,$40,$40,$7E,$00
 $FFB8 DEFB $00,$42,$66,$5A,$42,$42,$42,$00
 $FFC0 DEFB $00,$42,$62,$52,$4A,$46,$42,$00
 $FFC8 DEFB $00,$3C,$42,$42,$42,$42,$3C,$00
 $FFD0 DEFB $00,$7C,$42,$42,$7C,$40,$40,$00
 $FFD8 DEFB $00,$3C,$42,$42,$52,$4A,$3C,$00
 $FFE0 DEFB $00,$7C,$42,$42,$7C,$44,$42,$00
 $FFE8 DEFB $00,$3C,$40,$3C,$02,$42,$3C,$00
 $FFF0 DEFB $00,$DB,$02,$4D,$00,$96,$69,$97
 $FFF8 DEFB $05,$F5,$63,$4C,$11,$22,$5D,$00
